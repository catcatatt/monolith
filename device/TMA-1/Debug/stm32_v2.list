
stm32_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800bec0  0800bec0  0000cec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3b0  0800c3b0  0000e1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3b0  0800c3b0  0000d3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3b8  0800c3b8  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3b8  0800c3b8  0000d3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3bc  0800c3bc  0000d3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c3c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1dc  2**0
                  CONTENTS
 10 .bss          00009aa8  200001e0  200001e0  0000e1e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20009c88  20009c88  0000e1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033769  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006cff  00000000  00000000  00041975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001ab24  00000000  00000000  00048674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c80  00000000  00000000  00063198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c02  00000000  00000000  00064e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b6e8  00000000  00000000  00067a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003aee6  00000000  00000000  00093102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee4e1  00000000  00000000  000cdfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001bc4c9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000065d0  00000000  00000000  001bc50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  001c2adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bea4 	.word	0x0800bea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800bea4 	.word	0x0800bea4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc0:	f000 b9a0 	b.w	8000f04 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f83c 	bl	8000c48 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2lz>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	2200      	movs	r2, #0
 8000be0:	2300      	movs	r3, #0
 8000be2:	4604      	mov	r4, r0
 8000be4:	460d      	mov	r5, r1
 8000be6:	f7ff ff71 	bl	8000acc <__aeabi_dcmplt>
 8000bea:	b928      	cbnz	r0, 8000bf8 <__aeabi_d2lz+0x1c>
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bf4:	f000 b80a 	b.w	8000c0c <__aeabi_d2ulz>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bfe:	f000 f805 	bl	8000c0c <__aeabi_d2ulz>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	bd38      	pop	{r3, r4, r5, pc}
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2ulz>:
 8000c0c:	b5d0      	push	{r4, r6, r7, lr}
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__aeabi_d2ulz+0x34>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	4606      	mov	r6, r0
 8000c14:	460f      	mov	r7, r1
 8000c16:	f7ff fce7 	bl	80005e8 <__aeabi_dmul>
 8000c1a:	f7ff ffa7 	bl	8000b6c <__aeabi_d2uiz>
 8000c1e:	4604      	mov	r4, r0
 8000c20:	f7ff fc68 	bl	80004f4 <__aeabi_ui2d>
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <__aeabi_d2ulz+0x38>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f7ff fcde 	bl	80005e8 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4630      	mov	r0, r6
 8000c32:	4639      	mov	r1, r7
 8000c34:	f7ff fb20 	bl	8000278 <__aeabi_dsub>
 8000c38:	f7ff ff98 	bl	8000b6c <__aeabi_d2uiz>
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c40:	3df00000 	.word	0x3df00000
 8000c44:	41f00000 	.word	0x41f00000

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <HAL_ADC_ConvCpltCallback>:
extern uint32_t adc_flag;
extern uint32_t adc_sys_value[2];
extern uint32_t adc_ain_value[ADC_COUNT];
extern uint32_t adc_ain_value2[ADC_COUNT2];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // internal core temperature and input voltage
  if (hadc->Instance == ADC1) {
 8000f0a:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0x84>)
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00c      	beq.n	8000f2c <HAL_ADC_ConvCpltCallback+0x24>
    adc_sys_value[0] = (uint16_t)(((110.0 - 30) * (adc_sys_value[0] - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
    adc_flag |= 1 << FLAG_ADC_SYS;
  }

  // AIN channels
  else if (hadc->Instance == ADC2) {
 8000f12:	4a1f      	ldr	r2, [pc, #124]	@ (8000f90 <HAL_ADC_ConvCpltCallback+0x88>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d003      	beq.n	8000f20 <HAL_ADC_ConvCpltCallback+0x18>
    adc_flag |= 1 << FLAG_ADC_AIN;
  }

  else if (hadc->Instance == ADC3){
 8000f18:	4a1e      	ldr	r2, [pc, #120]	@ (8000f94 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d02f      	beq.n	8000f7e <HAL_ADC_ConvCpltCallback+0x76>
    adc_flag |= 1 << FLAG_ADC_AIN2;
  }
}
 8000f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adc_flag |= 1 << FLAG_ADC_AIN;
 8000f20:	4a1d      	ldr	r2, [pc, #116]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x90>)
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6013      	str	r3, [r2, #0]
}
 8000f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adc_sys_value[0] = (uint16_t)(((110.0 - 30) * (adc_sys_value[0] - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8000f2c:	4d1b      	ldr	r5, [pc, #108]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0x94>)
 8000f2e:	4e1c      	ldr	r6, [pc, #112]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0x98>)
 8000f30:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
 8000f32:	6830      	ldr	r0, [r6, #0]
 8000f34:	1bc0      	subs	r0, r0, r7
 8000f36:	f7ff fadd 	bl	80004f4 <__aeabi_ui2d>
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f3e:	f7ff fb53 	bl	80005e8 <__aeabi_dmul>
 8000f42:	8deb      	ldrh	r3, [r5, #46]	@ 0x2e
 8000f44:	4604      	mov	r4, r0
 8000f46:	1bd8      	subs	r0, r3, r7
 8000f48:	460d      	mov	r5, r1
 8000f4a:	f7ff fae3 	bl	8000514 <__aeabi_i2d>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4620      	mov	r0, r4
 8000f54:	4629      	mov	r1, r5
 8000f56:	f7ff fc71 	bl	800083c <__aeabi_ddiv>
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f7ff f98d 	bl	800027c <__adddf3>
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f7ff fb3f 	bl	80005e8 <__aeabi_dmul>
 8000f6a:	f7ff fdff 	bl	8000b6c <__aeabi_d2uiz>
    adc_flag |= 1 << FLAG_ADC_SYS;
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x90>)
 8000f70:	6813      	ldr	r3, [r2, #0]
    adc_sys_value[0] = (uint16_t)(((110.0 - 30) * (adc_sys_value[0] - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8000f72:	b280      	uxth	r0, r0
    adc_flag |= 1 << FLAG_ADC_SYS;
 8000f74:	f043 0302 	orr.w	r3, r3, #2
    adc_sys_value[0] = (uint16_t)(((110.0 - 30) * (adc_sys_value[0] - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8000f78:	6030      	str	r0, [r6, #0]
    adc_flag |= 1 << FLAG_ADC_SYS;
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adc_flag |= 1 << FLAG_ADC_AIN2;
 8000f7e:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x90>)
 8000f80:	6813      	ldr	r3, [r2, #0]
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40012100 	.word	0x40012100
 8000f94:	40012200 	.word	0x40012200
 8000f98:	200005d4 	.word	0x200005d4
 8000f9c:	1fff7a00 	.word	0x1fff7a00
 8000fa0:	200005d0 	.word	0x200005d0
 8000fa4:	40540000 	.word	0x40540000
 8000fa8:	403e0000 	.word	0x403e0000
 8000fac:	40240000 	.word	0x40240000

08000fb0 <ANALOG_SETUP>:
  /* ADC calibration is not supported in STM32F4 series */
  // while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
  // while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
  // while(HAL_ADCEx_Calibration_Start(&hadc3) != HAL_OK);
  return SYS_OK;
}
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;


/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb8:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fba:	481f      	ldr	r0, [pc, #124]	@ (8001038 <MX_ADC1_Init+0x80>)
 8000fbc:	491f      	ldr	r1, [pc, #124]	@ (800103c <MX_ADC1_Init+0x84>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8001028 <MX_ADC1_Init+0x70>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	2300      	movs	r3, #0
{
 8000fc8:	b085      	sub	sp, #20
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fca:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000fce:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd0:	e9cd 3300 	strd	r3, r3, [sp]
 8000fd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd8:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fdc:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fde:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe0:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fea:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fee:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff0:	f002 f8fe 	bl	80031f0 <HAL_ADC_Init>
 8000ff4:	b968      	cbnz	r0, 8001012 <MX_ADC1_Init+0x5a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ff6:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8001030 <MX_ADC1_Init+0x78>
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000ffa:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffc:	480e      	ldr	r0, [pc, #56]	@ (8001038 <MX_ADC1_Init+0x80>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000ffe:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001002:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	f002 fb2b 	bl	8003660 <HAL_ADC_ConfigChannel>
 800100a:	b928      	cbnz	r0, 8001018 <MX_ADC1_Init+0x60>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100c:	b005      	add	sp, #20
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001012:	f001 f927 	bl	8002264 <Error_Handler>
 8001016:	e7ee      	b.n	8000ff6 <MX_ADC1_Init+0x3e>
    Error_Handler();
 8001018:	f001 f924 	bl	8002264 <Error_Handler>
}
 800101c:	b005      	add	sp, #20
 800101e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	0f000001 	.word	0x0f000001
 800102c:	00000000 	.word	0x00000000
 8001030:	00000010 	.word	0x00000010
 8001034:	00000001 	.word	0x00000001
 8001038:	200003b0 	.word	0x200003b0
 800103c:	40012000 	.word	0x40012000

08001040 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001040:	b500      	push	{lr}

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001042:	482f      	ldr	r0, [pc, #188]	@ (8001100 <MX_ADC2_Init+0xc0>)
 8001044:	492f      	ldr	r1, [pc, #188]	@ (8001104 <MX_ADC2_Init+0xc4>)
 8001046:	6001      	str	r1, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = ENABLE;
 8001048:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	2300      	movs	r3, #0
{
 800104c:	b085      	sub	sp, #20
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800104e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  hadc2.Init.ScanConvMode = ENABLE;
 8001052:	6102      	str	r2, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 4;
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001054:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4a2b      	ldr	r2, [pc, #172]	@ (8001108 <MX_ADC2_Init+0xc8>)
  hadc2.Init.ContinuousConvMode = DISABLE;
 800105a:	7603      	strb	r3, [r0, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105c:	e9cd 3300 	strd	r3, r3, [sp]
 8001060:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001068:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106c:	60c3      	str	r3, [r0, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800106e:	6143      	str	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	2300      	movs	r3, #0
 8001072:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 4;
 8001076:	2304      	movs	r3, #4
 8001078:	61c3      	str	r3, [r0, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800107a:	f002 f8b9 	bl	80031f0 <HAL_ADC_Init>
 800107e:	bb40      	cbnz	r0, 80010d2 <MX_ADC2_Init+0x92>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001080:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 80010f8 <MX_ADC2_Init+0xb8>
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001084:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001086:	481e      	ldr	r0, [pc, #120]	@ (8001100 <MX_ADC2_Init+0xc0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001088:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800108a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_0;
 800108c:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001090:	f002 fae6 	bl	8003660 <HAL_ADC_ConfigChannel>
 8001094:	bb58      	cbnz	r0, 80010ee <MX_ADC2_Init+0xae>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001096:	2201      	movs	r2, #1
 8001098:	2302      	movs	r3, #2
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109a:	4819      	ldr	r0, [pc, #100]	@ (8001100 <MX_ADC2_Init+0xc0>)
 800109c:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_1;
 800109e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a2:	f002 fadd 	bl	8003660 <HAL_ADC_ConfigChannel>
 80010a6:	b9f8      	cbnz	r0, 80010e8 <MX_ADC2_Init+0xa8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010a8:	2202      	movs	r2, #2
 80010aa:	2303      	movs	r3, #3
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010ac:	4814      	ldr	r0, [pc, #80]	@ (8001100 <MX_ADC2_Init+0xc0>)
 80010ae:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 80010b0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010b4:	f002 fad4 	bl	8003660 <HAL_ADC_ConfigChannel>
 80010b8:	b998      	cbnz	r0, 80010e2 <MX_ADC2_Init+0xa2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010ba:	2203      	movs	r2, #3
 80010bc:	2304      	movs	r3, #4
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010be:	4810      	ldr	r0, [pc, #64]	@ (8001100 <MX_ADC2_Init+0xc0>)
 80010c0:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_3;
 80010c2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c6:	f002 facb 	bl	8003660 <HAL_ADC_ConfigChannel>
 80010ca:	b928      	cbnz	r0, 80010d8 <MX_ADC2_Init+0x98>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
  

}
 80010cc:	b005      	add	sp, #20
 80010ce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010d2:	f001 f8c7 	bl	8002264 <Error_Handler>
 80010d6:	e7d3      	b.n	8001080 <MX_ADC2_Init+0x40>
    Error_Handler();
 80010d8:	f001 f8c4 	bl	8002264 <Error_Handler>
}
 80010dc:	b005      	add	sp, #20
 80010de:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010e2:	f001 f8bf 	bl	8002264 <Error_Handler>
 80010e6:	e7e8      	b.n	80010ba <MX_ADC2_Init+0x7a>
    Error_Handler();
 80010e8:	f001 f8bc 	bl	8002264 <Error_Handler>
 80010ec:	e7dc      	b.n	80010a8 <MX_ADC2_Init+0x68>
    Error_Handler();
 80010ee:	f001 f8b9 	bl	8002264 <Error_Handler>
 80010f2:	e7d0      	b.n	8001096 <MX_ADC2_Init+0x56>
 80010f4:	f3af 8000 	nop.w
 80010f8:	00000000 	.word	0x00000000
 80010fc:	00000001 	.word	0x00000001
 8001100:	20000368 	.word	0x20000368
 8001104:	40012100 	.word	0x40012100
 8001108:	0f000001 	.word	0x0f000001
 800110c:	00000000 	.word	0x00000000

08001110 <MX_ADC3_Init>:

void MX_ADC3_Init(void)
{
 8001110:	b500      	push	{lr}

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001112:	482f      	ldr	r0, [pc, #188]	@ (80011d0 <MX_ADC3_Init+0xc0>)
 8001114:	492f      	ldr	r1, [pc, #188]	@ (80011d4 <MX_ADC3_Init+0xc4>)
 8001116:	6001      	str	r1, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ENABLE;
 8001118:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	2300      	movs	r3, #0
{
 800111c:	b085      	sub	sp, #20
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  hadc3.Init.ScanConvMode = ENABLE;
 8001122:	6102      	str	r2, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 4;
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001124:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001128:	4a2b      	ldr	r2, [pc, #172]	@ (80011d8 <MX_ADC3_Init+0xc8>)
  hadc3.Init.ContinuousConvMode = DISABLE;
 800112a:	7603      	strb	r3, [r0, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112c:	e9cd 3300 	strd	r3, r3, [sp]
 8001130:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001134:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001138:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113c:	60c3      	str	r3, [r0, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800113e:	6143      	str	r3, [r0, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	2300      	movs	r3, #0
 8001142:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  hadc3.Init.NbrOfConversion = 4;
 8001146:	2304      	movs	r3, #4
 8001148:	61c3      	str	r3, [r0, #28]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800114a:	f002 f851 	bl	80031f0 <HAL_ADC_Init>
 800114e:	bb40      	cbnz	r0, 80011a2 <MX_ADC3_Init+0x92>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001150:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 80011c8 <MX_ADC3_Init+0xb8>
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001154:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001156:	481e      	ldr	r0, [pc, #120]	@ (80011d0 <MX_ADC3_Init+0xc0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001158:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800115a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_10;
 800115c:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001160:	f002 fa7e 	bl	8003660 <HAL_ADC_ConfigChannel>
 8001164:	bb58      	cbnz	r0, 80011be <MX_ADC3_Init+0xae>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001166:	220b      	movs	r2, #11
 8001168:	2302      	movs	r3, #2
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800116a:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <MX_ADC3_Init+0xc0>)
 800116c:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_11;
 800116e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001172:	f002 fa75 	bl	8003660 <HAL_ADC_ConfigChannel>
 8001176:	b9f8      	cbnz	r0, 80011b8 <MX_ADC3_Init+0xa8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001178:	220c      	movs	r2, #12
 800117a:	2303      	movs	r3, #3
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800117c:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <MX_ADC3_Init+0xc0>)
 800117e:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_12;
 8001180:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001184:	f002 fa6c 	bl	8003660 <HAL_ADC_ConfigChannel>
 8001188:	b998      	cbnz	r0, 80011b2 <MX_ADC3_Init+0xa2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800118a:	220d      	movs	r2, #13
 800118c:	2304      	movs	r3, #4
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800118e:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <MX_ADC3_Init+0xc0>)
 8001190:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_13;
 8001192:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001196:	f002 fa63 	bl	8003660 <HAL_ADC_ConfigChannel>
 800119a:	b928      	cbnz	r0, 80011a8 <MX_ADC3_Init+0x98>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
  

}
 800119c:	b005      	add	sp, #20
 800119e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011a2:	f001 f85f 	bl	8002264 <Error_Handler>
 80011a6:	e7d3      	b.n	8001150 <MX_ADC3_Init+0x40>
    Error_Handler();
 80011a8:	f001 f85c 	bl	8002264 <Error_Handler>
}
 80011ac:	b005      	add	sp, #20
 80011ae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011b2:	f001 f857 	bl	8002264 <Error_Handler>
 80011b6:	e7e8      	b.n	800118a <MX_ADC3_Init+0x7a>
    Error_Handler();
 80011b8:	f001 f854 	bl	8002264 <Error_Handler>
 80011bc:	e7dc      	b.n	8001178 <MX_ADC3_Init+0x68>
    Error_Handler();
 80011be:	f001 f851 	bl	8002264 <Error_Handler>
 80011c2:	e7d0      	b.n	8001166 <MX_ADC3_Init+0x56>
 80011c4:	f3af 8000 	nop.w
 80011c8:	0000000a 	.word	0x0000000a
 80011cc:	00000001 	.word	0x00000001
 80011d0:	20000320 	.word	0x20000320
 80011d4:	40012200 	.word	0x40012200
 80011d8:	0f000001 	.word	0x0f000001

080011dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011dc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance == ADC1)
 80011de:	6803      	ldr	r3, [r0, #0]
 80011e0:	4a5a      	ldr	r2, [pc, #360]	@ (800134c <HAL_ADC_MspInit+0x170>)
{
 80011e2:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	2400      	movs	r4, #0
  if(adcHandle->Instance == ADC1)
 80011e6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80011ec:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80011f0:	940a      	str	r4, [sp, #40]	@ 0x28
  if(adcHandle->Instance == ADC1)
 80011f2:	d008      	beq.n	8001206 <HAL_ADC_MspInit+0x2a>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  }
  else if(adcHandle->Instance==ADC2)
 80011f4:	4a56      	ldr	r2, [pc, #344]	@ (8001350 <HAL_ADC_MspInit+0x174>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	4605      	mov	r5, r0
 80011fa:	d019      	beq.n	8001230 <HAL_ADC_MspInit+0x54>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80011fc:	4a55      	ldr	r2, [pc, #340]	@ (8001354 <HAL_ADC_MspInit+0x178>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d05a      	beq.n	80012b8 <HAL_ADC_MspInit+0xdc>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001202:	b00c      	add	sp, #48	@ 0x30
 8001204:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001206:	4b54      	ldr	r3, [pc, #336]	@ (8001358 <HAL_ADC_MspInit+0x17c>)
 8001208:	9401      	str	r4, [sp, #4]
 800120a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800120c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001210:	6459      	str	r1, [r3, #68]	@ 0x44
 8001212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001218:	4622      	mov	r2, r4
 800121a:	4621      	mov	r1, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800121c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800121e:	2012      	movs	r0, #18
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001220:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001222:	f002 fe27 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001226:	2012      	movs	r0, #18
 8001228:	f002 fe60 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 800122c:	b00c      	add	sp, #48	@ 0x30
 800122e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001230:	4b49      	ldr	r3, [pc, #292]	@ (8001358 <HAL_ADC_MspInit+0x17c>)
 8001232:	9402      	str	r4, [sp, #8]
 8001234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	4849      	ldr	r0, [pc, #292]	@ (800135c <HAL_ADC_MspInit+0x180>)
    hdma_adc2.Instance = DMA2_Stream2;
 8001238:	4e49      	ldr	r6, [pc, #292]	@ (8001360 <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800123a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800123e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001242:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001246:	9202      	str	r2, [sp, #8]
 8001248:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	9403      	str	r4, [sp, #12]
 800124c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	631a      	str	r2, [r3, #48]	@ 0x30
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 800125c:	220f      	movs	r2, #15
 800125e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 8001262:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f003 f872 	bl	8004350 <HAL_GPIO_Init>
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800126c:	4a3d      	ldr	r2, [pc, #244]	@ (8001364 <HAL_ADC_MspInit+0x188>)
 800126e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001272:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800127a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127e:	e9c6 2304 	strd	r2, r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001282:	4630      	mov	r0, r6
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001284:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001288:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800128c:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001290:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001294:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001298:	f002 fe50 	bl	8003f3c <HAL_DMA_Init>
 800129c:	2800      	cmp	r0, #0
 800129e:	d14e      	bne.n	800133e <HAL_ADC_MspInit+0x162>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80012a2:	63ae      	str	r6, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a4:	4611      	mov	r1, r2
 80012a6:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80012a8:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012aa:	f002 fde3 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012ae:	2012      	movs	r0, #18
 80012b0:	f002 fe1c 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 80012b4:	b00c      	add	sp, #48	@ 0x30
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <HAL_ADC_MspInit+0x17c>)
 80012ba:	9404      	str	r4, [sp, #16]
 80012bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	482a      	ldr	r0, [pc, #168]	@ (8001368 <HAL_ADC_MspInit+0x18c>)
    hdma_adc3.Instance = DMA2_Stream2;
 80012c0:	4e2a      	ldr	r6, [pc, #168]	@ (800136c <HAL_ADC_MspInit+0x190>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80012c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ca:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80012ce:	9204      	str	r2, [sp, #16]
 80012d0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	9405      	str	r4, [sp, #20]
 80012d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012d6:	f042 0204 	orr.w	r2, r2, #4
 80012da:	631a      	str	r2, [r3, #48]	@ 0x30
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 80012e4:	220f      	movs	r2, #15
 80012e6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 80012ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f003 f82e 	bl	8004350 <HAL_GPIO_Init>
    hdma_adc3.Init.Channel = DMA_CHANNEL_1;
 80012f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001364 <HAL_ADC_MspInit+0x188>)
 80012f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012fa:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	e9c6 2304 	strd	r2, r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800130a:	4630      	mov	r0, r6
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800130c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001310:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001314:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001318:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131c:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001320:	f002 fe0c 	bl	8003f3c <HAL_DMA_Init>
 8001324:	b970      	cbnz	r0, 8001344 <HAL_ADC_MspInit+0x168>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001328:	63ae      	str	r6, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800132a:	4611      	mov	r1, r2
 800132c:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800132e:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001330:	f002 fda0 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001334:	2012      	movs	r0, #18
 8001336:	f002 fdd9 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 800133a:	b00c      	add	sp, #48	@ 0x30
 800133c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800133e:	f000 ff91 	bl	8002264 <Error_Handler>
 8001342:	e7ad      	b.n	80012a0 <HAL_ADC_MspInit+0xc4>
      Error_Handler();
 8001344:	f000 ff8e 	bl	8002264 <Error_Handler>
 8001348:	e7ed      	b.n	8001326 <HAL_ADC_MspInit+0x14a>
 800134a:	bf00      	nop
 800134c:	40012000 	.word	0x40012000
 8001350:	40012100 	.word	0x40012100
 8001354:	40012200 	.word	0x40012200
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000
 8001360:	2000025c 	.word	0x2000025c
 8001364:	40026440 	.word	0x40026440
 8001368:	40020800 	.word	0x40020800
 800136c:	200001fc 	.word	0x200001fc

08001370 <HAL_CAN_RxFifo0MsgPendingCallback>:
#ifdef ENABLE_MONITOR_CAN
extern CAN_RxHeaderTypeDef can_rx_header;
extern uint8_t can_rx_data[8];

/* CAN message received */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001370:	b570      	push	{r4, r5, r6, lr}
  int ret = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data);
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001374:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001376:	2100      	movs	r1, #0
 8001378:	f002 fb5a 	bl	8003a30 <HAL_CAN_GetRxMessage>

  if (ret != HAL_OK) {
 800137c:	b9c0      	cbnz	r0, 80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 800137e:	4e17      	ldr	r6, [pc, #92]	@ (80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001380:	4d17      	ldr	r5, [pc, #92]	@ (80013e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)

    syslog.value[0] = (uint8_t)ret;
    SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
  }

  if (sys_state.CAN != true) {
 8001382:	78f3      	ldrb	r3, [r6, #3]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d006      	beq.n	8001396 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
    sys_state.CAN = true;
 8001388:	2201      	movs	r2, #1
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_SET);
 800138a:	4816      	ldr	r0, [pc, #88]	@ (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
    sys_state.CAN = true;
 800138c:	70f2      	strb	r2, [r6, #3]
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_SET);
 800138e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001392:	f003 f901 	bl	8004598 <HAL_GPIO_WritePin>
  }

  *(uint64_t *)syslog.value = *(uint64_t *)can_rx_data;
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
  SYS_LOG(LOG_INFO, CAN, can_rx_header.StdId);
 8001398:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
  *(uint64_t *)syslog.value = *(uint64_t *)can_rx_data;
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	60a9      	str	r1, [r5, #8]
 80013a0:	60eb      	str	r3, [r5, #12]
  SYS_LOG(LOG_INFO, CAN, can_rx_header.StdId);
 80013a2:	6812      	ldr	r2, [r2, #0]
}
 80013a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_LOG(LOG_INFO, CAN, can_rx_header.StdId);
 80013a8:	2102      	movs	r1, #2
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 bb98 	b.w	8001ae0 <SYS_LOG>
    sys_state.CAN = false;
 80013b0:	4e0a      	ldr	r6, [pc, #40]	@ (80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
    syslog.value[0] = (uint8_t)ret;
 80013b2:	4d0b      	ldr	r5, [pc, #44]	@ (80013e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80013b4:	4604      	mov	r4, r0
    sys_state.CAN = false;
 80013b6:	2200      	movs	r2, #0
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 80013b8:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
    sys_state.CAN = false;
 80013ba:	70f2      	strb	r2, [r6, #3]
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 80013bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c0:	f003 f8ea 	bl	8004598 <HAL_GPIO_WritePin>
    SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2102      	movs	r1, #2
 80013c8:	4610      	mov	r0, r2
    syslog.value[0] = (uint8_t)ret;
 80013ca:	722c      	strb	r4, [r5, #8]
    SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 80013cc:	f000 fb88 	bl	8001ae0 <SYS_LOG>
 80013d0:	e7d7      	b.n	8001382 <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
 80013d2:	bf00      	nop
 80013d4:	200005d8 	.word	0x200005d8
 80013d8:	200005e0 	.word	0x200005e0
 80013dc:	20008658 	.word	0x20008658
 80013e0:	2000865c 	.word	0x2000865c
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_CAN_ErrorCallback>:

/* CAN error occured */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
  sys_state.CAN = false;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <HAL_CAN_ErrorCallback+0x34>)
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80013ea:	b510      	push	{r4, lr}
  sys_state.CAN = false;
 80013ec:	2200      	movs	r2, #0
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80013ee:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 80013f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013f4:	480a      	ldr	r0, [pc, #40]	@ (8001420 <HAL_CAN_ErrorCallback+0x38>)
  sys_state.CAN = false;
 80013f6:	70da      	strb	r2, [r3, #3]
  HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 80013f8:	f003 f8ce 	bl	8004598 <HAL_GPIO_WritePin>

  DEBUG_MSG("[%8lu] [ERR] CAN ERROR occured\r\n", HAL_GetTick());


  *(uint32_t *)syslog.value = HAL_CAN_GetError(hcan);
 80013fc:	4620      	mov	r0, r4
 80013fe:	f002 fd15 	bl	8003e2c <HAL_CAN_GetError>
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_CAN_ErrorCallback+0x3c>)
  SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 8001404:	2201      	movs	r2, #1
  *(uint32_t *)syslog.value = HAL_CAN_GetError(hcan);
 8001406:	6098      	str	r0, [r3, #8]
  SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 8001408:	2102      	movs	r1, #2
 800140a:	4610      	mov	r0, r2
 800140c:	f000 fb68 	bl	8001ae0 <SYS_LOG>

  HAL_CAN_ResetError(hcan);
 8001410:	4620      	mov	r0, r4
}
 8001412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_CAN_ResetError(hcan);
 8001416:	f002 bd0b 	b.w	8003e30 <HAL_CAN_ResetError>
 800141a:	bf00      	nop
 800141c:	20008658 	.word	0x20008658
 8001420:	40021000 	.word	0x40021000
 8001424:	2000865c 	.word	0x2000865c

08001428 <HAL_CAN_RxFifo0FullCallback>:

/* CAN RX FIFO full */
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
  sys_state.CAN = false;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_CAN_RxFifo0FullCallback+0x34>)
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 800142a:	b510      	push	{r4, lr}
  sys_state.CAN = false;
 800142c:	2200      	movs	r2, #0
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 800142e:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 8001430:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001434:	480a      	ldr	r0, [pc, #40]	@ (8001460 <HAL_CAN_RxFifo0FullCallback+0x38>)
  sys_state.CAN = false;
 8001436:	70da      	strb	r2, [r3, #3]
  HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 8001438:	f003 f8ae 	bl	8004598 <HAL_GPIO_WritePin>

  DEBUG_MSG("[%8lu] [ERR] CAN RX FIFO full\r\n", HAL_GetTick());



  *(uint32_t *)syslog.value = HAL_CAN_GetState(hcan);
 800143c:	4620      	mov	r0, r4
 800143e:	f002 fce1 	bl	8003e04 <HAL_CAN_GetState>
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_CAN_RxFifo0FullCallback+0x3c>)
  SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 8001444:	2201      	movs	r2, #1
  *(uint32_t *)syslog.value = HAL_CAN_GetState(hcan);
 8001446:	6098      	str	r0, [r3, #8]
  SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 8001448:	2102      	movs	r1, #2
 800144a:	4610      	mov	r0, r2
 800144c:	f000 fb48 	bl	8001ae0 <SYS_LOG>

  HAL_CAN_ResetError(hcan);
 8001450:	4620      	mov	r0, r4
}
 8001452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_CAN_ResetError(hcan);
 8001456:	f002 bceb 	b.w	8003e30 <HAL_CAN_ResetError>
 800145a:	bf00      	nop
 800145c:	20008658 	.word	0x20008658
 8001460:	40021000 	.word	0x40021000
 8001464:	2000865c 	.word	0x2000865c

08001468 <CAN_SETUP>:

int CAN_SETUP(void) {
 8001468:	b510      	push	{r4, lr}

  CAN_FilterTypeDef CAN_FILTER;
  CAN_FILTER.FilterBank = 0;
  CAN_FILTER.FilterMode = CAN_FILTERMODE_IDMASK;
  CAN_FILTER.FilterScale = CAN_FILTERSCALE_32BIT;
  CAN_FILTER.FilterIdHigh = 0x0;
 800146a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80014f8 <CAN_SETUP+0x90>
int CAN_SETUP(void) {
 800146e:	b08a      	sub	sp, #40	@ 0x28
  CAN_FILTER.FilterIdHigh = 0x0;
 8001470:	2200      	movs	r2, #0
 8001472:	2300      	movs	r3, #0
  CAN_FILTER.FilterMaskIdHigh = 0x0;
  CAN_FILTER.FilterIdLow = 0x0;
  CAN_FILTER.FilterMaskIdLow = 0x0;
  CAN_FILTER.FilterFIFOAssignment = CAN_RX_FIFO0;
  CAN_FILTER.FilterActivation = ENABLE;
 8001474:	2401      	movs	r4, #1

  int ret = HAL_CAN_ConfigFilter(&hcan1, &CAN_FILTER);
 8001476:	4822      	ldr	r0, [pc, #136]	@ (8001500 <CAN_SETUP+0x98>)
  CAN_FILTER.FilterActivation = ENABLE;
 8001478:	9408      	str	r4, [sp, #32]
  int ret = HAL_CAN_ConfigFilter(&hcan1, &CAN_FILTER);
 800147a:	4669      	mov	r1, sp
  CAN_FILTER.FilterIdHigh = 0x0;
 800147c:	e9cd 2300 	strd	r2, r3, [sp]
 8001480:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001484:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001488:	ed8d 7b06 	vstr	d7, [sp, #24]
  int ret = HAL_CAN_ConfigFilter(&hcan1, &CAN_FILTER);
 800148c:	f002 fa12 	bl	80038b4 <HAL_CAN_ConfigFilter>
    if (ret != HAL_OK) {
 8001490:	b110      	cbz	r0, 8001498 <CAN_SETUP+0x30>
      return 1;
 8001492:	4620      	mov	r0, r4
    if (ret != HAL_OK) {
      return 7;
    }

  return SYS_OK;
}
 8001494:	b00a      	add	sp, #40	@ 0x28
 8001496:	bd10      	pop	{r4, pc}
    ret = HAL_CAN_Start(&hcan1);
 8001498:	4819      	ldr	r0, [pc, #100]	@ (8001500 <CAN_SETUP+0x98>)
 800149a:	f002 fa9b 	bl	80039d4 <HAL_CAN_Start>
    if (ret != HAL_OK) {
 800149e:	bb00      	cbnz	r0, 80014e2 <CAN_SETUP+0x7a>
    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80014a0:	4817      	ldr	r0, [pc, #92]	@ (8001500 <CAN_SETUP+0x98>)
 80014a2:	2102      	movs	r1, #2
 80014a4:	f002 fb42 	bl	8003b2c <HAL_CAN_ActivateNotification>
    if (ret != HAL_OK) {
 80014a8:	b9f0      	cbnz	r0, 80014e8 <CAN_SETUP+0x80>
    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL);
 80014aa:	4815      	ldr	r0, [pc, #84]	@ (8001500 <CAN_SETUP+0x98>)
 80014ac:	2104      	movs	r1, #4
 80014ae:	f002 fb3d 	bl	8003b2c <HAL_CAN_ActivateNotification>
    if (ret != HAL_OK) {
 80014b2:	b9a0      	cbnz	r0, 80014de <CAN_SETUP+0x76>
    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_OVERRUN);
 80014b4:	4812      	ldr	r0, [pc, #72]	@ (8001500 <CAN_SETUP+0x98>)
 80014b6:	2108      	movs	r1, #8
 80014b8:	f002 fb38 	bl	8003b2c <HAL_CAN_ActivateNotification>
    if (ret != HAL_OK) {
 80014bc:	b9b8      	cbnz	r0, 80014ee <CAN_SETUP+0x86>
    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF);
 80014be:	4810      	ldr	r0, [pc, #64]	@ (8001500 <CAN_SETUP+0x98>)
 80014c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014c4:	f002 fb32 	bl	8003b2c <HAL_CAN_ActivateNotification>
    if (ret != HAL_OK) {
 80014c8:	b998      	cbnz	r0, 80014f2 <CAN_SETUP+0x8a>
    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR);
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <CAN_SETUP+0x98>)
 80014cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014d0:	f002 fb2c 	bl	8003b2c <HAL_CAN_ActivateNotification>
  return SYS_OK;
 80014d4:	2800      	cmp	r0, #0
 80014d6:	bf14      	ite	ne
 80014d8:	2007      	movne	r0, #7
 80014da:	2000      	moveq	r0, #0
 80014dc:	e7da      	b.n	8001494 <CAN_SETUP+0x2c>
      return 4;
 80014de:	2004      	movs	r0, #4
 80014e0:	e7d8      	b.n	8001494 <CAN_SETUP+0x2c>
      return 2;
 80014e2:	2002      	movs	r0, #2
}
 80014e4:	b00a      	add	sp, #40	@ 0x28
 80014e6:	bd10      	pop	{r4, pc}
      return 3;
 80014e8:	2003      	movs	r0, #3
}
 80014ea:	b00a      	add	sp, #40	@ 0x28
 80014ec:	bd10      	pop	{r4, pc}
      return 5;
 80014ee:	2005      	movs	r0, #5
 80014f0:	e7d0      	b.n	8001494 <CAN_SETUP+0x2c>
      return 6;
 80014f2:	2006      	movs	r0, #6
 80014f4:	e7ce      	b.n	8001494 <CAN_SETUP+0x2c>
 80014f6:	bf00      	nop
 80014f8:	00000000 	.word	0x00000000
 80014fc:	00000001 	.word	0x00000001
 8001500:	200003f8 	.word	0x200003f8

08001504 <MX_CAN1_Init>:
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001504:	480d      	ldr	r0, [pc, #52]	@ (800153c <MX_CAN1_Init+0x38>)
 8001506:	490e      	ldr	r1, [pc, #56]	@ (8001540 <MX_CAN1_Init+0x3c>)
  hcan1.Init.Prescaler = 5;
 8001508:	2205      	movs	r2, #5
{
 800150a:	b510      	push	{r4, lr}
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800150c:	2300      	movs	r3, #0
  hcan1.Init.Prescaler = 5;
 800150e:	e9c0 1200 	strd	r1, r2, [r0]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001512:	f44f 2440 	mov.w	r4, #786432	@ 0xc0000
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001516:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800151a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800151e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001522:	e9c0 4104 	strd	r4, r1, [r0, #16]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001526:	6182      	str	r2, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = ENABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001528:	8383      	strh	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800152a:	f002 f943 	bl	80037b4 <HAL_CAN_Init>
 800152e:	b900      	cbnz	r0, 8001532 <MX_CAN1_Init+0x2e>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001530:	bd10      	pop	{r4, pc}
 8001532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001536:	f000 be95 	b.w	8002264 <Error_Handler>
 800153a:	bf00      	nop
 800153c:	200003f8 	.word	0x200003f8
 8001540:	40006400 	.word	0x40006400

08001544 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001544:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <HAL_CAN_MspInit+0xa4>)
 8001548:	6802      	ldr	r2, [r0, #0]
{
 800154a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN1)
 800154e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001554:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001558:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN1)
 800155a:	d001      	beq.n	8001560 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800155c:	b009      	add	sp, #36	@ 0x24
 800155e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001560:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 8001564:	9400      	str	r4, [sp, #0]
 8001566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001568:	4820      	ldr	r0, [pc, #128]	@ (80015ec <HAL_CAN_MspInit+0xa8>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800156a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800156e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001570:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001572:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8001576:	9200      	str	r2, [sp, #0]
 8001578:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	9401      	str	r4, [sp, #4]
 800157c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800157e:	f042 0208 	orr.w	r2, r2, #8
 8001582:	631a      	str	r2, [r3, #48]	@ 0x30
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800158c:	2203      	movs	r2, #3
 800158e:	2302      	movs	r3, #2
 8001590:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001594:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2309      	movs	r3, #9
 8001598:	2203      	movs	r2, #3
 800159a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159e:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	f002 fed6 	bl	8004350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80015a4:	4622      	mov	r2, r4
 80015a6:	4621      	mov	r1, r4
 80015a8:	2013      	movs	r0, #19
 80015aa:	f002 fc63 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80015ae:	2013      	movs	r0, #19
 80015b0:	f002 fc9c 	bl	8003eec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80015b4:	4622      	mov	r2, r4
 80015b6:	4621      	mov	r1, r4
 80015b8:	2014      	movs	r0, #20
 80015ba:	f002 fc5b 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015be:	2014      	movs	r0, #20
 80015c0:	f002 fc94 	bl	8003eec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80015c4:	4622      	mov	r2, r4
 80015c6:	4621      	mov	r1, r4
 80015c8:	2015      	movs	r0, #21
 80015ca:	f002 fc53 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80015ce:	2015      	movs	r0, #21
 80015d0:	f002 fc8c 	bl	8003eec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80015d4:	4622      	mov	r2, r4
 80015d6:	4621      	mov	r1, r4
 80015d8:	2016      	movs	r0, #22
 80015da:	f002 fc4b 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80015de:	2016      	movs	r0, #22
 80015e0:	f002 fc84 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 80015e4:	b009      	add	sp, #36	@ 0x24
 80015e6:	bd30      	pop	{r4, r5, pc}
 80015e8:	40006400 	.word	0x40006400
 80015ec:	40020c00 	.word	0x40020c00

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b510      	push	{r4, lr}
 80015f2:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f4:	2400      	movs	r4, #0
 80015f6:	4b30      	ldr	r3, [pc, #192]	@ (80016b8 <MX_DMA_Init+0xc8>)
 80015f8:	9400      	str	r4, [sp, #0]
 80015fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015fc:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8001600:	6319      	str	r1, [r3, #48]	@ 0x30
 8001602:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001604:	f400 1000 	and.w	r0, r0, #2097152	@ 0x200000
 8001608:	9000      	str	r0, [sp, #0]
 800160a:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800160c:	9401      	str	r4, [sp, #4]
 800160e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001610:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001614:	6318      	str	r0, [r3, #48]	@ 0x30
 8001616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800161c:	4622      	mov	r2, r4
 800161e:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001620:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001622:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001624:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001626:	f002 fc25 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800162a:	200b      	movs	r0, #11
 800162c:	f002 fc5e 	bl	8003eec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001630:	4622      	mov	r2, r4
 8001632:	4621      	mov	r1, r4
 8001634:	200c      	movs	r0, #12
 8001636:	f002 fc1d 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800163a:	200c      	movs	r0, #12
 800163c:	f002 fc56 	bl	8003eec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001640:	4622      	mov	r2, r4
 8001642:	4621      	mov	r1, r4
 8001644:	200d      	movs	r0, #13
 8001646:	f002 fc15 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800164a:	200d      	movs	r0, #13
 800164c:	f002 fc4e 	bl	8003eec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001650:	4622      	mov	r2, r4
 8001652:	4621      	mov	r1, r4
 8001654:	200e      	movs	r0, #14
 8001656:	f002 fc0d 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800165a:	200e      	movs	r0, #14
 800165c:	f002 fc46 	bl	8003eec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001660:	4622      	mov	r2, r4
 8001662:	4621      	mov	r1, r4
 8001664:	200f      	movs	r0, #15
 8001666:	f002 fc05 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800166a:	200f      	movs	r0, #15
 800166c:	f002 fc3e 	bl	8003eec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001670:	4622      	mov	r2, r4
 8001672:	4621      	mov	r1, r4
 8001674:	2038      	movs	r0, #56	@ 0x38
 8001676:	f002 fbfd 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800167a:	2038      	movs	r0, #56	@ 0x38
 800167c:	f002 fc36 	bl	8003eec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001680:	4622      	mov	r2, r4
 8001682:	4621      	mov	r1, r4
 8001684:	203a      	movs	r0, #58	@ 0x3a
 8001686:	f002 fbf5 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800168a:	203a      	movs	r0, #58	@ 0x3a
 800168c:	f002 fc2e 	bl	8003eec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001690:	4622      	mov	r2, r4
 8001692:	4621      	mov	r1, r4
 8001694:	203b      	movs	r0, #59	@ 0x3b
 8001696:	f002 fbed 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800169a:	203b      	movs	r0, #59	@ 0x3b
 800169c:	f002 fc26 	bl	8003eec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80016a0:	4622      	mov	r2, r4
 80016a2:	4621      	mov	r1, r4
 80016a4:	2045      	movs	r0, #69	@ 0x45
 80016a6:	f002 fbe5 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016aa:	2045      	movs	r0, #69	@ 0x45

}
 80016ac:	b002      	add	sp, #8
 80016ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016b2:	f002 bc1b 	b.w	8003eec <HAL_NVIC_EnableIRQ>
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <DIGITAL_SETUP>:
#endif

#ifdef ENABLE_MONITOR_DIGITAL
int DIGITAL_SETUP(void) {
  return SYS_OK;
}
 80016bc:	2000      	movs	r0, #0
 80016be:	4770      	bx	lr

080016c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016c0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	2400      	movs	r4, #0
{
 80016c4:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80016ca:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <MX_GPIO_Init+0xec>)
 80016d0:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	940a      	str	r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30

  /*Configure GPIO pin Output Level */
  // HAL_GPIO_WritePin(GPIOA, LED_ONBOARD_0_Pin|LED_ONBOARD_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin|LED_ERR_CAN_Pin|LED_HEARTBEAT_Pin
 80016d6:	4d36      	ldr	r5, [pc, #216]	@ (80017b0 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	f042 0204 	orr.w	r2, r2, #4
 80016dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80016de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016e0:	f002 0204 	and.w	r2, r2, #4
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e8:	9401      	str	r4, [sp, #4]
 80016ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80016f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016f4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80016f8:	9201      	str	r2, [sp, #4]
 80016fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	9402      	str	r4, [sp, #8]
 80016fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	631a      	str	r2, [r3, #48]	@ 0x30
 8001706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001708:	f002 0201 	and.w	r2, r2, #1
 800170c:	9202      	str	r2, [sp, #8]
 800170e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001710:	9403      	str	r4, [sp, #12]
 8001712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001714:	f042 0210 	orr.w	r2, r2, #16
 8001718:	631a      	str	r2, [r3, #48]	@ 0x30
 800171a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800171c:	f002 0210 	and.w	r2, r2, #16
 8001720:	9203      	str	r2, [sp, #12]
 8001722:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	9404      	str	r4, [sp, #16]
 8001726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001728:	f042 0202 	orr.w	r2, r2, #2
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
 800172e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001730:	f002 0202 	and.w	r2, r2, #2
 8001734:	9204      	str	r2, [sp, #16]
 8001736:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001738:	9405      	str	r4, [sp, #20]
 800173a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800173c:	f042 0208 	orr.w	r2, r2, #8
 8001740:	631a      	str	r2, [r3, #48]	@ 0x30
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin|LED_ERR_CAN_Pin|LED_HEARTBEAT_Pin
 800174a:	4622      	mov	r2, r4
 800174c:	4628      	mov	r0, r5
 800174e:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001752:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin|LED_ERR_CAN_Pin|LED_HEARTBEAT_Pin
 8001754:	f002 ff20 	bl	8004598 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_ERR_SYS_Pin|LED_ERR_CAN_Pin|LED_HEARTBEAT_Pin
                          |LED_SD_Pin|LED_CAN_Pin|LED_TELEMETRY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001758:	a906      	add	r1, sp, #24
 800175a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	f44f 427c 	mov.w	r2, #64512	@ 0xfc00
 8001760:	2301      	movs	r3, #1
 8001762:	e9cd 2306 	strd	r2, r3, [sp, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001766:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800176c:	f002 fdf0 	bl	8004350 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 8001770:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001774:	2300      	movs	r3, #0
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001776:	a906      	add	r1, sp, #24
 8001778:	480e      	ldr	r0, [pc, #56]	@ (80017b4 <MX_GPIO_Init+0xf4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800177a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 800177c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001780:	f002 fde6 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|HV_ACTIVE_Pin|BMS_FAULT_Pin|IMD_FAULT_Pin
 8001784:	2300      	movs	r3, #0
 8001786:	f44f 42f8 	mov.w	r2, #31744	@ 0x7c00
                          |BSPD_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178a:	a906      	add	r1, sp, #24
 800178c:	480a      	ldr	r0, [pc, #40]	@ (80017b8 <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800178e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|HV_ACTIVE_Pin|BMS_FAULT_Pin|IMD_FAULT_Pin
 8001790:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001794:	f002 fddc 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001798:	4622      	mov	r2, r4
 800179a:	4621      	mov	r1, r4
 800179c:	2017      	movs	r0, #23
 800179e:	f002 fb69 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017a2:	2017      	movs	r0, #23
 80017a4:	f002 fba2 	bl	8003eec <HAL_NVIC_EnableIRQ>

}
 80017a8:	b00d      	add	sp, #52	@ 0x34
 80017aa:	bd30      	pop	{r4, r5, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020c00 	.word	0x40020c00

080017bc <HAL_I2C_MasterTxCpltCallback>:
#endif

// ESP32 TELEMETRY tx interrupt callback
#ifdef ENABLE_TELEMETRY
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
  if (hi2c->Instance == I2C1) {
 80017bc:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 80017be:	6802      	ldr	r2, [r0, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d000      	beq.n	80017c6 <HAL_I2C_MasterTxCpltCallback+0xa>
 80017c4:	4770      	bx	lr
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
 80017c6:	480d      	ldr	r0, [pc, #52]	@ (80017fc <HAL_I2C_MasterTxCpltCallback+0x40>)
    if (ring_buffer_is_empty(&TELEMETRY_BUFFER)) {
 80017c8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d105      	bne.n	80017dc <HAL_I2C_MasterTxCpltCallback+0x20>
      // finish transmission
      telemetry_flag &= ~(1 << TELEMETRY_BUFFER_REMAIN);
      telemetry_flag &= ~(1 << TELEMETRY_BUFFER_TRANSMIT);
 80017d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <HAL_I2C_MasterTxCpltCallback+0x44>)
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	f023 0303 	bic.w	r3, r3, #3
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4770      	bx	lr
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80017dc:	b510      	push	{r4, lr}
    } else {//!!!!!!!!!!
      static uint8_t payload[sizeof(LOG)];
      ring_buffer_dequeue_arr(&TELEMETRY_BUFFER, (char *)payload, sizeof(LOG));
 80017de:	4909      	ldr	r1, [pc, #36]	@ (8001804 <HAL_I2C_MasterTxCpltCallback+0x48>)
 80017e0:	2210      	movs	r2, #16
 80017e2:	f000 fd75 	bl	80022d0 <ring_buffer_dequeue_arr>
      HAL_I2C_Master_Transmit_IT(I2C_TELEMETRY, ESP_I2C_ADDR, payload, sizeof(LOG));
    }
  }

  return;
}
 80017e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2C_Master_Transmit_IT(I2C_TELEMETRY, ESP_I2C_ADDR, payload, sizeof(LOG));
 80017ea:	4a06      	ldr	r2, [pc, #24]	@ (8001804 <HAL_I2C_MasterTxCpltCallback+0x48>)
 80017ec:	4806      	ldr	r0, [pc, #24]	@ (8001808 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 80017ee:	2310      	movs	r3, #16
 80017f0:	2100      	movs	r1, #0
 80017f2:	f003 b95f 	b.w	8004ab4 <HAL_I2C_Master_Transmit_IT>
 80017f6:	bf00      	nop
 80017f8:	40005400 	.word	0x40005400
 80017fc:	200045fc 	.word	0x200045fc
 8001800:	20004610 	.word	0x20004610
 8001804:	20000430 	.word	0x20000430
 8001808:	20000498 	.word	0x20000498

0800180c <HAL_I2C_MasterRxCpltCallback>:

// ESP32 RTC fix receive interrupt callback
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
  if (hi2c->Instance == I2C1) {
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800180e:	6802      	ldr	r2, [r0, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d000      	beq.n	8001816 <HAL_I2C_MasterRxCpltCallback+0xa>
    handshake_flag |= (1 << RTC_FIXED);
    RTC_FIX(RTC_ESP);
  }
}
 8001814:	4770      	bx	lr
    handshake_flag |= (1 << RTC_FIXED);
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <HAL_I2C_MasterRxCpltCallback+0x20>)
 8001818:	6813      	ldr	r3, [r2, #0]
    RTC_FIX(RTC_ESP);
 800181a:	2001      	movs	r0, #1
    handshake_flag |= (1 << RTC_FIXED);
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6013      	str	r3, [r2, #0]
    RTC_FIX(RTC_ESP);
 8001822:	f000 bd77 	b.w	8002314 <RTC_FIX>
 8001826:	bf00      	nop
 8001828:	40005400 	.word	0x40005400
 800182c:	2000460c 	.word	0x2000460c

08001830 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
  
}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop

08001834 <HAL_I2C_MemRxCpltCallback>:
#endif

/* ADXL345 accelerometer memory read */
#ifdef ENABLE_MONITOR_ACCELEROMETER
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
  accelerometer_flag = true;
 8001834:	4b01      	ldr	r3, [pc, #4]	@ (800183c <HAL_I2C_MemRxCpltCallback+0x8>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]
}
 800183a:	4770      	bx	lr
 800183c:	200005bc 	.word	0x200005bc

08001840 <TELEMETRY_SETUP>:

/****************************
 * ESP32 I2C interface
 ***************************/
#ifdef ENABLE_TELEMETRY
int TELEMETRY_SETUP(void) {
 8001840:	b500      	push	{lr}
  // initialize buffer
  ring_buffer_init(&TELEMETRY_BUFFER, (char *)TELEMETRY_BUFFER_ARR, sizeof(TELEMETRY_BUFFER_ARR));
 8001842:	4916      	ldr	r1, [pc, #88]	@ (800189c <TELEMETRY_SETUP+0x5c>)
 8001844:	4816      	ldr	r0, [pc, #88]	@ (80018a0 <TELEMETRY_SETUP+0x60>)
int TELEMETRY_SETUP(void) {
 8001846:	b083      	sub	sp, #12
  ring_buffer_init(&TELEMETRY_BUFFER, (char *)TELEMETRY_BUFFER_ARR, sizeof(TELEMETRY_BUFFER_ARR));
 8001848:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800184c:	f000 fd0c 	bl	8002268 <ring_buffer_init>

  HAL_Delay(1000);
 8001850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001854:	f001 fcba 	bl	80031cc <HAL_Delay>



  // handshake call
  int ret = HAL_I2C_IsDeviceReady(I2C_TELEMETRY, ESP_I2C_ADDR, 5, 500);
 8001858:	4812      	ldr	r0, [pc, #72]	@ (80018a4 <TELEMETRY_SETUP+0x64>)
 800185a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800185e:	2205      	movs	r2, #5
 8001860:	2100      	movs	r1, #0
 8001862:	f003 fa09 	bl	8004c78 <HAL_I2C_IsDeviceReady>

  if (ret != 0) {
 8001866:	b988      	cbnz	r0, 800188c <TELEMETRY_SETUP+0x4c>

    return ESP_I2C_NOT_READY;

  }

  ret = HAL_I2C_Master_Transmit(I2C_TELEMETRY, ESP_I2C_ADDR, (uint8_t *)"READY", 5, 500);
 8001868:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800186c:	4601      	mov	r1, r0
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <TELEMETRY_SETUP+0x68>)
 8001872:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <TELEMETRY_SETUP+0x64>)
 8001874:	2305      	movs	r3, #5
 8001876:	f003 f80d 	bl	8004894 <HAL_I2C_Master_Transmit>

  if (ret != 0) {
 800187a:	b958      	cbnz	r0, 8001894 <TELEMETRY_SETUP+0x54>
//       return ESP_HANDSHAKE_RUINED; // 3s timeout
//     }
//   }


  handshake_flag |= (1 << HANDSHAKE_FINISHED); //handshake_flag = 1
 800187c:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <TELEMETRY_SETUP+0x6c>)
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6013      	str	r3, [r2, #0]

  return SYS_OK;
}
 8001886:	b003      	add	sp, #12
 8001888:	f85d fb04 	ldr.w	pc, [sp], #4
    return ESP_I2C_NOT_READY;
 800188c:	2002      	movs	r0, #2
}
 800188e:	b003      	add	sp, #12
 8001890:	f85d fb04 	ldr.w	pc, [sp], #4
    return ESP_HANDSHAKE_ERR;
 8001894:	2003      	movs	r0, #3
}
 8001896:	b003      	add	sp, #12
 8001898:	f85d fb04 	ldr.w	pc, [sp], #4
 800189c:	200005fc 	.word	0x200005fc
 80018a0:	200045fc 	.word	0x200045fc
 80018a4:	20000498 	.word	0x20000498
 80018a8:	0800bf58 	.word	0x0800bf58
 80018ac:	2000460c 	.word	0x2000460c

080018b0 <TELEMETRY_TRANSMIT_LOG>:


void TELEMETRY_TRANSMIT_LOG(void) {
 80018b0:	b510      	push	{r4, lr}
  if (telemetry_flag & (1 << TELEMETRY_BUFFER_REMAIN) && !(telemetry_flag & (1 << TELEMETRY_BUFFER_TRANSMIT))) {
 80018b2:	4c0d      	ldr	r4, [pc, #52]	@ (80018e8 <TELEMETRY_TRANSMIT_LOG+0x38>)
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d000      	beq.n	80018c0 <TELEMETRY_TRANSMIT_LOG+0x10>
//
    } else {
      ring_buffer_queue_arr(&TELEMETRY_BUFFER, (char *)payload, sizeof(LOG));
    }
  }
}
 80018be:	bd10      	pop	{r4, pc}
    int ret = HAL_I2C_Master_Transmit_IT(I2C_TELEMETRY, ESP_I2C_ADDR, payload, sizeof(LOG));
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <TELEMETRY_TRANSMIT_LOG+0x3c>)
 80018c2:	480b      	ldr	r0, [pc, #44]	@ (80018f0 <TELEMETRY_TRANSMIT_LOG+0x40>)
 80018c4:	2310      	movs	r3, #16
 80018c6:	2100      	movs	r1, #0
 80018c8:	f003 f8f4 	bl	8004ab4 <HAL_I2C_Master_Transmit_IT>
    if (ret == HAL_OK) {
 80018cc:	b920      	cbnz	r0, 80018d8 <TELEMETRY_TRANSMIT_LOG+0x28>
      telemetry_flag |= 1 << TELEMETRY_BUFFER_TRANSMIT;
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6023      	str	r3, [r4, #0]
}
 80018d6:	bd10      	pop	{r4, pc}
 80018d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ring_buffer_queue_arr(&TELEMETRY_BUFFER, (char *)payload, sizeof(LOG));
 80018dc:	4903      	ldr	r1, [pc, #12]	@ (80018ec <TELEMETRY_TRANSMIT_LOG+0x3c>)
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <TELEMETRY_TRANSMIT_LOG+0x44>)
 80018e0:	2210      	movs	r2, #16
 80018e2:	f000 bcd7 	b.w	8002294 <ring_buffer_queue_arr>
 80018e6:	bf00      	nop
 80018e8:	20004610 	.word	0x20004610
 80018ec:	20000420 	.word	0x20000420
 80018f0:	20000498 	.word	0x20000498
 80018f4:	200045fc 	.word	0x200045fc

080018f8 <ACCELEROMETER_SETUP>:
int ACCELEROMETER_WRITE(uint8_t reg, uint8_t value) {
  uint8_t payload[2] = { reg, value };
  return HAL_I2C_Master_Transmit(&hi2c3, ACC_I2C_ADDR, payload, 2, 50);
}

int ACCELEROMETER_SETUP(void) {
 80018f8:	b570      	push	{r4, r5, r6, lr}
  return HAL_I2C_Master_Transmit(&hi2c3, ACC_I2C_ADDR, payload, 2, 50);
 80018fa:	4d15      	ldr	r5, [pc, #84]	@ (8001950 <ACCELEROMETER_SETUP+0x58>)
int ACCELEROMETER_SETUP(void) {
 80018fc:	b084      	sub	sp, #16
  return HAL_I2C_Master_Transmit(&hi2c3, ACC_I2C_ADDR, payload, 2, 50);
 80018fe:	2632      	movs	r6, #50	@ 0x32
  uint8_t payload[2] = { reg, value };
 8001900:	f240 1131 	movw	r1, #305	@ 0x131
  return HAL_I2C_Master_Transmit(&hi2c3, ACC_I2C_ADDR, payload, 2, 50);
 8001904:	aa03      	add	r2, sp, #12
  uint8_t payload[2] = { reg, value };
 8001906:	f8ad 100c 	strh.w	r1, [sp, #12]
  return HAL_I2C_Master_Transmit(&hi2c3, ACC_I2C_ADDR, payload, 2, 50);
 800190a:	2302      	movs	r3, #2
 800190c:	9600      	str	r6, [sp, #0]
 800190e:	21a6      	movs	r1, #166	@ 0xa6
 8001910:	4628      	mov	r0, r5
 8001912:	f002 ffbf 	bl	8004894 <HAL_I2C_Master_Transmit>
  uint8_t payload[2] = { reg, value };
 8001916:	232d      	movs	r3, #45	@ 0x2d
 8001918:	f8ad 300c 	strh.w	r3, [sp, #12]
  return HAL_I2C_Master_Transmit(&hi2c3, ACC_I2C_ADDR, payload, 2, 50);
 800191c:	aa03      	add	r2, sp, #12
 800191e:	9600      	str	r6, [sp, #0]
 8001920:	4604      	mov	r4, r0
 8001922:	2302      	movs	r3, #2
 8001924:	21a6      	movs	r1, #166	@ 0xa6
 8001926:	4628      	mov	r0, r5
 8001928:	f002 ffb4 	bl	8004894 <HAL_I2C_Master_Transmit>
  uint8_t payload[2] = { reg, value };
 800192c:	f640 012d 	movw	r1, #2093	@ 0x82d
 8001930:	f8ad 100c 	strh.w	r1, [sp, #12]
 8001934:	4304      	orrs	r4, r0
  return HAL_I2C_Master_Transmit(&hi2c3, ACC_I2C_ADDR, payload, 2, 50);
 8001936:	9600      	str	r6, [sp, #0]
 8001938:	2302      	movs	r3, #2
 800193a:	aa03      	add	r2, sp, #12
 800193c:	4628      	mov	r0, r5
 800193e:	21a6      	movs	r1, #166	@ 0xa6
 8001940:	f002 ffa8 	bl	8004894 <HAL_I2C_Master_Transmit>
 8001944:	b2e4      	uxtb	r4, r4
  int ret = 0;

  ret |= ACCELEROMETER_WRITE(0x31, 0x01);  // DATA_FORMAT range +-4g
  ret |= ACCELEROMETER_WRITE(0x2D, 0x00);  // POWER_CTL bit reset
  ret |= ACCELEROMETER_WRITE(0x2D, 0x08);  // POWER_CTL set measure mode. 100hz default rate
 8001946:	4320      	orrs	r0, r4

  return ret;
}
 8001948:	b2c0      	uxtb	r0, r0
 800194a:	b004      	add	sp, #16
 800194c:	bd70      	pop	{r4, r5, r6, pc}
 800194e:	bf00      	nop
 8001950:	20000440 	.word	0x20000440

08001954 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001954:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001956:	480b      	ldr	r0, [pc, #44]	@ (8001984 <MX_I2C1_Init+0x30>)
 8001958:	4c0b      	ldr	r4, [pc, #44]	@ (8001988 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 800195a:	490c      	ldr	r1, [pc, #48]	@ (800198c <MX_I2C1_Init+0x38>)
 800195c:	2300      	movs	r3, #0
 800195e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001962:	e9c0 4100 	strd	r4, r1, [r0]
 8001966:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800196a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800196e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001972:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001974:	f002 fec6 	bl	8004704 <HAL_I2C_Init>
 8001978:	b900      	cbnz	r0, 800197c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800197a:	bd10      	pop	{r4, pc}
 800197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001980:	f000 bc70 	b.w	8002264 <Error_Handler>
 8001984:	20000498 	.word	0x20000498
 8001988:	40005400 	.word	0x40005400
 800198c:	00061a80 	.word	0x00061a80

08001990 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001990:	b510      	push	{r4, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001992:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <MX_I2C3_Init+0x30>)
 8001994:	4c0b      	ldr	r4, [pc, #44]	@ (80019c4 <MX_I2C3_Init+0x34>)
  hi2c3.Init.ClockSpeed = 400000;
 8001996:	490c      	ldr	r1, [pc, #48]	@ (80019c8 <MX_I2C3_Init+0x38>)
 8001998:	2300      	movs	r3, #0
 800199a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800199e:	e9c0 4100 	strd	r4, r1, [r0]
 80019a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80019a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80019aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80019ae:	6203      	str	r3, [r0, #32]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019b0:	f002 fea8 	bl	8004704 <HAL_I2C_Init>
 80019b4:	b900      	cbnz	r0, 80019b8 <MX_I2C3_Init+0x28>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019b6:	bd10      	pop	{r4, pc}
 80019b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80019bc:	f000 bc52 	b.w	8002264 <Error_Handler>
 80019c0:	20000440 	.word	0x20000440
 80019c4:	40005c00 	.word	0x40005c00
 80019c8:	00061a80 	.word	0x00061a80

080019cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 80019ce:	6803      	ldr	r3, [r0, #0]
 80019d0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac8 <HAL_I2C_MspInit+0xfc>)
{
 80019d2:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 80019d6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80019dc:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80019e0:	940a      	str	r4, [sp, #40]	@ 0x28
  if(i2cHandle->Instance==I2C1)
 80019e2:	d004      	beq.n	80019ee <HAL_I2C_MspInit+0x22>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 80019e4:	4a39      	ldr	r2, [pc, #228]	@ (8001acc <HAL_I2C_MspInit+0x100>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d02c      	beq.n	8001a44 <HAL_I2C_MspInit+0x78>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80019ea:	b00d      	add	sp, #52	@ 0x34
 80019ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4d38      	ldr	r5, [pc, #224]	@ (8001ad0 <HAL_I2C_MspInit+0x104>)
 80019f0:	9401      	str	r4, [sp, #4]
 80019f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	4837      	ldr	r0, [pc, #220]	@ (8001ad4 <HAL_I2C_MspInit+0x108>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	632b      	str	r3, [r5, #48]	@ 0x30
 80019fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C_ESP_SCL_Pin|I2C_ESP_SDA_Pin;
 8001a04:	22c0      	movs	r2, #192	@ 0xc0
 8001a06:	2312      	movs	r3, #18
 8001a08:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a12:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f002 fc9a 	bl	8004350 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a1c:	9402      	str	r4, [sp, #8]
 8001a1e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001a20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a24:	642b      	str	r3, [r5, #64]	@ 0x40
 8001a26:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a30:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a32:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a34:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a36:	f002 fa1d 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a3a:	201f      	movs	r0, #31
 8001a3c:	f002 fa56 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 8001a40:	b00d      	add	sp, #52	@ 0x34
 8001a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4d22      	ldr	r5, [pc, #136]	@ (8001ad0 <HAL_I2C_MspInit+0x104>)
 8001a46:	9403      	str	r4, [sp, #12]
 8001a48:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(I2C_ACC_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	4823      	ldr	r0, [pc, #140]	@ (8001ad8 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	632b      	str	r3, [r5, #48]	@ 0x30
 8001a52:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	9303      	str	r3, [sp, #12]
 8001a5a:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	9404      	str	r4, [sp, #16]
 8001a5e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	632b      	str	r3, [r5, #48]	@ 0x30
 8001a66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = I2C_ACC_SDA_Pin;
 8001a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2703      	movs	r7, #3
 8001a74:	2604      	movs	r6, #4
    HAL_GPIO_Init(I2C_ACC_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a76:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = I2C_ACC_SDA_Pin;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	e9cd 7609 	strd	r7, r6, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(I2C_ACC_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f002 fc64 	bl	8004350 <HAL_GPIO_Init>
    HAL_GPIO_Init(I2C_ACC_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a88:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a8e:	2312      	movs	r3, #18
    HAL_GPIO_Init(I2C_ACC_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a90:	4812      	ldr	r0, [pc, #72]	@ (8001adc <HAL_I2C_MspInit+0x110>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a94:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a9a:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(I2C_ACC_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f002 fc58 	bl	8004350 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001aa0:	9405      	str	r4, [sp, #20]
 8001aa2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001aa4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001aa8:	642b      	str	r3, [r5, #64]	@ 0x40
 8001aaa:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001ab0:	4622      	mov	r2, r4
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ab2:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	2048      	movs	r0, #72	@ 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ab8:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001aba:	f002 f9db 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001abe:	2048      	movs	r0, #72	@ 0x48
 8001ac0:	f002 fa14 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 8001ac4:	b00d      	add	sp, #52	@ 0x34
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40005c00 	.word	0x40005c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020000 	.word	0x40020000

08001ae0 <SYS_LOG>:
#ifdef ENABLE_SERIAL
extern uint32_t serial_flag;
extern ring_buffer_t SERIAL_BUFFER;
#endif

int SYS_LOG(LOG_LEVEL level, LOG_SOURCE source, int32_t key) {
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  syslog.timestamp = HAL_GetTick();
 8001ae2:	4c2a      	ldr	r4, [pc, #168]	@ (8001b8c <SYS_LOG+0xac>)
int SYS_LOG(LOG_LEVEL level, LOG_SOURCE source, int32_t key) {
 8001ae4:	4615      	mov	r5, r2
 8001ae6:	460e      	mov	r6, r1
 8001ae8:	4607      	mov	r7, r0
  syslog.timestamp = HAL_GetTick();
 8001aea:	f001 fb69 	bl	80031c0 <HAL_GetTick>
  sum += *((uint8_t *)(&syslog) + 3);
  sum += *((uint8_t *)(&syslog) + 4);
  sum += *((uint8_t *)(&syslog) + 5);
  sum += *((uint8_t *)(&syslog) + 6);
  sum += *((uint8_t *)(&syslog) + 8);
  sum += *((uint8_t *)(&syslog) + 9);
 8001aee:	7a62      	ldrb	r2, [r4, #9]
  sum += *((uint8_t *)(&syslog) + 8);
 8001af0:	7a23      	ldrb	r3, [r4, #8]
  syslog.timestamp = HAL_GetTick();
 8001af2:	6020      	str	r0, [r4, #0]
  sum += *((uint8_t *)(&syslog) + 10);
  sum += *((uint8_t *)(&syslog) + 11);
  sum += *((uint8_t *)(&syslog) + 12);
  sum += *((uint8_t *)(&syslog) + 13);
  sum += *((uint8_t *)(&syslog) + 14);
  sum += *((uint8_t *)(&syslog) + 15);
 8001af4:	4413      	add	r3, r2
  sum += *((uint8_t *)(&syslog) + 10);
 8001af6:	7aa2      	ldrb	r2, [r4, #10]
  sum += *((uint8_t *)(&syslog) + 15);
 8001af8:	4413      	add	r3, r2
  sum += *((uint8_t *)(&syslog) + 11);
 8001afa:	7ae2      	ldrb	r2, [r4, #11]
  sum += *((uint8_t *)(&syslog) + 15);
 8001afc:	4413      	add	r3, r2
  sum += *((uint8_t *)(&syslog) + 12);
 8001afe:	7b22      	ldrb	r2, [r4, #12]
  sum += *((uint8_t *)(&syslog) + 15);
 8001b00:	4413      	add	r3, r2
  sum += *((uint8_t *)(&syslog) + 13);
 8001b02:	7b62      	ldrb	r2, [r4, #13]
  sum += *((uint8_t *)(&syslog) + 15);
 8001b04:	4413      	add	r3, r2
  sum += *((uint8_t *)(&syslog) + 14);
 8001b06:	7ba2      	ldrb	r2, [r4, #14]
  sum += *((uint8_t *)(&syslog) + 15);
 8001b08:	4413      	add	r3, r2
 8001b0a:	7be2      	ldrb	r2, [r4, #15]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4433      	add	r3, r6
 8001b10:	fa53 f385 	uxtab	r3, r3, r5
  syslog.level = level;
 8001b14:	2200      	movs	r2, #0
  sum += *((uint8_t *)(&syslog) + 15);
 8001b16:	443b      	add	r3, r7
  syslog.level = level;
 8001b18:	f367 0207 	bfi	r2, r7, #0, #8
  sum += *((uint8_t *)(&syslog) + 1);
 8001b1c:	f3c0 2107 	ubfx	r1, r0, #8, #8
  sum += *((uint8_t *)(&syslog) + 15);
 8001b20:	fa53 f380 	uxtab	r3, r3, r0
  syslog.level = level;
 8001b24:	f366 220f 	bfi	r2, r6, #8, #8
 8001b28:	f365 4217 	bfi	r2, r5, #16, #8
  sum += *((uint8_t *)(&syslog) + 15);
 8001b2c:	440b      	add	r3, r1

  syslog.checksum = (uint8_t)(sum & 0xff);

  if (sys_state.SD) {
 8001b2e:	4d18      	ldr	r5, [pc, #96]	@ (8001b90 <SYS_LOG+0xb0>)
  sum += *((uint8_t *)(&syslog) + 2);
 8001b30:	f3c0 4107 	ubfx	r1, r0, #16, #8
  sum += *((uint8_t *)(&syslog) + 15);
 8001b34:	440b      	add	r3, r1
 8001b36:	eb03 6010 	add.w	r0, r3, r0, lsr #24
  if (sys_state.SD) {
 8001b3a:	786b      	ldrb	r3, [r5, #1]
  syslog.level = level;
 8001b3c:	f360 621f 	bfi	r2, r0, #24, #8
 8001b40:	6062      	str	r2, [r4, #4]
  if (sys_state.SD) {
 8001b42:	b97b      	cbnz	r3, 8001b64 <SYS_LOG+0x84>
    ring_buffer_queue_arr(&SD_BUFFER, (char *)&syslog, sizeof(LOG));
  }

#ifdef ENABLE_TELEMETRY

  if (sys_state.TELEMETRY) {
 8001b44:	78ab      	ldrb	r3, [r5, #2]
 8001b46:	b9ab      	cbnz	r3, 8001b74 <SYS_LOG+0x94>

  }
#endif

#ifdef ENABLE_SERIAL
  serial_flag |= 1 << SERIAL_BUFFER_REMAIN;
 8001b48:	4d12      	ldr	r5, [pc, #72]	@ (8001b94 <SYS_LOG+0xb4>)
  ring_buffer_queue_arr(&SERIAL_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b4a:	4813      	ldr	r0, [pc, #76]	@ (8001b98 <SYS_LOG+0xb8>)
  serial_flag |= 1 << SERIAL_BUFFER_REMAIN;
 8001b4c:	682b      	ldr	r3, [r5, #0]
  ring_buffer_queue_arr(&SERIAL_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b4e:	490f      	ldr	r1, [pc, #60]	@ (8001b8c <SYS_LOG+0xac>)
  serial_flag |= 1 << SERIAL_BUFFER_REMAIN;
 8001b50:	f043 0301 	orr.w	r3, r3, #1
  ring_buffer_queue_arr(&SERIAL_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b54:	2210      	movs	r2, #16
  serial_flag |= 1 << SERIAL_BUFFER_REMAIN;
 8001b56:	602b      	str	r3, [r5, #0]
  ring_buffer_queue_arr(&SERIAL_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b58:	f000 fb9c 	bl	8002294 <ring_buffer_queue_arr>
//	    DEBUG_MSG("[%8lu] [LOG] %s\t%s\t%s\t\t%02x %02x %02x %02x %02x %02x %02x %02x\r\n", syslog.timestamp, STR_LOG_LEVEL[syslog.level], STR_LOG_SOURCE[syslog.source], STR_LOG_KEY[syslog.source][syslog.key], syslog.value[0], syslog.value[1], syslog.value[2], syslog.value[3], syslog.value[4], syslog.value[5], syslog.value[6], syslog.value[7]);
  }
#endif

  // reset log value
  *(uint64_t *)syslog.value = 0;
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	e9c4 0002 	strd	r0, r0, [r4, #8]

  return 0;
}
 8001b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ring_buffer_queue_arr(&SD_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b64:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <SYS_LOG+0xbc>)
 8001b66:	2210      	movs	r2, #16
 8001b68:	4621      	mov	r1, r4
 8001b6a:	f000 fb93 	bl	8002294 <ring_buffer_queue_arr>
  if (sys_state.TELEMETRY) {
 8001b6e:	78ab      	ldrb	r3, [r5, #2]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0e9      	beq.n	8001b48 <SYS_LOG+0x68>
    telemetry_flag |= 1 << TELEMETRY_BUFFER_REMAIN;
 8001b74:	4d0a      	ldr	r5, [pc, #40]	@ (8001ba0 <SYS_LOG+0xc0>)
    ring_buffer_queue_arr(&TELEMETRY_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b76:	4905      	ldr	r1, [pc, #20]	@ (8001b8c <SYS_LOG+0xac>)
    telemetry_flag |= 1 << TELEMETRY_BUFFER_REMAIN;
 8001b78:	682b      	ldr	r3, [r5, #0]
    ring_buffer_queue_arr(&TELEMETRY_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b7a:	480a      	ldr	r0, [pc, #40]	@ (8001ba4 <SYS_LOG+0xc4>)
    telemetry_flag |= 1 << TELEMETRY_BUFFER_REMAIN;
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
    ring_buffer_queue_arr(&TELEMETRY_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b80:	2210      	movs	r2, #16
    telemetry_flag |= 1 << TELEMETRY_BUFFER_REMAIN;
 8001b82:	602b      	str	r3, [r5, #0]
    ring_buffer_queue_arr(&TELEMETRY_BUFFER, (char *)&syslog, sizeof(LOG));
 8001b84:	f000 fb86 	bl	8002294 <ring_buffer_queue_arr>
 8001b88:	e7de      	b.n	8001b48 <SYS_LOG+0x68>
 8001b8a:	bf00      	nop
 8001b8c:	2000865c 	.word	0x2000865c
 8001b90:	20008658 	.word	0x20008658
 8001b94:	20008624 	.word	0x20008624
 8001b98:	20008614 	.word	0x20008614
 8001b9c:	20008628 	.word	0x20008628
 8001ba0:	20004610 	.word	0x20004610
 8001ba4:	200045fc 	.word	0x200045fc

08001ba8 <GPS_PARSE.part.0>:
  }
  heartbeat = !heartbeat;
}

#ifdef ENABLE_MONITOR_GPS
void GPS_PARSE(void) {
 8001ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static GPS_DATETIME gps_datetime;

  if (!strncmp((char *)gps_data, "$GPRMC", 6)) {

    // parse NMEA GPRMC sentence
    gprmc.id = gps_data;
 8001bac:	4c62      	ldr	r4, [pc, #392]	@ (8001d38 <GPS_PARSE.part.0+0x190>)
 8001bae:	4863      	ldr	r0, [pc, #396]	@ (8001d3c <GPS_PARSE.part.0+0x194>)
 8001bb0:	6020      	str	r0, [r4, #0]
    gprmc.utc_time = FIND_AND_NUL(gprmc.id, gprmc.utc_time, ',');
 8001bb2:	212c      	movs	r1, #44	@ 0x2c
 8001bb4:	f008 fa62 	bl	800a07c <strchr>
 8001bb8:	2500      	movs	r5, #0
 8001bba:	f800 5b01 	strb.w	r5, [r0], #1
    gprmc.status = FIND_AND_NUL(gprmc.utc_time, gprmc.status, ',');
 8001bbe:	212c      	movs	r1, #44	@ 0x2c
    gprmc.utc_time = FIND_AND_NUL(gprmc.id, gprmc.utc_time, ',');
 8001bc0:	6060      	str	r0, [r4, #4]
    gprmc.status = FIND_AND_NUL(gprmc.utc_time, gprmc.status, ',');
 8001bc2:	f008 fa5b 	bl	800a07c <strchr>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f803 5b01 	strb.w	r5, [r3], #1

    // proceed only if GPS fix is valid
    if (*gprmc.status == 'A') {
 8001bcc:	7842      	ldrb	r2, [r0, #1]
    gprmc.status = FIND_AND_NUL(gprmc.utc_time, gprmc.status, ',');
 8001bce:	60a3      	str	r3, [r4, #8]
    if (*gprmc.status == 'A') {
 8001bd0:	2a41      	cmp	r2, #65	@ 0x41
 8001bd2:	d001      	beq.n	8001bd8 <GPS_PARSE.part.0+0x30>

      *(uint64_t *)syslog.value = *(uint64_t *)&gps_datetime;
      SYS_LOG(LOG_INFO, GPS, GPS_TIME);
    }
  }
}
 8001bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      gprmc.lat = FIND_AND_NUL(gprmc.status, gprmc.lat, ',');
 8001bd8:	4618      	mov	r0, r3
 8001bda:	212c      	movs	r1, #44	@ 0x2c
 8001bdc:	f008 fa4e 	bl	800a07c <strchr>
 8001be0:	4606      	mov	r6, r0
 8001be2:	4607      	mov	r7, r0
 8001be4:	f806 5b01 	strb.w	r5, [r6], #1
      gprmc.north = FIND_AND_NUL(gprmc.lat, gprmc.north, ',');
 8001be8:	212c      	movs	r1, #44	@ 0x2c
 8001bea:	4630      	mov	r0, r6
      gprmc.lat = FIND_AND_NUL(gprmc.status, gprmc.lat, ',');
 8001bec:	60e6      	str	r6, [r4, #12]
      gprmc.north = FIND_AND_NUL(gprmc.lat, gprmc.north, ',');
 8001bee:	f008 fa45 	bl	800a07c <strchr>
 8001bf2:	f800 5b01 	strb.w	r5, [r0], #1
      gprmc.lon = FIND_AND_NUL(gprmc.north, gprmc.lon, ',');
 8001bf6:	212c      	movs	r1, #44	@ 0x2c
      gprmc.north = FIND_AND_NUL(gprmc.lat, gprmc.north, ',');
 8001bf8:	6120      	str	r0, [r4, #16]
      gprmc.lon = FIND_AND_NUL(gprmc.north, gprmc.lon, ',');
 8001bfa:	f008 fa3f 	bl	800a07c <strchr>
 8001bfe:	f800 5b01 	strb.w	r5, [r0], #1
      gprmc.east = FIND_AND_NUL(gprmc.lon, gprmc.east, ',');
 8001c02:	212c      	movs	r1, #44	@ 0x2c
      gprmc.lon = FIND_AND_NUL(gprmc.north, gprmc.lon, ',');
 8001c04:	6160      	str	r0, [r4, #20]
      gprmc.east = FIND_AND_NUL(gprmc.lon, gprmc.east, ',');
 8001c06:	f008 fa39 	bl	800a07c <strchr>
 8001c0a:	f800 5b01 	strb.w	r5, [r0], #1
      gprmc.speed = FIND_AND_NUL(gprmc.east, gprmc.speed, ',');
 8001c0e:	212c      	movs	r1, #44	@ 0x2c
      gprmc.east = FIND_AND_NUL(gprmc.lon, gprmc.east, ',');
 8001c10:	61a0      	str	r0, [r4, #24]
      gprmc.speed = FIND_AND_NUL(gprmc.east, gprmc.speed, ',');
 8001c12:	f008 fa33 	bl	800a07c <strchr>
 8001c16:	f800 5b01 	strb.w	r5, [r0], #1
      gprmc.course = FIND_AND_NUL(gprmc.speed, gprmc.course, ',');
 8001c1a:	212c      	movs	r1, #44	@ 0x2c
      gprmc.speed = FIND_AND_NUL(gprmc.east, gprmc.speed, ',');
 8001c1c:	61e0      	str	r0, [r4, #28]
      gprmc.course = FIND_AND_NUL(gprmc.speed, gprmc.course, ',');
 8001c1e:	f008 fa2d 	bl	800a07c <strchr>
 8001c22:	f800 5b01 	strb.w	r5, [r0], #1
      gprmc.utc_date = FIND_AND_NUL(gprmc.course, gprmc.utc_date, ',');
 8001c26:	212c      	movs	r1, #44	@ 0x2c
      gprmc.course = FIND_AND_NUL(gprmc.speed, gprmc.course, ',');
 8001c28:	6220      	str	r0, [r4, #32]
      gprmc.utc_date = FIND_AND_NUL(gprmc.course, gprmc.utc_date, ',');
 8001c2a:	f008 fa27 	bl	800a07c <strchr>
 8001c2e:	f800 5b01 	strb.w	r5, [r0], #1
      gprmc.others = FIND_AND_NUL(gprmc.utc_date, gprmc.others, ',');
 8001c32:	212c      	movs	r1, #44	@ 0x2c
      gprmc.utc_date = FIND_AND_NUL(gprmc.course, gprmc.utc_date, ',');
 8001c34:	6260      	str	r0, [r4, #36]	@ 0x24
      gprmc.others = FIND_AND_NUL(gprmc.utc_date, gprmc.others, ',');
 8001c36:	f008 fa21 	bl	800a07c <strchr>
 8001c3a:	f800 5b01 	strb.w	r5, [r0], #1
   ++(p), \
   (p))

inline uint32_t to_uint(uint8_t *str, char garbage) {
  uint8_t *src, *dst;
  for (src = dst = str; *src != '\0'; src++) {
 8001c3e:	787b      	ldrb	r3, [r7, #1]
 8001c40:	62a0      	str	r0, [r4, #40]	@ 0x28
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d073      	beq.n	8001d2e <GPS_PARSE.part.0+0x186>
 8001c46:	4631      	mov	r1, r6
 8001c48:	4632      	mov	r2, r6
    *dst = *src;
 8001c4a:	7013      	strb	r3, [r2, #0]
    if (*dst != garbage) dst++;
 8001c4c:	2b2e      	cmp	r3, #46	@ 0x2e
  for (src = dst = str; *src != '\0'; src++) {
 8001c4e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    if (*dst != garbage) dst++;
 8001c52:	bf18      	it	ne
 8001c54:	3201      	addne	r2, #1
  for (src = dst = str; *src != '\0'; src++) {
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f7      	bne.n	8001c4a <GPS_PARSE.part.0+0xa2>
  }
  *dst = '\0';
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	7013      	strb	r3, [r2, #0]

  return atoi((char *)str);
 8001c5e:	4630      	mov	r0, r6
 8001c60:	f007 faa1 	bl	80091a6 <atoi>
 8001c64:	4602      	mov	r2, r0
      gps_coord.lon = to_uint(gprmc.lon, '.');
 8001c66:	6960      	ldr	r0, [r4, #20]
      gps_coord.lat = to_uint(gprmc.lat, '.');
 8001c68:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 8001d50 <GPS_PARSE.part.0+0x1a8>
  for (src = dst = str; *src != '\0'; src++) {
 8001c6c:	7803      	ldrb	r3, [r0, #0]
 8001c6e:	f8c8 2000 	str.w	r2, [r8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d05d      	beq.n	8001d32 <GPS_PARSE.part.0+0x18a>
 8001c76:	4601      	mov	r1, r0
 8001c78:	4602      	mov	r2, r0
    *dst = *src;
 8001c7a:	7013      	strb	r3, [r2, #0]
    if (*dst != garbage) dst++;
 8001c7c:	2b2e      	cmp	r3, #46	@ 0x2e
  for (src = dst = str; *src != '\0'; src++) {
 8001c7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    if (*dst != garbage) dst++;
 8001c82:	bf18      	it	ne
 8001c84:	3201      	addne	r2, #1
  for (src = dst = str; *src != '\0'; src++) {
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f7      	bne.n	8001c7a <GPS_PARSE.part.0+0xd2>
  *dst = '\0';
 8001c8a:	f04f 0900 	mov.w	r9, #0
 8001c8e:	f882 9000 	strb.w	r9, [r2]
  return atoi((char *)str);
 8001c92:	f007 fa88 	bl	80091a6 <atoi>
 8001c96:	4603      	mov	r3, r0
      gps_vector.speed = (int)(atof((char *)gprmc.speed) * 100);
 8001c98:	69e0      	ldr	r0, [r4, #28]
      gps_coord.lon = to_uint(gprmc.lon, '.');
 8001c9a:	f8c8 3004 	str.w	r3, [r8, #4]
      gps_vector.speed = (int)(atof((char *)gprmc.speed) * 100);
 8001c9e:	f007 fa7f 	bl	80091a0 <atof>
 8001ca2:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <GPS_PARSE.part.0+0x198>)
 8001ca4:	4f27      	ldr	r7, [pc, #156]	@ (8001d44 <GPS_PARSE.part.0+0x19c>)
      gps_datetime.utc_date = atoi((char *)gprmc.utc_date);
 8001ca6:	4e28      	ldr	r6, [pc, #160]	@ (8001d48 <GPS_PARSE.part.0+0x1a0>)
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_coord;
 8001ca8:	4d28      	ldr	r5, [pc, #160]	@ (8001d4c <GPS_PARSE.part.0+0x1a4>)
      gps_vector.speed = (int)(atof((char *)gprmc.speed) * 100);
 8001caa:	ec51 0b10 	vmov	r0, r1, d0
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f7fe fc9a 	bl	80005e8 <__aeabi_dmul>
 8001cb4:	f7fe ff32 	bl	8000b1c <__aeabi_d2iz>
      gps_vector.course = drop_point(gprmc.course);
 8001cb8:	f8d4 a020 	ldr.w	sl, [r4, #32]
      gps_vector.speed = (int)(atof((char *)gprmc.speed) * 100);
 8001cbc:	6038      	str	r0, [r7, #0]
}

inline uint32_t drop_point(uint8_t *str) {
  *(strchr((char *)str, '.')) = '\0';
 8001cbe:	212e      	movs	r1, #46	@ 0x2e
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f008 f9db 	bl	800a07c <strchr>
 8001cc6:	f880 9000 	strb.w	r9, [r0]
  return atoi((char *)str);
 8001cca:	4650      	mov	r0, sl
 8001ccc:	f007 fa6b 	bl	80091a6 <atoi>
      gps_vector.course = drop_point(gprmc.course);
 8001cd0:	6078      	str	r0, [r7, #4]
      gps_datetime.utc_date = atoi((char *)gprmc.utc_date);
 8001cd2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001cd4:	f007 fa67 	bl	80091a6 <atoi>
      gps_datetime.utc_time = drop_point(gprmc.utc_time);
 8001cd8:	6864      	ldr	r4, [r4, #4]
      gps_datetime.utc_date = atoi((char *)gprmc.utc_date);
 8001cda:	6030      	str	r0, [r6, #0]
  *(strchr((char *)str, '.')) = '\0';
 8001cdc:	212e      	movs	r1, #46	@ 0x2e
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f008 f9cc 	bl	800a07c <strchr>
 8001ce4:	f880 9000 	strb.w	r9, [r0]
  return atoi((char *)str);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f007 fa5c 	bl	80091a6 <atoi>
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_coord;
 8001cee:	f8d8 3000 	ldr.w	r3, [r8]
      gps_datetime.utc_time = drop_point(gprmc.utc_time);
 8001cf2:	6070      	str	r0, [r6, #4]
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_coord;
 8001cf4:	60ab      	str	r3, [r5, #8]
      SYS_LOG(LOG_INFO, GPS, GPS_POS);
 8001cf6:	2201      	movs	r2, #1
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_coord;
 8001cf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001cfc:	60eb      	str	r3, [r5, #12]
      SYS_LOG(LOG_INFO, GPS, GPS_POS);
 8001cfe:	2107      	movs	r1, #7
 8001d00:	2003      	movs	r0, #3
 8001d02:	f7ff feed 	bl	8001ae0 <SYS_LOG>
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_vector;
 8001d06:	e9d7 2300 	ldrd	r2, r3, [r7]
      SYS_LOG(LOG_INFO, GPS, GPS_VEC);
 8001d0a:	2107      	movs	r1, #7
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_vector;
 8001d0c:	60aa      	str	r2, [r5, #8]
      SYS_LOG(LOG_INFO, GPS, GPS_VEC);
 8001d0e:	2003      	movs	r0, #3
 8001d10:	2202      	movs	r2, #2
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_vector;
 8001d12:	60eb      	str	r3, [r5, #12]
      SYS_LOG(LOG_INFO, GPS, GPS_VEC);
 8001d14:	f7ff fee4 	bl	8001ae0 <SYS_LOG>
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_datetime;
 8001d18:	e9d6 1300 	ldrd	r1, r3, [r6]
      SYS_LOG(LOG_INFO, GPS, GPS_TIME);
 8001d1c:	2203      	movs	r2, #3
      *(uint64_t *)syslog.value = *(uint64_t *)&gps_datetime;
 8001d1e:	60a9      	str	r1, [r5, #8]
 8001d20:	60eb      	str	r3, [r5, #12]
      SYS_LOG(LOG_INFO, GPS, GPS_TIME);
 8001d22:	2107      	movs	r1, #7
}
 8001d24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      SYS_LOG(LOG_INFO, GPS, GPS_TIME);
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f7ff bed9 	b.w	8001ae0 <SYS_LOG>
  for (src = dst = str; *src != '\0'; src++) {
 8001d2e:	4632      	mov	r2, r6
 8001d30:	e793      	b.n	8001c5a <GPS_PARSE.part.0+0xb2>
 8001d32:	4602      	mov	r2, r0
 8001d34:	e7a9      	b.n	8001c8a <GPS_PARSE.part.0+0xe2>
 8001d36:	bf00      	nop
 8001d38:	20000504 	.word	0x20000504
 8001d3c:	20000530 	.word	0x20000530
 8001d40:	40590000 	.word	0x40590000
 8001d44:	200004f4 	.word	0x200004f4
 8001d48:	200004ec 	.word	0x200004ec
 8001d4c:	2000865c 	.word	0x2000865c
 8001d50:	200004fc 	.word	0x200004fc

08001d54 <_read>:
__attribute__((weak)) void _read(void){}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop

08001d58 <_write>:
int _write(int file, uint8_t *ptr, int len) {
 8001d58:	b510      	push	{r4, lr}
  HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, (uint16_t)len, 30);
 8001d5a:	231e      	movs	r3, #30
int _write(int file, uint8_t *ptr, int len) {
 8001d5c:	4614      	mov	r4, r2
  HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, (uint16_t)len, 30);
 8001d5e:	4803      	ldr	r0, [pc, #12]	@ (8001d6c <_write+0x14>)
 8001d60:	b292      	uxth	r2, r2
 8001d62:	f005 fddd 	bl	8007920 <HAL_UART_Transmit>
}
 8001d66:	4620      	mov	r0, r4
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20009ad8 	.word	0x20009ad8

08001d70 <SystemClock_Config>:
{
 8001d70:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	2300      	movs	r3, #0
{
 8001d74:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d76:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001d7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4923      	ldr	r1, [pc, #140]	@ (8001e10 <SystemClock_Config+0xa0>)
 8001d84:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d86:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8a:	4a22      	ldr	r2, [pc, #136]	@ (8001e14 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001d90:	6408      	str	r0, [r1, #64]	@ 0x40
 8001d92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d94:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001d98:	9101      	str	r1, [sp, #4]
 8001d9a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	6813      	ldr	r3, [r2, #0]
 8001da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dac:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001dae:	220d      	movs	r2, #13
 8001db0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001db4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001db8:	2004      	movs	r0, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dbe:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dc0:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dc2:	22a8      	movs	r2, #168	@ 0xa8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dc4:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dc8:	e9cd 0210 	strd	r0, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dcc:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dce:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd0:	e9cd 140d 	strd	r1, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dd4:	e9cd 4312 	strd	r4, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dd8:	910a      	str	r1, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dda:	f003 fe9f 	bl	8005b1c <HAL_RCC_OscConfig>
 8001dde:	b108      	cbz	r0, 8001de4 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001de2:	e7fe      	b.n	8001de2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de4:	220f      	movs	r2, #15
 8001de6:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de8:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dec:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001df0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001df4:	a803      	add	r0, sp, #12
 8001df6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df8:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dfc:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dfe:	f004 f8a9 	bl	8005f54 <HAL_RCC_ClockConfig>
 8001e02:	b108      	cbz	r0, 8001e08 <SystemClock_Config+0x98>
 8001e04:	b672      	cpsid	i
  while (1) {
 8001e06:	e7fe      	b.n	8001e06 <SystemClock_Config+0x96>
  HAL_RCC_EnableCSS();
 8001e08:	f004 f86a 	bl	8005ee0 <HAL_RCC_EnableCSS>
}
 8001e0c:	b015      	add	sp, #84	@ 0x54
 8001e0e:	bd30      	pop	{r4, r5, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <TIMER_100ms>:
void TIMER_100ms(void) {
 8001e18:	b510      	push	{r4, lr}
  if (!(adc_flag & (1 << FLAG_ADC_AIN))) {
 8001e1a:	4c14      	ldr	r4, [pc, #80]	@ (8001e6c <TIMER_100ms+0x54>)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	075a      	lsls	r2, r3, #29
void TIMER_100ms(void) {
 8001e20:	b082      	sub	sp, #8
  if (!(adc_flag & (1 << FLAG_ADC_AIN))) {
 8001e22:	d506      	bpl.n	8001e32 <TIMER_100ms+0x1a>
  if (!(adc_flag & (1 << FLAG_ADC_AIN2))) {
 8001e24:	071b      	lsls	r3, r3, #28
 8001e26:	d50c      	bpl.n	8001e42 <TIMER_100ms+0x2a>
  if (accelerometer_flag == false) {
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <TIMER_100ms+0x58>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b193      	cbz	r3, 8001e54 <TIMER_100ms+0x3c>
}
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd10      	pop	{r4, pc}
    HAL_ADC_Start_DMA(&hadc2, adc_ain_value, 4);
 8001e32:	4910      	ldr	r1, [pc, #64]	@ (8001e74 <TIMER_100ms+0x5c>)
 8001e34:	4810      	ldr	r0, [pc, #64]	@ (8001e78 <TIMER_100ms+0x60>)
 8001e36:	2204      	movs	r2, #4
 8001e38:	f001 fa86 	bl	8003348 <HAL_ADC_Start_DMA>
  if (!(adc_flag & (1 << FLAG_ADC_AIN2))) {
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	071b      	lsls	r3, r3, #28
 8001e40:	d4f2      	bmi.n	8001e28 <TIMER_100ms+0x10>
    HAL_ADC_Start_DMA(&hadc3, adc_ain_value2, 4);
 8001e42:	490e      	ldr	r1, [pc, #56]	@ (8001e7c <TIMER_100ms+0x64>)
 8001e44:	480e      	ldr	r0, [pc, #56]	@ (8001e80 <TIMER_100ms+0x68>)
 8001e46:	2204      	movs	r2, #4
 8001e48:	f001 fa7e 	bl	8003348 <HAL_ADC_Start_DMA>
  if (accelerometer_flag == false) {
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <TIMER_100ms+0x58>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ec      	bne.n	8001e2e <TIMER_100ms+0x16>
    HAL_I2C_Mem_Read_IT(I2C_ACCELEROMETER, ACC_I2C_ADDR, 0x32, 1, accelerometer_value, 6);
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <TIMER_100ms+0x6c>)
 8001e56:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <TIMER_100ms+0x70>)
 8001e58:	2206      	movs	r2, #6
 8001e5a:	e9cd 3200 	strd	r3, r2, [sp]
 8001e5e:	21a6      	movs	r1, #166	@ 0xa6
 8001e60:	2301      	movs	r3, #1
 8001e62:	2232      	movs	r2, #50	@ 0x32
 8001e64:	f002 fe96 	bl	8004b94 <HAL_I2C_Mem_Read_IT>
}
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd10      	pop	{r4, pc}
 8001e6c:	200005d4 	.word	0x200005d4
 8001e70:	200005bc 	.word	0x200005bc
 8001e74:	200005c8 	.word	0x200005c8
 8001e78:	20000368 	.word	0x20000368
 8001e7c:	200005c0 	.word	0x200005c0
 8001e80:	20000320 	.word	0x20000320
 8001e84:	200005b4 	.word	0x200005b4
 8001e88:	20000440 	.word	0x20000440

08001e8c <TIMER_1s>:
  if (!(adc_flag & (1 << FLAG_ADC_SYS))) {
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <TIMER_1s+0x48>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	079b      	lsls	r3, r3, #30
void TIMER_1s(void) {
 8001e92:	b510      	push	{r4, lr}
  if (!(adc_flag & (1 << FLAG_ADC_SYS))) {
 8001e94:	d518      	bpl.n	8001ec8 <TIMER_1s+0x3c>
  if (heartbeat) {
 8001e96:	4c10      	ldr	r4, [pc, #64]	@ (8001ed8 <TIMER_1s+0x4c>)
  SD_SYNC();
 8001e98:	f000 fb90 	bl	80025bc <SD_SYNC>
  if (heartbeat) {
 8001e9c:	7822      	ldrb	r2, [r4, #0]
    HAL_GPIO_WritePin(GPIOE, LED_HEARTBEAT_Pin, GPIO_PIN_SET);
 8001e9e:	480f      	ldr	r0, [pc, #60]	@ (8001edc <TIMER_1s+0x50>)
  if (heartbeat) {
 8001ea0:	b14a      	cbz	r2, 8001eb6 <TIMER_1s+0x2a>
    HAL_GPIO_WritePin(GPIOE, LED_HEARTBEAT_Pin, GPIO_PIN_SET);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ea8:	f002 fb76 	bl	8004598 <HAL_GPIO_WritePin>
  heartbeat = !heartbeat;
 8001eac:	7823      	ldrb	r3, [r4, #0]
 8001eae:	f083 0301 	eor.w	r3, r3, #1
 8001eb2:	7023      	strb	r3, [r4, #0]
}
 8001eb4:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(GPIOE, LED_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8001eb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001eba:	f002 fb6d 	bl	8004598 <HAL_GPIO_WritePin>
  heartbeat = !heartbeat;
 8001ebe:	7823      	ldrb	r3, [r4, #0]
 8001ec0:	f083 0301 	eor.w	r3, r3, #1
 8001ec4:	7023      	strb	r3, [r4, #0]
}
 8001ec6:	bd10      	pop	{r4, pc}
    HAL_ADC_Start_DMA(&hadc1, adc_sys_value, 2);
 8001ec8:	4905      	ldr	r1, [pc, #20]	@ (8001ee0 <TIMER_1s+0x54>)
 8001eca:	4806      	ldr	r0, [pc, #24]	@ (8001ee4 <TIMER_1s+0x58>)
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f001 fa3b 	bl	8003348 <HAL_ADC_Start_DMA>
 8001ed2:	e7e0      	b.n	8001e96 <TIMER_1s+0xa>
 8001ed4:	200005d4 	.word	0x200005d4
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	200005d0 	.word	0x200005d0
 8001ee4:	200003b0 	.word	0x200003b0

08001ee8 <main>:
{
 8001ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eec:	b083      	sub	sp, #12
  HAL_Init();
 8001eee:	f001 f941 	bl	8003174 <HAL_Init>
  SystemClock_Config();
 8001ef2:	f7ff ff3d 	bl	8001d70 <SystemClock_Config>
  MX_GPIO_Init();
 8001ef6:	f7ff fbe3 	bl	80016c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001efa:	f7ff fb79 	bl	80015f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001efe:	f7ff f85b 	bl	8000fb8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f02:	f7ff f89d 	bl	8001040 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001f06:	f7ff f903 	bl	8001110 <MX_ADC3_Init>
  MX_RTC_Init();
 8001f0a:	f000 fab3 	bl	8002474 <MX_RTC_Init>
  MX_TIM1_Init();
 8001f0e:	f000 fd75 	bl	80029fc <MX_TIM1_Init>
  MX_TIM5_Init();
 8001f12:	f000 fdaf 	bl	8002a74 <MX_TIM5_Init>
  MX_CAN1_Init();
 8001f16:	f7ff faf5 	bl	8001504 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001f1a:	f7ff fd1b 	bl	8001954 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001f1e:	f7ff fd37 	bl	8001990 <MX_I2C3_Init>
  MX_SDIO_SD_Init();
 8001f22:	f000 fb69 	bl	80025f8 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8001f26:	f000 ff37 	bl	8002d98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f2a:	f000 ff51 	bl	8002dd0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001f2e:	f006 fb5f 	bl	80085f0 <MX_FATFS_Init>
  ring_buffer_init(&TELEMETRY_BUFFER, (char *)TELEMETRY_BUFFER_ARR, sizeof(TELEMETRY_BUFFER_ARR));
 8001f32:	49ba      	ldr	r1, [pc, #744]	@ (800221c <main+0x334>)
 8001f34:	48ba      	ldr	r0, [pc, #744]	@ (8002220 <main+0x338>)
  sys_state.ERR = false;
 8001f36:	4ebb      	ldr	r6, [pc, #748]	@ (8002224 <main+0x33c>)
 8001f38:	4dbb      	ldr	r5, [pc, #748]	@ (8002228 <main+0x340>)
  ring_buffer_init(&TELEMETRY_BUFFER, (char *)TELEMETRY_BUFFER_ARR, sizeof(TELEMETRY_BUFFER_ARR));
 8001f3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  sys_state.ERR = false;
 8001f3e:	2400      	movs	r4, #0
  ring_buffer_init(&TELEMETRY_BUFFER, (char *)TELEMETRY_BUFFER_ARR, sizeof(TELEMETRY_BUFFER_ARR));
 8001f40:	f000 f992 	bl	8002268 <ring_buffer_init>
  RTC_READ(&boot);
 8001f44:	4668      	mov	r0, sp
 8001f46:	f000 fa6d 	bl	8002424 <RTC_READ>
  HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin, GPIO_PIN_RESET);
 8001f4a:	48b8      	ldr	r0, [pc, #736]	@ (800222c <main+0x344>)
  sys_state.ERR = false;
 8001f4c:	7034      	strb	r4, [r6, #0]
  HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin, GPIO_PIN_RESET);
 8001f4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f52:	4622      	mov	r2, r4
  sys_state.TELEMETRY = false;
 8001f54:	8074      	strh	r4, [r6, #2]
  HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin, GPIO_PIN_RESET);
 8001f56:	f002 fb1f 	bl	8004598 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LED_ERR_CAN_Pin, GPIO_PIN_RESET);
 8001f5a:	48b4      	ldr	r0, [pc, #720]	@ (800222c <main+0x344>)
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f62:	f002 fb19 	bl	8004598 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LED_HEARTBEAT_Pin, GPIO_PIN_SET);
 8001f66:	48b1      	ldr	r0, [pc, #708]	@ (800222c <main+0x344>)
 8001f68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f002 fb13 	bl	8004598 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 8001f72:	48ae      	ldr	r0, [pc, #696]	@ (800222c <main+0x344>)
 8001f74:	4622      	mov	r2, r4
 8001f76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f7a:	f002 fb0d 	bl	8004598 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 8001f7e:	48ab      	ldr	r0, [pc, #684]	@ (800222c <main+0x344>)
 8001f80:	4622      	mov	r2, r4
 8001f82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f86:	f002 fb07 	bl	8004598 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(UART_DEBUG, rtc, 20);
 8001f8a:	49a9      	ldr	r1, [pc, #676]	@ (8002230 <main+0x348>)
 8001f8c:	48a9      	ldr	r0, [pc, #676]	@ (8002234 <main+0x34c>)
 8001f8e:	2214      	movs	r2, #20
 8001f90:	f005 fd4e 	bl	8007a30 <HAL_UART_Receive_IT>
  SYS_LOG(LOG_INFO, ECU, ECU_BOOT);
 8001f94:	4622      	mov	r2, r4
 8001f96:	4621      	mov	r1, r4
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f7ff fda1 	bl	8001ae0 <SYS_LOG>
  ret = SERIAL_SETUP();
 8001f9e:	f000 feed 	bl	8002d7c <SERIAL_SETUP>
  if (ret == SYS_OK) {
 8001fa2:	b100      	cbz	r0, 8001fa6 <main+0xbe>
    syslog.value[0] = (uint8_t)ret;
 8001fa4:	7228      	strb	r0, [r5, #8]
  ret = TELEMETRY_SETUP();
 8001fa6:	f7ff fc4b 	bl	8001840 <TELEMETRY_SETUP>
  if (ret == SYS_OK) {
 8001faa:	4604      	mov	r4, r0
 8001fac:	2800      	cmp	r0, #0
 8001fae:	f040 8125 	bne.w	80021fc <main+0x314>
    sys_state.TELEMETRY = true;
 8001fb2:	2701      	movs	r7, #1
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_SET);
 8001fb4:	463a      	mov	r2, r7
 8001fb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fba:	489c      	ldr	r0, [pc, #624]	@ (800222c <main+0x344>)
    sys_state.TELEMETRY = true;
 8001fbc:	70b7      	strb	r7, [r6, #2]
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_SET);
 8001fbe:	f002 faeb 	bl	8004598 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001fc2:	2064      	movs	r0, #100	@ 0x64
 8001fc4:	f001 f902 	bl	80031cc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 8001fc8:	4622      	mov	r2, r4
 8001fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fce:	4897      	ldr	r0, [pc, #604]	@ (800222c <main+0x344>)
 8001fd0:	f002 fae2 	bl	8004598 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001fd4:	2064      	movs	r0, #100	@ 0x64
 8001fd6:	f001 f8f9 	bl	80031cc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_SET);
 8001fda:	463a      	mov	r2, r7
 8001fdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fe0:	4892      	ldr	r0, [pc, #584]	@ (800222c <main+0x344>)
 8001fe2:	f002 fad9 	bl	8004598 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001fe6:	2064      	movs	r0, #100	@ 0x64
 8001fe8:	f001 f8f0 	bl	80031cc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 8001fec:	4622      	mov	r2, r4
 8001fee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ff2:	488e      	ldr	r0, [pc, #568]	@ (800222c <main+0x344>)
 8001ff4:	f002 fad0 	bl	8004598 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001ff8:	2064      	movs	r0, #100	@ 0x64
 8001ffa:	f001 f8e7 	bl	80031cc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_SET);
 8001ffe:	488b      	ldr	r0, [pc, #556]	@ (800222c <main+0x344>)
 8002000:	463a      	mov	r2, r7
 8002002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002006:	f002 fac7 	bl	8004598 <HAL_GPIO_WritePin>
    SYS_LOG(LOG_INFO, ESP, ESP_INIT);
 800200a:	4622      	mov	r2, r4
 800200c:	4639      	mov	r1, r7
 800200e:	2003      	movs	r0, #3
 8002010:	f7ff fd66 	bl	8001ae0 <SYS_LOG>
  ret = CAN_SETUP();
 8002014:	f7ff fa28 	bl	8001468 <CAN_SETUP>
  if (ret == SYS_OK) {
 8002018:	4604      	mov	r4, r0
 800201a:	2800      	cmp	r0, #0
 800201c:	f040 80df 	bne.w	80021de <main+0x2f6>
    sys_state.CAN = true;
 8002020:	2201      	movs	r2, #1
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_SET);
 8002022:	4882      	ldr	r0, [pc, #520]	@ (800222c <main+0x344>)
    sys_state.CAN = true;
 8002024:	70f2      	strb	r2, [r6, #3]
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_SET);
 8002026:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800202a:	f002 fab5 	bl	8004598 <HAL_GPIO_WritePin>
    SYS_LOG(LOG_INFO, CAN, CAN_INIT);
 800202e:	4622      	mov	r2, r4
 8002030:	2102      	movs	r1, #2
 8002032:	2003      	movs	r0, #3
 8002034:	f7ff fd54 	bl	8001ae0 <SYS_LOG>
  ret = DIGITAL_SETUP();
 8002038:	f7ff fb40 	bl	80016bc <DIGITAL_SETUP>
  if (ret == SYS_OK) {
 800203c:	b100      	cbz	r0, 8002040 <main+0x158>
    syslog.value[0] = (uint8_t)ret;
 800203e:	7228      	strb	r0, [r5, #8]
  ret = ANALOG_SETUP();
 8002040:	f7fe ffb6 	bl	8000fb0 <ANALOG_SETUP>
  if (ret == SYS_OK) {
 8002044:	4603      	mov	r3, r0
 8002046:	2800      	cmp	r0, #0
 8002048:	f040 80b4 	bne.w	80021b4 <main+0x2cc>
    SYS_LOG(LOG_INFO, ANALOG, ADC_INIT);
 800204c:	2103      	movs	r1, #3
 800204e:	4602      	mov	r2, r0
 8002050:	4608      	mov	r0, r1
 8002052:	f7ff fd45 	bl	8001ae0 <SYS_LOG>
  ret = ACCELEROMETER_SETUP();
 8002056:	f7ff fc4f 	bl	80018f8 <ACCELEROMETER_SETUP>
  if (ret == SYS_OK) {
 800205a:	4603      	mov	r3, r0
 800205c:	2800      	cmp	r0, #0
 800205e:	f040 80b7 	bne.w	80021d0 <main+0x2e8>
    SYS_LOG(LOG_INFO, ACC, ACC_INIT);
 8002062:	4602      	mov	r2, r0
 8002064:	2105      	movs	r1, #5
 8002066:	2003      	movs	r0, #3
 8002068:	f7ff fd3a 	bl	8001ae0 <SYS_LOG>
  ret = GPS_SETUP();
 800206c:	f000 ff7c 	bl	8002f68 <GPS_SETUP>
  if (ret == SYS_OK) {
 8002070:	4603      	mov	r3, r0
 8002072:	2800      	cmp	r0, #0
 8002074:	f040 80a5 	bne.w	80021c2 <main+0x2da>
    SYS_LOG(LOG_INFO, GPS, GPS_INIT);
 8002078:	4602      	mov	r2, r0
 800207a:	2107      	movs	r1, #7
 800207c:	2003      	movs	r0, #3
 800207e:	f7ff fd2f 	bl	8001ae0 <SYS_LOG>
  SYS_LOG(LOG_INFO, ECU, ECU_READY);
 8002082:	2202      	movs	r2, #2
 8002084:	2100      	movs	r1, #0
 8002086:	2003      	movs	r0, #3
 8002088:	f7ff fd2a 	bl	8001ae0 <SYS_LOG>
  HAL_TIM_Base_Start_IT(&htim1); // start 100ms periodic timer
 800208c:	486a      	ldr	r0, [pc, #424]	@ (8002238 <main+0x350>)
 800208e:	4c6b      	ldr	r4, [pc, #428]	@ (800223c <main+0x354>)
 8002090:	4f6b      	ldr	r7, [pc, #428]	@ (8002240 <main+0x358>)
 8002092:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8002258 <main+0x370>
 8002096:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800225c <main+0x374>
 800209a:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8002260 <main+0x378>
 800209e:	4e69      	ldr	r6, [pc, #420]	@ (8002244 <main+0x35c>)
    HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin, GPIO_PIN_SET);
 80020a0:	f8df a188 	ldr.w	sl, [pc, #392]	@ 800222c <main+0x344>
  HAL_TIM_Base_Start_IT(&htim1); // start 100ms periodic timer
 80020a4:	f004 ffba 	bl	800701c <HAL_TIM_Base_Start_IT>
    if (adc_flag & (1 << FLAG_ADC_SYS)) {
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	0799      	lsls	r1, r3, #30
 80020ac:	d433      	bmi.n	8002116 <main+0x22e>
    if (adc_flag & (1 << FLAG_ADC_AIN)) {
 80020ae:	075a      	lsls	r2, r3, #29
 80020b0:	d50f      	bpl.n	80020d2 <main+0x1ea>
      adc_flag &= ~(1 << FLAG_ADC_AIN);
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	6023      	str	r3, [r4, #0]
      if (adc_ain_value[0] >= 1) {
 80020b8:	883b      	ldrh	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d172      	bne.n	80021a4 <main+0x2bc>
      *(uint16_t *)(syslog.value + 0) = (uint16_t)adc_ain_value[0];
 80020be:	812b      	strh	r3, [r5, #8]
      SYS_LOG(LOG_INFO, ANALOG, ADC_DIST);
 80020c0:	2103      	movs	r1, #3
      *(uint16_t *)(syslog.value + 2) = (uint16_t)adc_ain_value[1];
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	816b      	strh	r3, [r5, #10]
      SYS_LOG(LOG_INFO, ANALOG, ADC_DIST);
 80020c6:	2202      	movs	r2, #2
      *(uint16_t *)(syslog.value + 4) = (uint16_t)adc_ain_value[2];
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	60eb      	str	r3, [r5, #12]
      SYS_LOG(LOG_INFO, ANALOG, ADC_DIST);
 80020cc:	4608      	mov	r0, r1
 80020ce:	f7ff fd07 	bl	8001ae0 <SYS_LOG>
    HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin, GPIO_PIN_SET);
 80020d2:	4650      	mov	r0, sl
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020da:	f002 fa5d 	bl	8004598 <HAL_GPIO_WritePin>
    if (adc_flag & (1 << FLAG_ADC_AIN2)) {
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	0718      	lsls	r0, r3, #28
 80020e2:	d42c      	bmi.n	800213e <main+0x256>
    if (accelerometer_flag == true) {
 80020e4:	f8d9 2000 	ldr.w	r2, [r9]
 80020e8:	2a01      	cmp	r2, #1
 80020ea:	d03a      	beq.n	8002162 <main+0x27a>
    if (gps_flag == true) {
 80020ec:	f8d8 3000 	ldr.w	r3, [r8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d046      	beq.n	8002182 <main+0x29a>
    SD_WRITE();
 80020f4:	f000 fa2e 	bl	8002554 <SD_WRITE>
    TELEMETRY_TRANSMIT_LOG();
 80020f8:	f7ff fbda 	bl	80018b0 <TELEMETRY_TRANSMIT_LOG>
    if (timer_flag & (1 << FLAG_TIMER_100ms)) {
 80020fc:	6833      	ldr	r3, [r6, #0]
 80020fe:	07d9      	lsls	r1, r3, #31
 8002100:	d416      	bmi.n	8002130 <main+0x248>
    if (timer_flag & (1 << FLAG_TIMER_1s)) {
 8002102:	079a      	lsls	r2, r3, #30
 8002104:	d5d0      	bpl.n	80020a8 <main+0x1c0>
      timer_flag &= ~(1 << FLAG_TIMER_1s);
 8002106:	f023 0302 	bic.w	r3, r3, #2
 800210a:	6033      	str	r3, [r6, #0]
      TIMER_1s();
 800210c:	f7ff febe 	bl	8001e8c <TIMER_1s>
    if (adc_flag & (1 << FLAG_ADC_SYS)) {
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	0799      	lsls	r1, r3, #30
 8002114:	d5cb      	bpl.n	80020ae <main+0x1c6>
      adc_flag &= ~(1 << FLAG_ADC_SYS);
 8002116:	f023 0302 	bic.w	r3, r3, #2
 800211a:	6023      	str	r3, [r4, #0]
      *(uint16_t *)(syslog.value + 0) = (uint16_t)adc_sys_value[0];
 800211c:	4b4a      	ldr	r3, [pc, #296]	@ (8002248 <main+0x360>)
      SYS_LOG(LOG_INFO, ANALOG, ADC_CPU);
 800211e:	2103      	movs	r1, #3
      *(uint16_t *)(syslog.value + 0) = (uint16_t)adc_sys_value[0];
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60ab      	str	r3, [r5, #8]
      SYS_LOG(LOG_INFO, ANALOG, ADC_CPU);
 8002124:	2201      	movs	r2, #1
 8002126:	4608      	mov	r0, r1
 8002128:	f7ff fcda 	bl	8001ae0 <SYS_LOG>
    if (adc_flag & (1 << FLAG_ADC_AIN)) {
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	e7be      	b.n	80020ae <main+0x1c6>
      timer_flag &= ~(1 << FLAG_TIMER_100ms);
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6033      	str	r3, [r6, #0]
      TIMER_100ms();
 8002136:	f7ff fe6f 	bl	8001e18 <TIMER_100ms>
    if (timer_flag & (1 << FLAG_TIMER_1s)) {
 800213a:	6833      	ldr	r3, [r6, #0]
 800213c:	e7e1      	b.n	8002102 <main+0x21a>
      adc_flag &= ~(1 << FLAG_ADC_AIN2);
 800213e:	f023 0308 	bic.w	r3, r3, #8
      SYS_LOG(LOG_INFO, ANALOG, ADC_A3);
 8002142:	2203      	movs	r2, #3
      adc_flag &= ~(1 << FLAG_ADC_AIN2);
 8002144:	6023      	str	r3, [r4, #0]
      *(uint16_t *)(syslog.value + 0) = (uint16_t)adc_ain_value2[0];
 8002146:	f8db 3004 	ldr.w	r3, [fp, #4]
 800214a:	60eb      	str	r3, [r5, #12]
      SYS_LOG(LOG_INFO, ANALOG, ADC_A3);
 800214c:	4611      	mov	r1, r2
      *(uint16_t *)(syslog.value + 0) = (uint16_t)adc_ain_value2[0];
 800214e:	f8db 3000 	ldr.w	r3, [fp]
 8002152:	60ab      	str	r3, [r5, #8]
      SYS_LOG(LOG_INFO, ANALOG, ADC_A3);
 8002154:	4610      	mov	r0, r2
 8002156:	f7ff fcc3 	bl	8001ae0 <SYS_LOG>
    if (accelerometer_flag == true) {
 800215a:	f8d9 2000 	ldr.w	r2, [r9]
 800215e:	2a01      	cmp	r2, #1
 8002160:	d1c4      	bne.n	80020ec <main+0x204>
      *(uint64_t *)syslog.value = *(uint64_t *)accelerometer_value;
 8002162:	493a      	ldr	r1, [pc, #232]	@ (800224c <main+0x364>)
 8002164:	680b      	ldr	r3, [r1, #0]
 8002166:	60ab      	str	r3, [r5, #8]
 8002168:	684b      	ldr	r3, [r1, #4]
 800216a:	60eb      	str	r3, [r5, #12]
      SYS_LOG(LOG_INFO, ACC, ACC_DATA);
 800216c:	2105      	movs	r1, #5
      accelerometer_flag = false;
 800216e:	2300      	movs	r3, #0
      SYS_LOG(LOG_INFO, ACC, ACC_DATA);
 8002170:	2003      	movs	r0, #3
      accelerometer_flag = false;
 8002172:	f8c9 3000 	str.w	r3, [r9]
      SYS_LOG(LOG_INFO, ACC, ACC_DATA);
 8002176:	f7ff fcb3 	bl	8001ae0 <SYS_LOG>
    if (gps_flag == true) {
 800217a:	f8d8 3000 	ldr.w	r3, [r8]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d1b8      	bne.n	80020f4 <main+0x20c>
      gps_flag = false;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c8 3000 	str.w	r3, [r8]
  if (!strncmp((char *)gps_data, "$GPRMC", 6)) {
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <main+0x368>)
 800218a:	4a32      	ldr	r2, [pc, #200]	@ (8002254 <main+0x36c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4293      	cmp	r3, r2
 8002190:	d1b0      	bne.n	80020f4 <main+0x20c>
 8002192:	4b2f      	ldr	r3, [pc, #188]	@ (8002250 <main+0x368>)
 8002194:	889a      	ldrh	r2, [r3, #4]
 8002196:	f244 334d 	movw	r3, #17229	@ 0x434d
 800219a:	429a      	cmp	r2, r3
 800219c:	d1aa      	bne.n	80020f4 <main+0x20c>
 800219e:	f7ff fd03 	bl	8001ba8 <GPS_PARSE.part.0>
 80021a2:	e7a7      	b.n	80020f4 <main+0x20c>
    	    HAL_GPIO_WritePin(GPIOE, LED_ERR_SYS_Pin, GPIO_PIN_SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021aa:	4650      	mov	r0, sl
 80021ac:	f002 f9f4 	bl	8004598 <HAL_GPIO_WritePin>
      *(uint16_t *)(syslog.value + 0) = (uint16_t)adc_ain_value[0];
 80021b0:	883b      	ldrh	r3, [r7, #0]
 80021b2:	e784      	b.n	80020be <main+0x1d6>
    SYS_LOG(LOG_ERROR, ANALOG, ADC_INIT);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2103      	movs	r1, #3
 80021b8:	2001      	movs	r0, #1
    syslog.value[0] = (uint8_t)ret;
 80021ba:	722b      	strb	r3, [r5, #8]
    SYS_LOG(LOG_ERROR, ANALOG, ADC_INIT);
 80021bc:	f7ff fc90 	bl	8001ae0 <SYS_LOG>
 80021c0:	e749      	b.n	8002056 <main+0x16e>
    SYS_LOG(LOG_ERROR, GPS, GPS_INIT);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2107      	movs	r1, #7
 80021c6:	2001      	movs	r0, #1
    syslog.value[0] = (uint8_t)ret;
 80021c8:	722b      	strb	r3, [r5, #8]
    SYS_LOG(LOG_ERROR, GPS, GPS_INIT);
 80021ca:	f7ff fc89 	bl	8001ae0 <SYS_LOG>
 80021ce:	e758      	b.n	8002082 <main+0x19a>
    SYS_LOG(LOG_ERROR, ACC, ACC_INIT);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2105      	movs	r1, #5
 80021d4:	2001      	movs	r0, #1
    syslog.value[0] = (uint8_t)ret;
 80021d6:	722b      	strb	r3, [r5, #8]
    SYS_LOG(LOG_ERROR, ACC, ACC_INIT);
 80021d8:	f7ff fc82 	bl	8001ae0 <SYS_LOG>
 80021dc:	e746      	b.n	800206c <main+0x184>
    sys_state.CAN = false;
 80021de:	2700      	movs	r7, #0
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 80021e0:	463a      	mov	r2, r7
 80021e2:	4812      	ldr	r0, [pc, #72]	@ (800222c <main+0x344>)
    sys_state.CAN = false;
 80021e4:	70f7      	strb	r7, [r6, #3]
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 80021e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021ea:	f002 f9d5 	bl	8004598 <HAL_GPIO_WritePin>
    SYS_LOG(LOG_ERROR, CAN, CAN_INIT);
 80021ee:	463a      	mov	r2, r7
 80021f0:	2102      	movs	r1, #2
 80021f2:	2001      	movs	r0, #1
    syslog.value[0] = (uint8_t)ret;
 80021f4:	722c      	strb	r4, [r5, #8]
    SYS_LOG(LOG_ERROR, CAN, CAN_INIT);
 80021f6:	f7ff fc73 	bl	8001ae0 <SYS_LOG>
 80021fa:	e71d      	b.n	8002038 <main+0x150>
    sys_state.TELEMETRY = false;
 80021fc:	2700      	movs	r7, #0
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 80021fe:	463a      	mov	r2, r7
 8002200:	480a      	ldr	r0, [pc, #40]	@ (800222c <main+0x344>)
    sys_state.TELEMETRY = false;
 8002202:	70b7      	strb	r7, [r6, #2]
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 8002204:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002208:	f002 f9c6 	bl	8004598 <HAL_GPIO_WritePin>
    SYS_LOG(LOG_ERROR, ESP, ESP_INIT);
 800220c:	2101      	movs	r1, #1
 800220e:	463a      	mov	r2, r7
 8002210:	4608      	mov	r0, r1
    syslog.value[0] = (uint8_t)ret;
 8002212:	722c      	strb	r4, [r5, #8]
    SYS_LOG(LOG_ERROR, ESP, ESP_INIT);
 8002214:	f7ff fc64 	bl	8001ae0 <SYS_LOG>
 8002218:	e6fc      	b.n	8002014 <main+0x12c>
 800221a:	bf00      	nop
 800221c:	200005fc 	.word	0x200005fc
 8002220:	200045fc 	.word	0x200045fc
 8002224:	20008658 	.word	0x20008658
 8002228:	2000865c 	.word	0x2000865c
 800222c:	40021000 	.word	0x40021000
 8002230:	20008638 	.word	0x20008638
 8002234:	20009ad8 	.word	0x20009ad8
 8002238:	200099e8 	.word	0x200099e8
 800223c:	200005d4 	.word	0x200005d4
 8002240:	200005c8 	.word	0x200005c8
 8002244:	20008654 	.word	0x20008654
 8002248:	200005d0 	.word	0x200005d0
 800224c:	200005b4 	.word	0x200005b4
 8002250:	20000530 	.word	0x20000530
 8002254:	52504724 	.word	0x52504724
 8002258:	200005c0 	.word	0x200005c0
 800225c:	200005bc 	.word	0x200005bc
 8002260:	200005b0 	.word	0x200005b0

08002264 <Error_Handler>:
 8002264:	b672      	cpsid	i
  while (1) {
 8002266:	e7fe      	b.n	8002266 <Error_Handler+0x2>

08002268 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer, char *buf, size_t buf_size) {
 8002268:	b508      	push	{r3, lr}
  RING_BUFFER_ASSERT(RING_BUFFER_IS_POWER_OF_TWO(buf_size) == 1);
 800226a:	1e53      	subs	r3, r2, #1
 800226c:	401a      	ands	r2, r3
 800226e:	d104      	bne.n	800227a <ring_buffer_init+0x12>
  buffer->buffer = buf;
  buffer->buffer_mask = buf_size - 1;
 8002270:	e9c0 1300 	strd	r1, r3, [r0]
  buffer->tail_index = 0;
  buffer->head_index = 0;
 8002274:	e9c0 2202 	strd	r2, r2, [r0, #8]
}
 8002278:	bd08      	pop	{r3, pc}
  RING_BUFFER_ASSERT(RING_BUFFER_IS_POWER_OF_TWO(buf_size) == 1);
 800227a:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <ring_buffer_init+0x20>)
 800227c:	4a03      	ldr	r2, [pc, #12]	@ (800228c <ring_buffer_init+0x24>)
 800227e:	4804      	ldr	r0, [pc, #16]	@ (8002290 <ring_buffer_init+0x28>)
 8002280:	2109      	movs	r1, #9
 8002282:	f006 ff6f 	bl	8009164 <__assert_func>
 8002286:	bf00      	nop
 8002288:	0800bf60 	.word	0x0800bf60
 800228c:	0800bfa4 	.word	0x0800bfa4
 8002290:	0800bf88 	.word	0x0800bf88

08002294 <ring_buffer_queue_arr>:
}

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 8002294:	b1da      	cbz	r2, 80022ce <ring_buffer_queue_arr+0x3a>
void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 8002296:	b530      	push	{r4, r5, lr}
 8002298:	440a      	add	r2, r1
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK(buffer)) == RING_BUFFER_MASK(buffer);
 800229a:	68c3      	ldr	r3, [r0, #12]
 800229c:	6844      	ldr	r4, [r0, #4]
 800229e:	3901      	subs	r1, #1
 80022a0:	1e55      	subs	r5, r2, #1
 80022a2:	6882      	ldr	r2, [r0, #8]
    ring_buffer_queue(buffer, data[i]);
 80022a4:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 80022a8:	eba3 0c02 	sub.w	ip, r3, r2
  if(ring_buffer_is_full(buffer)) {
 80022ac:	ea34 0c0c 	bics.w	ip, r4, ip
 80022b0:	d102      	bne.n	80022b8 <ring_buffer_queue_arr+0x24>
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 80022b2:	3201      	adds	r2, #1
 80022b4:	4022      	ands	r2, r4
 80022b6:	6082      	str	r2, [r0, #8]
  buffer->buffer[buffer->head_index] = data;
 80022b8:	6802      	ldr	r2, [r0, #0]
 80022ba:	f802 e003 	strb.w	lr, [r2, r3]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK(buffer));
 80022be:	68c3      	ldr	r3, [r0, #12]
 80022c0:	6844      	ldr	r4, [r0, #4]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4023      	ands	r3, r4
  for(i = 0; i < size; i++) {
 80022c6:	428d      	cmp	r5, r1
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK(buffer));
 80022c8:	60c3      	str	r3, [r0, #12]
  for(i = 0; i < size; i++) {
 80022ca:	d1ea      	bne.n	80022a2 <ring_buffer_queue_arr+0xe>
  }
}
 80022cc:	bd30      	pop	{r4, r5, pc}
 80022ce:	4770      	bx	lr

080022d0 <ring_buffer_dequeue_arr>:
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
  return 1;
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 80022d0:	4684      	mov	ip, r0
  if(ring_buffer_is_empty(buffer)) {
 80022d2:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
 80022d6:	4298      	cmp	r0, r3
 80022d8:	d01a      	beq.n	8002310 <ring_buffer_dequeue_arr+0x40>
    return 0;
  }

  char *data_ptr = data;
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 80022da:	b1ca      	cbz	r2, 8002310 <ring_buffer_dequeue_arr+0x40>
ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 80022dc:	b410      	push	{r4}
 80022de:	3901      	subs	r1, #1
  ring_buffer_size_t cnt = 0;
 80022e0:	2000      	movs	r0, #0
  *data = buffer->buffer[buffer->tail_index];
 80022e2:	f8dc 4000 	ldr.w	r4, [ip]
 80022e6:	5ce3      	ldrb	r3, [r4, r3]
 80022e8:	f801 3f01 	strb.w	r3, [r1, #1]!
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 80022ec:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80022f0:	f8dc 4004 	ldr.w	r4, [ip, #4]
    cnt++;
 80022f4:	3001      	adds	r0, #1
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 80022f6:	3301      	adds	r3, #1
 80022f8:	4023      	ands	r3, r4
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 80022fa:	4282      	cmp	r2, r0
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 80022fc:	f8cc 3008 	str.w	r3, [ip, #8]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8002300:	d003      	beq.n	800230a <ring_buffer_dequeue_arr+0x3a>
  if(ring_buffer_is_empty(buffer)) {
 8002302:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8002306:	42a3      	cmp	r3, r4
 8002308:	d1eb      	bne.n	80022e2 <ring_buffer_dequeue_arr+0x12>
    data_ptr++;
  }
  return cnt;
}
 800230a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800230e:	4770      	bx	lr
    return 0;
 8002310:	2000      	movs	r0, #0
 8002312:	4770      	bx	lr

08002314 <RTC_FIX>:
/* USER CODE BEGIN 0 */
extern LOG syslog;

extern uint8_t rtc[25];

void RTC_FIX(int source) {
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t cnt = 0;

  RTC_DateTypeDef RTC_DATE;
  RTC_TimeTypeDef RTC_TIME;

  while (*ptr && cnt < 6) {
 8002316:	4c40      	ldr	r4, [pc, #256]	@ (8002418 <RTC_FIX+0x104>)
 8002318:	78a3      	ldrb	r3, [r4, #2]
void RTC_FIX(int source) {
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	4606      	mov	r6, r0
  while (*ptr && cnt < 6) {
 800231e:	b1c3      	cbz	r3, 8002352 <RTC_FIX+0x3e>
  int32_t cnt = 0;
 8002320:	2500      	movs	r5, #0
 8002322:	3402      	adds	r4, #2
    strncpy((char *)tmp, (char *)ptr, 3);
    tmp[2] = '\0';
 8002324:	462f      	mov	r7, r5
    strncpy((char *)tmp, (char *)ptr, 3);
 8002326:	2202      	movs	r2, #2
 8002328:	4621      	mov	r1, r4
 800232a:	a801      	add	r0, sp, #4
 800232c:	f007 fec5 	bl	800a0ba <strncpy>

    switch (cnt) {
 8002330:	1e6b      	subs	r3, r5, #1
    tmp[2] = '\0';
 8002332:	f88d 7006 	strb.w	r7, [sp, #6]
    switch (cnt) {
 8002336:	2b04      	cmp	r3, #4
 8002338:	d852      	bhi.n	80023e0 <RTC_FIX+0xcc>
 800233a:	e8df f003 	tbb	[pc, r3]
 800233e:	4964      	.short	0x4964
 8002340:	3441      	.short	0x3441
 8002342:	03          	.byte	0x03
 8002343:	00          	.byte	0x00
      case 0: RTC_DATE.Year    = (uint8_t)strtol((char *)tmp, NULL, 10); break;
      case 1: RTC_DATE.Month   = (uint8_t)strtol((char *)tmp, NULL, 16); break;
      case 2: RTC_DATE.Date    = (uint8_t)strtol((char *)tmp, NULL, 10); break;
      case 3: RTC_TIME.Hours   = (uint8_t)strtol((char *)tmp, NULL, 10); break;
      case 4: RTC_TIME.Minutes = (uint8_t)strtol((char *)tmp, NULL, 10); break;
      case 5: RTC_TIME.Seconds = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 8002344:	220a      	movs	r2, #10
 8002346:	2100      	movs	r1, #0
 8002348:	a801      	add	r0, sp, #4
 800234a:	f007 fe6f 	bl	800a02c <strtol>
 800234e:	f88d 000e 	strb.w	r0, [sp, #14]
    ptr += 3;
    cnt++;
  }

  // set weekday; required for accurate year value
  RTC_DATE.WeekDay = 0;
 8002352:	2400      	movs	r4, #0

  HAL_RTC_SetTime(&hrtc, &RTC_TIME, FORMAT_BIN);
 8002354:	a903      	add	r1, sp, #12
 8002356:	4622      	mov	r2, r4
 8002358:	4830      	ldr	r0, [pc, #192]	@ (800241c <RTC_FIX+0x108>)
  RTC_DATE.WeekDay = 0;
 800235a:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_RTC_SetTime(&hrtc, &RTC_TIME, FORMAT_BIN);
 800235e:	f004 f861 	bl	8006424 <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &RTC_DATE, FORMAT_BIN);
 8002362:	4622      	mov	r2, r4
 8002364:	a902      	add	r1, sp, #8
 8002366:	482d      	ldr	r0, [pc, #180]	@ (800241c <RTC_FIX+0x108>)
 8002368:	f004 f8de 	bl	8006528 <HAL_RTC_SetDate>

  syslog.value[0] = RTC_DATE.Year;
 800236c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002370:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002374:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8002378:	f361 0407 	bfi	r4, r1, #0, #8
 800237c:	f363 240f 	bfi	r4, r3, #8, #8
 8002380:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002384:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <RTC_FIX+0x10c>)
 8002386:	f360 4417 	bfi	r4, r0, #16, #8
  syslog.value[1] = RTC_DATE.Month;
  syslog.value[2] = RTC_DATE.Date;
  syslog.value[3] = RTC_TIME.Hours;
  syslog.value[4] = RTC_TIME.Minutes;
 800238a:	f8bd 000d 	ldrh.w	r0, [sp, #13]
 800238e:	8198      	strh	r0, [r3, #12]
  syslog.value[0] = RTC_DATE.Year;
 8002390:	f361 641f 	bfi	r4, r1, #24, #8
  syslog.value[5] = RTC_TIME.Seconds;
  syslog.value[6] = source;
  SYS_LOG(LOG_INFO, ESP, ESP_RTC_FIX);
 8002394:	2202      	movs	r2, #2
 8002396:	2101      	movs	r1, #1
 8002398:	2003      	movs	r0, #3
  syslog.value[0] = RTC_DATE.Year;
 800239a:	609c      	str	r4, [r3, #8]
  syslog.value[6] = source;
 800239c:	739e      	strb	r6, [r3, #14]
  SYS_LOG(LOG_INFO, ESP, ESP_RTC_FIX);
 800239e:	f7ff fb9f 	bl	8001ae0 <SYS_LOG>



  return;
}
 80023a2:	b009      	add	sp, #36	@ 0x24
 80023a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case 4: RTC_TIME.Minutes = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 80023a6:	220a      	movs	r2, #10
 80023a8:	2100      	movs	r1, #0
 80023aa:	a801      	add	r0, sp, #4
 80023ac:	f007 fe3e 	bl	800a02c <strtol>
 80023b0:	f88d 000d 	strb.w	r0, [sp, #13]
  while (*ptr && cnt < 6) {
 80023b4:	78e3      	ldrb	r3, [r4, #3]
    cnt++;
 80023b6:	3501      	adds	r5, #1
  while (*ptr && cnt < 6) {
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ca      	beq.n	8002352 <RTC_FIX+0x3e>
 80023bc:	3403      	adds	r4, #3
 80023be:	e7b2      	b.n	8002326 <RTC_FIX+0x12>
      case 3: RTC_TIME.Hours   = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 80023c0:	220a      	movs	r2, #10
 80023c2:	2100      	movs	r1, #0
 80023c4:	a801      	add	r0, sp, #4
 80023c6:	f007 fe31 	bl	800a02c <strtol>
 80023ca:	f88d 000c 	strb.w	r0, [sp, #12]
 80023ce:	e7f1      	b.n	80023b4 <RTC_FIX+0xa0>
      case 2: RTC_DATE.Date    = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 80023d0:	220a      	movs	r2, #10
 80023d2:	2100      	movs	r1, #0
 80023d4:	a801      	add	r0, sp, #4
 80023d6:	f007 fe29 	bl	800a02c <strtol>
 80023da:	f88d 000a 	strb.w	r0, [sp, #10]
 80023de:	e7e9      	b.n	80023b4 <RTC_FIX+0xa0>
      case 0: RTC_DATE.Year    = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 80023e0:	220a      	movs	r2, #10
 80023e2:	2100      	movs	r1, #0
 80023e4:	a801      	add	r0, sp, #4
 80023e6:	f007 fe21 	bl	800a02c <strtol>
  while (*ptr && cnt < 6) {
 80023ea:	78e3      	ldrb	r3, [r4, #3]
      case 0: RTC_DATE.Year    = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 80023ec:	f88d 000b 	strb.w	r0, [sp, #11]
  while (*ptr && cnt < 6) {
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ae      	beq.n	8002352 <RTC_FIX+0x3e>
 80023f4:	3403      	adds	r4, #3
    strncpy((char *)tmp, (char *)ptr, 3);
 80023f6:	2202      	movs	r2, #2
 80023f8:	4621      	mov	r1, r4
 80023fa:	a801      	add	r0, sp, #4
 80023fc:	f007 fe5d 	bl	800a0ba <strncpy>
    tmp[2] = '\0';
 8002400:	2300      	movs	r3, #0
 8002402:	f88d 3006 	strb.w	r3, [sp, #6]
      case 1: RTC_DATE.Month   = (uint8_t)strtol((char *)tmp, NULL, 16); break;
 8002406:	2210      	movs	r2, #16
 8002408:	2100      	movs	r1, #0
 800240a:	a801      	add	r0, sp, #4
 800240c:	f007 fe0e 	bl	800a02c <strtol>
 8002410:	2501      	movs	r5, #1
 8002412:	f88d 0009 	strb.w	r0, [sp, #9]
 8002416:	e7cd      	b.n	80023b4 <RTC_FIX+0xa0>
 8002418:	20008638 	.word	0x20008638
 800241c:	2000969c 	.word	0x2000969c
 8002420:	2000865c 	.word	0x2000865c

08002424 <RTC_READ>:

void RTC_READ(DATETIME *boot) {
 8002424:	b530      	push	{r4, r5, lr}
  RTC_DateTypeDef RTC_DATE;
  RTC_TimeTypeDef RTC_TIME;

  HAL_RTC_GetTime(&hrtc, &RTC_TIME, FORMAT_BIN);
 8002426:	4d12      	ldr	r5, [pc, #72]	@ (8002470 <RTC_READ+0x4c>)
void RTC_READ(DATETIME *boot) {
 8002428:	b087      	sub	sp, #28
 800242a:	4604      	mov	r4, r0
  HAL_RTC_GetTime(&hrtc, &RTC_TIME, FORMAT_BIN);
 800242c:	a901      	add	r1, sp, #4
 800242e:	2200      	movs	r2, #0
 8002430:	4628      	mov	r0, r5
 8002432:	f003 fefb 	bl	800622c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &RTC_DATE, FORMAT_BIN);
 8002436:	4669      	mov	r1, sp
 8002438:	2200      	movs	r2, #0
 800243a:	4628      	mov	r0, r5
 800243c:	f003 ff32 	bl	80062a4 <HAL_RTC_GetDate>
  boot->second = RTC_TIME.Seconds;
  boot->minute = RTC_TIME.Minutes;
  boot->hour = RTC_TIME.Hours;
  boot->date = RTC_DATE.Date;
  boot->month = RTC_DATE.Month;
  boot->year = RTC_DATE.Year;
 8002440:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002444:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8002448:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800244c:	2300      	movs	r3, #0
 800244e:	f360 0307 	bfi	r3, r0, #0, #8
 8002452:	f361 230f 	bfi	r3, r1, #8, #8
 8002456:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800245a:	f362 4317 	bfi	r3, r2, #16, #8
  boot->minute = RTC_TIME.Minutes;
 800245e:	f8bd 2005 	ldrh.w	r2, [sp, #5]
 8002462:	80a2      	strh	r2, [r4, #4]
  boot->year = RTC_DATE.Year;
 8002464:	f361 631f 	bfi	r3, r1, #24, #8
 8002468:	6023      	str	r3, [r4, #0]

  return;
}
 800246a:	b007      	add	sp, #28
 800246c:	bd30      	pop	{r4, r5, pc}
 800246e:	bf00      	nop
 8002470:	2000969c 	.word	0x2000969c

08002474 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002474:	b500      	push	{lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002476:	4822      	ldr	r0, [pc, #136]	@ (8002500 <MX_RTC_Init+0x8c>)
 8002478:	4922      	ldr	r1, [pc, #136]	@ (8002504 <MX_RTC_Init+0x90>)
{
 800247a:	b087      	sub	sp, #28
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 800247c:	227f      	movs	r2, #127	@ 0x7f
  RTC_TimeTypeDef sTime = {0};
 800247e:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = 127;
 8002480:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8002482:	22ff      	movs	r2, #255	@ 0xff
  RTC_TimeTypeDef sTime = {0};
 8002484:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002488:	e9cd 3303 	strd	r3, r3, [sp, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800248c:	e9c0 1300 	strd	r1, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002490:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002494:	e9c0 3305 	strd	r3, r3, [r0, #20]
  RTC_TimeTypeDef sTime = {0};
 8002498:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 800249a:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800249c:	f003 ff7c 	bl	8006398 <HAL_RTC_Init>
 80024a0:	bb58      	cbnz	r0, 80024fa <MX_RTC_Init+0x86>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xCAFE) {
 80024a2:	4817      	ldr	r0, [pc, #92]	@ (8002500 <MX_RTC_Init+0x8c>)
 80024a4:	2100      	movs	r1, #0
 80024a6:	f004 f8bd 	bl	8006624 <HAL_RTCEx_BKUPRead>
 80024aa:	f64c 22fe 	movw	r2, #51966	@ 0xcafe
 80024ae:	4290      	cmp	r0, r2
 80024b0:	d018      	beq.n	80024e4 <MX_RTC_Init+0x70>
    return;
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xCAFE);
 80024b2:	4813      	ldr	r0, [pc, #76]	@ (8002500 <MX_RTC_Init+0x8c>)
 80024b4:	2100      	movs	r1, #0
 80024b6:	f004 f8af 	bl	8006618 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80024ba:	2300      	movs	r3, #0
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024bc:	4810      	ldr	r0, [pc, #64]	@ (8002500 <MX_RTC_Init+0x8c>)
  sTime.Hours = 0x0;
 80024be:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024c2:	2201      	movs	r2, #1
 80024c4:	a901      	add	r1, sp, #4
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  sTime.Seconds = 0x0;
 80024ca:	f88d 3006 	strb.w	r3, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024ce:	f003 ffa9 	bl	8006424 <HAL_RTC_SetTime>
 80024d2:	b978      	cbnz	r0, 80024f4 <MX_RTC_Init+0x80>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <MX_RTC_Init+0x94>)
  sDate.Month = RTC_MONTH_MAY;
  sDate.Date = 0x12;
  sDate.Year = 0x23;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024d6:	480a      	ldr	r0, [pc, #40]	@ (8002500 <MX_RTC_Init+0x8c>)
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80024d8:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024da:	2201      	movs	r2, #1
 80024dc:	4669      	mov	r1, sp
 80024de:	f004 f823 	bl	8006528 <HAL_RTC_SetDate>
 80024e2:	b910      	cbnz	r0, 80024ea <MX_RTC_Init+0x76>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024e4:	b007      	add	sp, #28
 80024e6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80024ea:	f7ff febb 	bl	8002264 <Error_Handler>
}
 80024ee:	b007      	add	sp, #28
 80024f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80024f4:	f7ff feb6 	bl	8002264 <Error_Handler>
 80024f8:	e7ec      	b.n	80024d4 <MX_RTC_Init+0x60>
    Error_Handler();
 80024fa:	f7ff feb3 	bl	8002264 <Error_Handler>
 80024fe:	e7d0      	b.n	80024a2 <MX_RTC_Init+0x2e>
 8002500:	2000969c 	.word	0x2000969c
 8002504:	40002800 	.word	0x40002800
 8002508:	23120505 	.word	0x23120505

0800250c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800250c:	b500      	push	{lr}

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(rtcHandle->Instance==RTC)
 800250e:	4a0f      	ldr	r2, [pc, #60]	@ (800254c <HAL_RTC_MspInit+0x40>)
 8002510:	6801      	ldr	r1, [r0, #0]
{
 8002512:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002514:	2300      	movs	r3, #0
  if(rtcHandle->Instance==RTC)
 8002516:	4291      	cmp	r1, r2
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002518:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if(rtcHandle->Instance==RTC)
 800251c:	d002      	beq.n	8002524 <HAL_RTC_MspInit+0x18>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800251e:	b005      	add	sp, #20
 8002520:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002524:	2202      	movs	r2, #2
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002526:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252a:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800252c:	9200      	str	r2, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800252e:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002530:	f003 fdde 	bl	80060f0 <HAL_RCCEx_PeriphCLKConfig>
 8002534:	b930      	cbnz	r0, 8002544 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_RTC_MspInit+0x44>)
 8002538:	2201      	movs	r2, #1
 800253a:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 800253e:	b005      	add	sp, #20
 8002540:	f85d fb04 	ldr.w	pc, [sp], #4
      Error_Handler();
 8002544:	f7ff fe8e 	bl	8002264 <Error_Handler>
 8002548:	e7f5      	b.n	8002536 <HAL_RTC_MspInit+0x2a>
 800254a:	bf00      	nop
 800254c:	40002800 	.word	0x40002800
 8002550:	42470000 	.word	0x42470000

08002554 <SD_WRITE>:
  HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_SET);

  return SYS_OK;
}

int SD_WRITE(void) {
 8002554:	b570      	push	{r4, r5, r6, lr}
  if (sys_state.SD == false) {
 8002556:	4e13      	ldr	r6, [pc, #76]	@ (80025a4 <SD_WRITE+0x50>)
 8002558:	7873      	ldrb	r3, [r6, #1]
 800255a:	b1fb      	cbz	r3, 800259c <SD_WRITE+0x48>
  return (buffer->head_index == buffer->tail_index);
 800255c:	4c12      	ldr	r4, [pc, #72]	@ (80025a8 <SD_WRITE+0x54>)
    return -1;
  }

  if (ring_buffer_is_empty(&SD_BUFFER)) {
 800255e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002562:	429a      	cmp	r2, r3
 8002564:	d01a      	beq.n	800259c <SD_WRITE+0x48>

  int ret = 0;
  static int32_t written_count;

  while (!ring_buffer_is_empty(&SD_BUFFER)) {
    ring_buffer_dequeue_arr(&SD_BUFFER, (char *)&syslog_buffer, sizeof(LOG));
 8002566:	4d11      	ldr	r5, [pc, #68]	@ (80025ac <SD_WRITE+0x58>)
 8002568:	2210      	movs	r2, #16
 800256a:	4629      	mov	r1, r5
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff feaf 	bl	80022d0 <ring_buffer_dequeue_arr>
    ret = f_write(&logfile, &syslog_buffer, sizeof(LOG), (void *)&written_count);
 8002572:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <SD_WRITE+0x5c>)
 8002574:	480f      	ldr	r0, [pc, #60]	@ (80025b4 <SD_WRITE+0x60>)
 8002576:	2210      	movs	r2, #16
 8002578:	4629      	mov	r1, r5
 800257a:	f006 fc49 	bl	8008e10 <f_write>
  while (!ring_buffer_is_empty(&SD_BUFFER)) {
 800257e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8002582:	429a      	cmp	r2, r3
 8002584:	d1f0      	bne.n	8002568 <SD_WRITE+0x14>
  }

  if (ret != FR_OK) {
 8002586:	4604      	mov	r4, r0
 8002588:	b130      	cbz	r0, 8002598 <SD_WRITE+0x44>
    sys_state.SD = false;
 800258a:	2200      	movs	r2, #0
    HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 800258c:	480a      	ldr	r0, [pc, #40]	@ (80025b8 <SD_WRITE+0x64>)
    sys_state.SD = false;
 800258e:	7072      	strb	r2, [r6, #1]
    HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 8002590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002594:	f002 f800 	bl	8004598 <HAL_GPIO_WritePin>

//    SYS_LOG(LOG_ERROR, SYS, SYS_SD_FAIL);
  }

  return ret;
}
 8002598:	4620      	mov	r0, r4
 800259a:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
 800259c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80025a0:	e7fa      	b.n	8002598 <SD_WRITE+0x44>
 80025a2:	bf00      	nop
 80025a4:	20008658 	.word	0x20008658
 80025a8:	20008628 	.word	0x20008628
 80025ac:	20009804 	.word	0x20009804
 80025b0:	200096bc 	.word	0x200096bc
 80025b4:	2000866c 	.word	0x2000866c
 80025b8:	40021000 	.word	0x40021000

080025bc <SD_SYNC>:

int SD_SYNC(void) {
 80025bc:	b538      	push	{r3, r4, r5, lr}
  if (sys_state.SD == false) {
 80025be:	4d0b      	ldr	r5, [pc, #44]	@ (80025ec <SD_SYNC+0x30>)
 80025c0:	786b      	ldrb	r3, [r5, #1]
 80025c2:	b17b      	cbz	r3, 80025e4 <SD_SYNC+0x28>
    return -1;
  }

  int ret = f_sync(&logfile);
 80025c4:	480a      	ldr	r0, [pc, #40]	@ (80025f0 <SD_SYNC+0x34>)
 80025c6:	f006 fd41 	bl	800904c <f_sync>

  if (ret != FR_OK) {
 80025ca:	4604      	mov	r4, r0
 80025cc:	b908      	cbnz	r0, 80025d2 <SD_SYNC+0x16>

//    SYS_LOG(LOG_ERROR, SYS, SYS_SD_FAIL);
  }

  return ret;
}
 80025ce:	4620      	mov	r0, r4
 80025d0:	bd38      	pop	{r3, r4, r5, pc}
    sys_state.SD = false;
 80025d2:	2200      	movs	r2, #0
    HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 80025d4:	4807      	ldr	r0, [pc, #28]	@ (80025f4 <SD_SYNC+0x38>)
    sys_state.SD = false;
 80025d6:	706a      	strb	r2, [r5, #1]
    HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 80025d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025dc:	f001 ffdc 	bl	8004598 <HAL_GPIO_WritePin>
}
 80025e0:	4620      	mov	r0, r4
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80025e4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80025e8:	e7f1      	b.n	80025ce <SD_SYNC+0x12>
 80025ea:	bf00      	nop
 80025ec:	20008658 	.word	0x20008658
 80025f0:	2000866c 	.word	0x2000866c
 80025f4:	40021000 	.word	0x40021000

080025f8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80025f8:	b410      	push	{r4}
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <MX_SDIO_SD_Init+0x24>)
 80025fc:	4c08      	ldr	r4, [pc, #32]	@ (8002620 <MX_SDIO_SD_Init+0x28>)
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80025fe:	2200      	movs	r2, #0
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8002600:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002604:	210c      	movs	r1, #12
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002606:	e9c3 4200 	strd	r4, r2, [r3]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800260a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 800260e:	e9c3 2004 	strd	r2, r0, [r3, #16]
  hsd.Init.ClockDiv = 12;
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002612:	f85d 4b04 	ldr.w	r4, [sp], #4
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8002616:	6199      	str	r1, [r3, #24]
}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20009780 	.word	0x20009780
 8002620:	40012c00 	.word	0x40012c00

08002624 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDIO)
 8002628:	4b59      	ldr	r3, [pc, #356]	@ (8002790 <HAL_SD_MspInit+0x16c>)
 800262a:	6802      	ldr	r2, [r0, #0]
{
 800262c:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDIO)
 8002630:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002632:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002636:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800263a:	9408      	str	r4, [sp, #32]
  if(sdHandle->Instance==SDIO)
 800263c:	d002      	beq.n	8002644 <HAL_SD_MspInit+0x20>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800263e:	b00b      	add	sp, #44	@ 0x2c
 8002640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002644:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8002648:	9401      	str	r4, [sp, #4]
 800264a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_sdio_rx.Instance = DMA2_Stream6;
 800264c:	4e51      	ldr	r6, [pc, #324]	@ (8002794 <HAL_SD_MspInit+0x170>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 800264e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002652:	645a      	str	r2, [r3, #68]	@ 0x44
 8002654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002656:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800265a:	9201      	str	r2, [sp, #4]
 800265c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800265e:	9402      	str	r4, [sp, #8]
 8002660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002662:	f042 0204 	orr.w	r2, r2, #4
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
 8002668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800266a:	f002 0204 	and.w	r2, r2, #4
 800266e:	9202      	str	r2, [sp, #8]
 8002670:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002672:	9403      	str	r4, [sp, #12]
 8002674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002676:	f042 0208 	orr.w	r2, r2, #8
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002684:	f44f 7280 	mov.w	r2, #256	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002688:	270c      	movs	r7, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800268a:	2302      	movs	r3, #2
 800268c:	f04f 0801 	mov.w	r8, #1
 8002690:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002694:	a904      	add	r1, sp, #16
 8002696:	4605      	mov	r5, r0
 8002698:	483f      	ldr	r0, [pc, #252]	@ (8002798 <HAL_SD_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800269a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800269c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80026a0:	e9cd 8906 	strd	r8, r9, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a4:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	f001 fe53 	bl	8004350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026ae:	2302      	movs	r3, #2
 80026b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b4:	4838      	ldr	r0, [pc, #224]	@ (8002798 <HAL_SD_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026b6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026b8:	2200      	movs	r2, #0
 80026ba:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026be:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c2:	f001 fe45 	bl	8004350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026c6:	2204      	movs	r2, #4
 80026c8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ca:	4834      	ldr	r0, [pc, #208]	@ (800279c <HAL_SD_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026cc:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ce:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80026d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d8:	f001 fe3a 	bl	8004350 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80026dc:	4a30      	ldr	r2, [pc, #192]	@ (80027a0 <HAL_SD_MspInit+0x17c>)
 80026de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80026e2:	e9c6 2300 	strd	r2, r3, [r6]
 80026e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ee:	e9c6 2304 	strd	r2, r3, [r6, #16]
 80026f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026f6:	2320      	movs	r3, #32
 80026f8:	e9c6 2306 	strd	r2, r3, [r6, #24]
 80026fc:	2304      	movs	r3, #4
 80026fe:	e9c6 4308 	strd	r4, r3, [r6, #32]
 8002702:	2103      	movs	r1, #3
 8002704:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002708:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800270c:	4630      	mov	r0, r6
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800270e:	e9c6 4402 	strd	r4, r4, [r6, #8]
 8002712:	e9c6 120a 	strd	r1, r2, [r6, #40]	@ 0x28
 8002716:	6333      	str	r3, [r6, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002718:	f001 fc10 	bl	8003f3c <HAL_DMA_Init>
 800271c:	bb90      	cbnz	r0, 8002784 <HAL_SD_MspInit+0x160>
    hdma_sdio_tx.Instance = DMA2_Stream3;
 800271e:	4c21      	ldr	r4, [pc, #132]	@ (80027a4 <HAL_SD_MspInit+0x180>)
 8002720:	4921      	ldr	r1, [pc, #132]	@ (80027a8 <HAL_SD_MspInit+0x184>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8002722:	642e      	str	r6, [r5, #64]	@ 0x40
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002724:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002728:	2300      	movs	r3, #0
 800272a:	e9c4 1200 	strd	r1, r2, [r4]
 800272e:	2140      	movs	r1, #64	@ 0x40
 8002730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002734:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8002738:	6122      	str	r2, [r4, #16]
 800273a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800273e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002742:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8002746:	2220      	movs	r2, #32
 8002748:	e9c4 2307 	strd	r2, r3, [r4, #28]
 800274c:	2104      	movs	r1, #4
 800274e:	2303      	movs	r3, #3
 8002750:	e9c4 1309 	strd	r1, r3, [r4, #36]	@ 0x24
 8002754:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002758:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800275c:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800275e:	e9c4 230b 	strd	r2, r3, [r4, #44]	@ 0x2c
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8002762:	63b5      	str	r5, [r6, #56]	@ 0x38
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002764:	f001 fbea 	bl	8003f3c <HAL_DMA_Init>
 8002768:	b978      	cbnz	r0, 800278a <HAL_SD_MspInit+0x166>
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	4611      	mov	r1, r2
 800276e:	2031      	movs	r0, #49	@ 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8002770:	63ec      	str	r4, [r5, #60]	@ 0x3c
 8002772:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002774:	f001 fb7e 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002778:	2031      	movs	r0, #49	@ 0x31
 800277a:	f001 fbb7 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 800277e:	b00b      	add	sp, #44	@ 0x2c
 8002780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8002784:	f7ff fd6e 	bl	8002264 <Error_Handler>
 8002788:	e7c9      	b.n	800271e <HAL_SD_MspInit+0xfa>
      Error_Handler();
 800278a:	f7ff fd6b 	bl	8002264 <Error_Handler>
 800278e:	e7ec      	b.n	800276a <HAL_SD_MspInit+0x146>
 8002790:	40012c00 	.word	0x40012c00
 8002794:	20009720 	.word	0x20009720
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	400264a0 	.word	0x400264a0
 80027a4:	200096c0 	.word	0x200096c0
 80027a8:	40026458 	.word	0x40026458

080027ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <HAL_MspInit+0x34>)
 80027b0:	2100      	movs	r1, #0
 80027b2:	9100      	str	r1, [sp, #0]
 80027b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80027bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027be:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80027c2:	9200      	str	r2, [sp, #0]
 80027c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	9101      	str	r1, [sp, #4]
 80027c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027da:	b002      	add	sp, #8
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800

080027e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80027e6:	f003 fc75 	bl	80060d4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <NMI_Handler+0x6>

080027ec <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <HardFault_Handler>
 80027ee:	bf00      	nop

080027f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <MemManage_Handler>
 80027f2:	bf00      	nop

080027f4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <BusFault_Handler>
 80027f6:	bf00      	nop

080027f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <UsageFault_Handler>
 80027fa:	bf00      	nop

080027fc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop

08002804 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop

08002808 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002808:	f000 bcce 	b.w	80031a8 <HAL_IncTick>

0800280c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 800280c:	4801      	ldr	r0, [pc, #4]	@ (8002814 <DMA1_Stream0_IRQHandler+0x8>)
 800280e:	f001 bcc3 	b.w	8004198 <HAL_DMA_IRQHandler>
 8002812:	bf00      	nop
 8002814:	2000987c 	.word	0x2000987c

08002818 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002818:	4801      	ldr	r0, [pc, #4]	@ (8002820 <DMA1_Stream1_IRQHandler+0x8>)
 800281a:	f001 bcbd 	b.w	8004198 <HAL_DMA_IRQHandler>
 800281e:	bf00      	nop
 8002820:	20009a30 	.word	0x20009a30

08002824 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8002824:	4801      	ldr	r0, [pc, #4]	@ (800282c <DMA1_Stream2_IRQHandler+0x8>)
 8002826:	f001 bcb7 	b.w	8004198 <HAL_DMA_IRQHandler>
 800282a:	bf00      	nop
 800282c:	2000993c 	.word	0x2000993c

08002830 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8002830:	4801      	ldr	r0, [pc, #4]	@ (8002838 <DMA1_Stream3_IRQHandler+0x8>)
 8002832:	f001 bcb1 	b.w	8004198 <HAL_DMA_IRQHandler>
 8002836:	bf00      	nop
 8002838:	2000981c 	.word	0x2000981c

0800283c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 800283c:	4801      	ldr	r0, [pc, #4]	@ (8002844 <DMA1_Stream4_IRQHandler+0x8>)
 800283e:	f001 bcab 	b.w	8004198 <HAL_DMA_IRQHandler>
 8002842:	bf00      	nop
 8002844:	200098dc 	.word	0x200098dc

08002848 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800284a:	4805      	ldr	r0, [pc, #20]	@ (8002860 <ADC_IRQHandler+0x18>)
 800284c:	f000 fe36 	bl	80034bc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002850:	4804      	ldr	r0, [pc, #16]	@ (8002864 <ADC_IRQHandler+0x1c>)
 8002852:	f000 fe33 	bl	80034bc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);

  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 800285a:	4803      	ldr	r0, [pc, #12]	@ (8002868 <ADC_IRQHandler+0x20>)
 800285c:	f000 be2e 	b.w	80034bc <HAL_ADC_IRQHandler>
 8002860:	200003b0 	.word	0x200003b0
 8002864:	20000368 	.word	0x20000368
 8002868:	20000320 	.word	0x20000320

0800286c <CAN1_TX_IRQHandler>:
void CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800286c:	4801      	ldr	r0, [pc, #4]	@ (8002874 <CAN1_TX_IRQHandler+0x8>)
 800286e:	f001 b983 	b.w	8003b78 <HAL_CAN_IRQHandler>
 8002872:	bf00      	nop
 8002874:	200003f8 	.word	0x200003f8

08002878 <CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
 8002878:	4801      	ldr	r0, [pc, #4]	@ (8002880 <CAN1_RX0_IRQHandler+0x8>)
 800287a:	f001 b97d 	b.w	8003b78 <HAL_CAN_IRQHandler>
 800287e:	bf00      	nop
 8002880:	200003f8 	.word	0x200003f8

08002884 <CAN1_RX1_IRQHandler>:
}

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
 8002884:	4801      	ldr	r0, [pc, #4]	@ (800288c <CAN1_RX1_IRQHandler+0x8>)
 8002886:	f001 b977 	b.w	8003b78 <HAL_CAN_IRQHandler>
 800288a:	bf00      	nop
 800288c:	200003f8 	.word	0x200003f8

08002890 <CAN1_SCE_IRQHandler>:
}

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
 8002890:	4801      	ldr	r0, [pc, #4]	@ (8002898 <CAN1_SCE_IRQHandler+0x8>)
 8002892:	f001 b971 	b.w	8003b78 <HAL_CAN_IRQHandler>
 8002896:	bf00      	nop
 8002898:	200003f8 	.word	0x200003f8

0800289c <EXTI9_5_IRQHandler>:
}

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop

080028a0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028a0:	4801      	ldr	r0, [pc, #4]	@ (80028a8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80028a2:	f004 bca9 	b.w	80071f8 <HAL_TIM_IRQHandler>
 80028a6:	bf00      	nop
 80028a8:	200099e8 	.word	0x200099e8

080028ac <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80028ac:	4801      	ldr	r0, [pc, #4]	@ (80028b4 <I2C1_EV_IRQHandler+0x8>)
 80028ae:	f002 bc61 	b.w	8005174 <HAL_I2C_EV_IRQHandler>
 80028b2:	bf00      	nop
 80028b4:	20000498 	.word	0x20000498

080028b8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028b8:	4801      	ldr	r0, [pc, #4]	@ (80028c0 <USART1_IRQHandler+0x8>)
 80028ba:	f005 b9e3 	b.w	8007c84 <HAL_UART_IRQHandler>
 80028be:	bf00      	nop
 80028c0:	20009ad8 	.word	0x20009ad8

080028c4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028c4:	4801      	ldr	r0, [pc, #4]	@ (80028cc <USART2_IRQHandler+0x8>)
 80028c6:	f005 b9dd 	b.w	8007c84 <HAL_UART_IRQHandler>
 80028ca:	bf00      	nop
 80028cc:	20009a90 	.word	0x20009a90

080028d0 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80028d0:	4801      	ldr	r0, [pc, #4]	@ (80028d8 <SDIO_IRQHandler+0x8>)
 80028d2:	f004 ba79 	b.w	8006dc8 <HAL_SD_IRQHandler>
 80028d6:	bf00      	nop
 80028d8:	20009780 	.word	0x20009780

080028dc <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80028dc:	4801      	ldr	r0, [pc, #4]	@ (80028e4 <TIM5_IRQHandler+0x8>)
 80028de:	f004 bc8b 	b.w	80071f8 <HAL_TIM_IRQHandler>
 80028e2:	bf00      	nop
 80028e4:	2000999c 	.word	0x2000999c

080028e8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028e8:	4801      	ldr	r0, [pc, #4]	@ (80028f0 <DMA2_Stream0_IRQHandler+0x8>)
 80028ea:	f001 bc55 	b.w	8004198 <HAL_DMA_IRQHandler>
 80028ee:	bf00      	nop
 80028f0:	200002bc 	.word	0x200002bc

080028f4 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80028f4:	4801      	ldr	r0, [pc, #4]	@ (80028fc <DMA2_Stream2_IRQHandler+0x8>)
 80028f6:	f001 bc4f 	b.w	8004198 <HAL_DMA_IRQHandler>
 80028fa:	bf00      	nop
 80028fc:	2000025c 	.word	0x2000025c

08002900 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002900:	4801      	ldr	r0, [pc, #4]	@ (8002908 <DMA2_Stream3_IRQHandler+0x8>)
 8002902:	f001 bc49 	b.w	8004198 <HAL_DMA_IRQHandler>
 8002906:	bf00      	nop
 8002908:	200096c0 	.word	0x200096c0

0800290c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800290c:	4801      	ldr	r0, [pc, #4]	@ (8002914 <DMA2_Stream6_IRQHandler+0x8>)
 800290e:	f001 bc43 	b.w	8004198 <HAL_DMA_IRQHandler>
 8002912:	bf00      	nop
 8002914:	20009720 	.word	0x20009720

08002918 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002918:	4801      	ldr	r0, [pc, #4]	@ (8002920 <I2C3_EV_IRQHandler+0x8>)
 800291a:	f002 bc2b 	b.w	8005174 <HAL_I2C_EV_IRQHandler>
 800291e:	bf00      	nop
 8002920:	20000440 	.word	0x20000440

08002924 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002924:	2001      	movs	r0, #1
 8002926:	4770      	bx	lr

08002928 <_kill>:

int _kill(int pid, int sig)
{
 8002928:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800292a:	f007 fbe1 	bl	800a0f0 <__errno>
 800292e:	2316      	movs	r3, #22
 8002930:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002936:	bd08      	pop	{r3, pc}

08002938 <_exit>:

void _exit (int status)
{
 8002938:	b508      	push	{r3, lr}
  errno = EINVAL;
 800293a:	f007 fbd9 	bl	800a0f0 <__errno>
 800293e:	2316      	movs	r3, #22
 8002940:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002942:	e7fe      	b.n	8002942 <_exit+0xa>

08002944 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800294c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002950:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002952:	2000      	movs	r0, #0
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002958:	2001      	movs	r0, #1
 800295a:	4770      	bx	lr

0800295c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800295c:	2000      	movs	r0, #0
 800295e:	4770      	bx	lr

08002960 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002960:	490c      	ldr	r1, [pc, #48]	@ (8002994 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002962:	4a0d      	ldr	r2, [pc, #52]	@ (8002998 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002964:	680b      	ldr	r3, [r1, #0]
{
 8002966:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4c0c      	ldr	r4, [pc, #48]	@ (800299c <_sbrk+0x3c>)
 800296a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800296c:	b12b      	cbz	r3, 800297a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296e:	4418      	add	r0, r3
 8002970:	4290      	cmp	r0, r2
 8002972:	d807      	bhi.n	8002984 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002974:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <_sbrk+0x40>)
 800297c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800297e:	4418      	add	r0, r3
 8002980:	4290      	cmp	r0, r2
 8002982:	d9f7      	bls.n	8002974 <_sbrk+0x14>
    errno = ENOMEM;
 8002984:	f007 fbb4 	bl	800a0f0 <__errno>
 8002988:	230c      	movs	r3, #12
 800298a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800298c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd10      	pop	{r4, pc}
 8002994:	20009814 	.word	0x20009814
 8002998:	20020000 	.word	0x20020000
 800299c:	00000400 	.word	0x00000400
 80029a0:	20009c88 	.word	0x20009c88

080029a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a4:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <SystemInit+0x10>)
 80029a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80029aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <HAL_TIM_PeriodElapsedCallback>:
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
  static uint32_t count = 0;

  if (htim->Instance == TIM1) {
 80029b8:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80029ba:	6802      	ldr	r2, [r0, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d000      	beq.n	80029c2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80029c0:	4770      	bx	lr
    count++;
 80029c2:	490c      	ldr	r1, [pc, #48]	@ (80029f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
    timer_flag |= 1 << FLAG_TIMER_100ms;
 80029c4:	4a0c      	ldr	r2, [pc, #48]	@ (80029f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
    count++;
 80029c6:	680b      	ldr	r3, [r1, #0]
    timer_flag |= 1 << FLAG_TIMER_100ms;
 80029c8:	6810      	ldr	r0, [r2, #0]
    count++;
 80029ca:	3301      	adds	r3, #1
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80029cc:	b410      	push	{r4}

    if (count == 10) {
 80029ce:	2b0a      	cmp	r3, #10
    timer_flag |= 1 << FLAG_TIMER_100ms;
 80029d0:	f040 0401 	orr.w	r4, r0, #1
    count++;
 80029d4:	600b      	str	r3, [r1, #0]
    timer_flag |= 1 << FLAG_TIMER_100ms;
 80029d6:	6014      	str	r4, [r2, #0]
    if (count == 10) {
 80029d8:	d002      	beq.n	80029e0 <HAL_TIM_PeriodElapsedCallback+0x28>
      count = 0;
      timer_flag |= 1 << FLAG_TIMER_1s;
    }
  }
}
 80029da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029de:	4770      	bx	lr
      count = 0;
 80029e0:	2300      	movs	r3, #0
      timer_flag |= 1 << FLAG_TIMER_1s;
 80029e2:	f040 0003 	orr.w	r0, r0, #3
}
 80029e6:	f85d 4b04 	ldr.w	r4, [sp], #4
      count = 0;
 80029ea:	600b      	str	r3, [r1, #0]
      timer_flag |= 1 << FLAG_TIMER_1s;
 80029ec:	6010      	str	r0, [r2, #0]
}
 80029ee:	4770      	bx	lr
 80029f0:	40010000 	.word	0x40010000
 80029f4:	20009818 	.word	0x20009818
 80029f8:	20008654 	.word	0x20008654

080029fc <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch3_up;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029fc:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029fe:	481b      	ldr	r0, [pc, #108]	@ (8002a6c <MX_TIM1_Init+0x70>)
 8002a00:	4a1b      	ldr	r2, [pc, #108]	@ (8002a70 <MX_TIM1_Init+0x74>)
 8002a02:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 840 - 1;
 8002a04:	f240 3247 	movw	r2, #839	@ 0x347
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a08:	2300      	movs	r3, #0
{
 8002a0a:	b087      	sub	sp, #28
  htim1.Init.Prescaler = 840 - 1;
 8002a0c:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 20000 - 1;
 8002a0e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002a16:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1a:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.Period = 20000 - 1;
 8002a1e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
 8002a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a26:	6183      	str	r3, [r0, #24]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a28:	f004 fd00 	bl	800742c <HAL_TIM_Base_Init>
 8002a2c:	b998      	cbnz	r0, 8002a56 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a32:	480e      	ldr	r0, [pc, #56]	@ (8002a6c <MX_TIM1_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a34:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a36:	a902      	add	r1, sp, #8
 8002a38:	f004 fb2c 	bl	8007094 <HAL_TIM_ConfigClockSource>
 8002a3c:	b998      	cbnz	r0, 8002a66 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a42:	480a      	ldr	r0, [pc, #40]	@ (8002a6c <MX_TIM1_Init+0x70>)
 8002a44:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a46:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a4a:	f004 fe23 	bl	8007694 <HAL_TIMEx_MasterConfigSynchronization>
 8002a4e:	b928      	cbnz	r0, 8002a5c <MX_TIM1_Init+0x60>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a50:	b007      	add	sp, #28
 8002a52:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002a56:	f7ff fc05 	bl	8002264 <Error_Handler>
 8002a5a:	e7e8      	b.n	8002a2e <MX_TIM1_Init+0x32>
    Error_Handler();
 8002a5c:	f7ff fc02 	bl	8002264 <Error_Handler>
}
 8002a60:	b007      	add	sp, #28
 8002a62:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002a66:	f7ff fbfd 	bl	8002264 <Error_Handler>
 8002a6a:	e7e8      	b.n	8002a3e <MX_TIM1_Init+0x42>
 8002a6c:	200099e8 	.word	0x200099e8
 8002a70:	40010000 	.word	0x40010000

08002a74 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a74:	b500      	push	{lr}
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a76:	4835      	ldr	r0, [pc, #212]	@ (8002b4c <MX_TIM5_Init+0xd8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a78:	2300      	movs	r3, #0
{
 8002a7a:	b08b      	sub	sp, #44	@ 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002a80:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a84:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a88:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002a8c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim5.Init.Prescaler = 84 - 1;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a90:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 1000000 - 1;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a92:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a94:	6183      	str	r3, [r0, #24]
  htim5.Instance = TIM5;
 8002a96:	4b2e      	ldr	r3, [pc, #184]	@ (8002b50 <MX_TIM5_Init+0xdc>)
 8002a98:	6003      	str	r3, [r0, #0]
  htim5.Init.Period = 1000000 - 1;
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b54 <MX_TIM5_Init+0xe0>)
 8002a9c:	60c3      	str	r3, [r0, #12]
  htim5.Init.Prescaler = 84 - 1;
 8002a9e:	2353      	movs	r3, #83	@ 0x53
 8002aa0:	6043      	str	r3, [r0, #4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002aa2:	f004 fcc3 	bl	800742c <HAL_TIM_Base_Init>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d136      	bne.n	8002b18 <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002aae:	4827      	ldr	r0, [pc, #156]	@ (8002b4c <MX_TIM5_Init+0xd8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002ab2:	a902      	add	r1, sp, #8
 8002ab4:	f004 faee 	bl	8007094 <HAL_TIM_ConfigClockSource>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d144      	bne.n	8002b46 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002abc:	4823      	ldr	r0, [pc, #140]	@ (8002b4c <MX_TIM5_Init+0xd8>)
 8002abe:	f004 fce3 	bl	8007488 <HAL_TIM_IC_Init>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d13c      	bne.n	8002b40 <MX_TIM5_Init+0xcc>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002aca:	4820      	ldr	r0, [pc, #128]	@ (8002b4c <MX_TIM5_Init+0xd8>)
 8002acc:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ace:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ad2:	f004 fddf 	bl	8007694 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad6:	bb80      	cbnz	r0, 8002b3a <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ad8:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ada:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002adc:	481b      	ldr	r0, [pc, #108]	@ (8002b4c <MX_TIM5_Init+0xd8>)
 8002ade:	a906      	add	r1, sp, #24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ae0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfigIC.ICFilter = 0;
 8002ae4:	e9cd 2208 	strd	r2, r2, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ae8:	f004 fd3c 	bl	8007564 <HAL_TIM_IC_ConfigChannel>
 8002aec:	bb10      	cbnz	r0, 8002b34 <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002aee:	4817      	ldr	r0, [pc, #92]	@ (8002b4c <MX_TIM5_Init+0xd8>)
 8002af0:	2204      	movs	r2, #4
 8002af2:	a906      	add	r1, sp, #24
 8002af4:	f004 fd36 	bl	8007564 <HAL_TIM_IC_ConfigChannel>
 8002af8:	b9c8      	cbnz	r0, 8002b2e <MX_TIM5_Init+0xba>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002afa:	4814      	ldr	r0, [pc, #80]	@ (8002b4c <MX_TIM5_Init+0xd8>)
 8002afc:	2208      	movs	r2, #8
 8002afe:	a906      	add	r1, sp, #24
 8002b00:	f004 fd30 	bl	8007564 <HAL_TIM_IC_ConfigChannel>
 8002b04:	b980      	cbnz	r0, 8002b28 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002b06:	4811      	ldr	r0, [pc, #68]	@ (8002b4c <MX_TIM5_Init+0xd8>)
 8002b08:	220c      	movs	r2, #12
 8002b0a:	a906      	add	r1, sp, #24
 8002b0c:	f004 fd2a 	bl	8007564 <HAL_TIM_IC_ConfigChannel>
 8002b10:	b928      	cbnz	r0, 8002b1e <MX_TIM5_Init+0xaa>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b12:	b00b      	add	sp, #44	@ 0x2c
 8002b14:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b18:	f7ff fba4 	bl	8002264 <Error_Handler>
 8002b1c:	e7c5      	b.n	8002aaa <MX_TIM5_Init+0x36>
    Error_Handler();
 8002b1e:	f7ff fba1 	bl	8002264 <Error_Handler>
}
 8002b22:	b00b      	add	sp, #44	@ 0x2c
 8002b24:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b28:	f7ff fb9c 	bl	8002264 <Error_Handler>
 8002b2c:	e7eb      	b.n	8002b06 <MX_TIM5_Init+0x92>
    Error_Handler();
 8002b2e:	f7ff fb99 	bl	8002264 <Error_Handler>
 8002b32:	e7e2      	b.n	8002afa <MX_TIM5_Init+0x86>
    Error_Handler();
 8002b34:	f7ff fb96 	bl	8002264 <Error_Handler>
 8002b38:	e7d9      	b.n	8002aee <MX_TIM5_Init+0x7a>
    Error_Handler();
 8002b3a:	f7ff fb93 	bl	8002264 <Error_Handler>
 8002b3e:	e7cb      	b.n	8002ad8 <MX_TIM5_Init+0x64>
    Error_Handler();
 8002b40:	f7ff fb90 	bl	8002264 <Error_Handler>
 8002b44:	e7bf      	b.n	8002ac6 <MX_TIM5_Init+0x52>
    Error_Handler();
 8002b46:	f7ff fb8d 	bl	8002264 <Error_Handler>
 8002b4a:	e7b7      	b.n	8002abc <MX_TIM5_Init+0x48>
 8002b4c:	2000999c 	.word	0x2000999c
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	000f423f 	.word	0x000f423f

08002b58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b58:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_baseHandle->Instance==TIM1)
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	4a64      	ldr	r2, [pc, #400]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x198>)
{
 8002b5e:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	2400      	movs	r4, #0
  if(tim_baseHandle->Instance==TIM1)
 8002b62:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002b68:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002b6c:	9408      	str	r4, [sp, #32]
  if(tim_baseHandle->Instance==TIM1)
 8002b6e:	d004      	beq.n	8002b7a <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 8002b70:	4a60      	ldr	r2, [pc, #384]	@ (8002cf4 <HAL_TIM_Base_MspInit+0x19c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d016      	beq.n	8002ba4 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b76:	b00a      	add	sp, #40	@ 0x28
 8002b78:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1a0>)
 8002b7c:	9401      	str	r4, [sp, #4]
 8002b7e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002b80:	f041 0101 	orr.w	r1, r1, #1
 8002b84:	6459      	str	r1, [r3, #68]	@ 0x44
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	f003 0301 	and.w	r3, r3, #1
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	4621      	mov	r1, r4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b90:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b92:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b94:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b96:	f001 f96d 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b9a:	2019      	movs	r0, #25
 8002b9c:	f001 f9a6 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 8002ba0:	b00a      	add	sp, #40	@ 0x28
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ba4:	4b54      	ldr	r3, [pc, #336]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1a0>)
 8002ba6:	9402      	str	r4, [sp, #8]
 8002ba8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8002baa:	4e54      	ldr	r6, [pc, #336]	@ (8002cfc <HAL_TIM_Base_MspInit+0x1a4>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bac:	f042 0208 	orr.w	r2, r2, #8
 8002bb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bb4:	f002 0208 	and.w	r2, r2, #8
 8002bb8:	9202      	str	r2, [sp, #8]
 8002bba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbc:	9403      	str	r4, [sp, #12]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = PIN0_Pin|PIN1_Pin|PIN2_Pin|PIN3_Pin;
 8002bce:	220f      	movs	r2, #15
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002bd6:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bd8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	4849      	ldr	r0, [pc, #292]	@ (8002d00 <HAL_TIM_Base_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bdc:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f001 fbb5 	bl	8004350 <HAL_GPIO_Init>
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8002be6:	4a47      	ldr	r2, [pc, #284]	@ (8002d04 <HAL_TIM_Base_MspInit+0x1ac>)
 8002be8:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 8002bec:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002bf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bf8:	e9c6 2304 	strd	r2, r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8002bfc:	4630      	mov	r0, r6
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c02:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8002c06:	e9c6 3406 	strd	r3, r4, [r6, #24]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c0a:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8002c0e:	f001 f995 	bl	8003f3c <HAL_DMA_Init>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d15f      	bne.n	8002cd6 <HAL_TIM_Base_MspInit+0x17e>
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002c16:	4c3c      	ldr	r4, [pc, #240]	@ (8002d08 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c18:	493c      	ldr	r1, [pc, #240]	@ (8002d0c <HAL_TIM_Base_MspInit+0x1b4>)
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8002c1a:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002c1c:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002c20:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002c28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c2c:	2300      	movs	r3, #0
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c2e:	e9c4 1204 	strd	r1, r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002c32:	4620      	mov	r0, r4
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c38:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002c3c:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c40:	e9c4 3308 	strd	r3, r3, [r4, #32]
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8002c44:	63b5      	str	r5, [r6, #56]	@ 0x38
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002c46:	f001 f979 	bl	8003f3c <HAL_DMA_Init>
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	d14c      	bne.n	8002ce8 <HAL_TIM_Base_MspInit+0x190>
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 8002c4e:	4e30      	ldr	r6, [pc, #192]	@ (8002d10 <HAL_TIM_Base_MspInit+0x1b8>)
 8002c50:	4930      	ldr	r1, [pc, #192]	@ (8002d14 <HAL_TIM_Base_MspInit+0x1bc>)
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002c52:	62ac      	str	r4, [r5, #40]	@ 0x28
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 8002c54:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002c58:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002c60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_tim5_ch3_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c64:	2300      	movs	r3, #0
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c66:	e9c6 1204 	strd	r1, r2, [r6, #16]
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8002c6a:	4630      	mov	r0, r6
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c70:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8002c74:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c78:	e9c6 3308 	strd	r3, r3, [r6, #32]
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002c7c:	63a5      	str	r5, [r4, #56]	@ 0x38
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8002c7e:	f001 f95d 	bl	8003f3c <HAL_DMA_Init>
 8002c82:	bb70      	cbnz	r0, 8002ce2 <HAL_TIM_Base_MspInit+0x18a>
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8002c84:	4c24      	ldr	r4, [pc, #144]	@ (8002d18 <HAL_TIM_Base_MspInit+0x1c0>)
 8002c86:	4925      	ldr	r1, [pc, #148]	@ (8002d1c <HAL_TIM_Base_MspInit+0x1c4>)
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8002c88:	622e      	str	r6, [r5, #32]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8002c8a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002c8e:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002c96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_tim5_ch4_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9a:	2300      	movs	r3, #0
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c9c:	e9c4 1204 	strd	r1, r2, [r4, #16]
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8002ca0:	62ee      	str	r6, [r5, #44]	@ 0x2c
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ca2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8002ca6:	4620      	mov	r0, r4
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca8:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8002cac:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb0:	e9c4 3308 	strd	r3, r3, [r4, #32]
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8002cb4:	63b5      	str	r5, [r6, #56]	@ 0x38
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8002cb6:	f001 f941 	bl	8003f3c <HAL_DMA_Init>
 8002cba:	b978      	cbnz	r0, 8002cdc <HAL_TIM_Base_MspInit+0x184>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002cbc:	2200      	movs	r2, #0
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8002cbe:	632c      	str	r4, [r5, #48]	@ 0x30
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8002cc0:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	2032      	movs	r0, #50	@ 0x32
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8002cc6:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002cc8:	f001 f8d4 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ccc:	2032      	movs	r0, #50	@ 0x32
 8002cce:	f001 f90d 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 8002cd2:	b00a      	add	sp, #40	@ 0x28
 8002cd4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002cd6:	f7ff fac5 	bl	8002264 <Error_Handler>
 8002cda:	e79c      	b.n	8002c16 <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8002cdc:	f7ff fac2 	bl	8002264 <Error_Handler>
 8002ce0:	e7ec      	b.n	8002cbc <HAL_TIM_Base_MspInit+0x164>
      Error_Handler();
 8002ce2:	f7ff fabf 	bl	8002264 <Error_Handler>
 8002ce6:	e7cd      	b.n	8002c84 <HAL_TIM_Base_MspInit+0x12c>
      Error_Handler();
 8002ce8:	f7ff fabc 	bl	8002264 <Error_Handler>
 8002cec:	e7af      	b.n	8002c4e <HAL_TIM_Base_MspInit+0xf6>
 8002cee:	bf00      	nop
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40000c00 	.word	0x40000c00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	2000993c 	.word	0x2000993c
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40026040 	.word	0x40026040
 8002d08:	200098dc 	.word	0x200098dc
 8002d0c:	40026070 	.word	0x40026070
 8002d10:	2000987c 	.word	0x2000987c
 8002d14:	40026010 	.word	0x40026010
 8002d18:	2000981c 	.word	0x2000981c
 8002d1c:	40026058 	.word	0x40026058

08002d20 <HAL_UART_RxCpltCallback>:
extern uint8_t gps_data[1 << 7];
#endif

// RTC sync rx event
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  if (huart->Instance == USART1) {
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <HAL_UART_RxCpltCallback+0x48>)
 8002d22:	6802      	ldr	r2, [r0, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d000      	beq.n	8002d2a <HAL_UART_RxCpltCallback+0xa>
 8002d28:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d2a:	b510      	push	{r4, lr}
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <HAL_UART_RxCpltCallback+0x4c>)
    // checksum verification
    uint32_t checksum = 0;
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f103 0013 	add.w	r0, r3, #19

    for (int i = 0; i < 19; i++) {
      checksum += rtc[i];
 8002d34:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 0; i < 19; i++) {
 8002d38:	4283      	cmp	r3, r0
      checksum += rtc[i];
 8002d3a:	440a      	add	r2, r1
    for (int i = 0; i < 19; i++) {
 8002d3c:	d1fa      	bne.n	8002d34 <HAL_UART_RxCpltCallback+0x14>
    }

    checksum &= 0xff;

    if (rtc[19] == (uint8_t)checksum) {
 8002d3e:	4c0c      	ldr	r4, [pc, #48]	@ (8002d70 <HAL_UART_RxCpltCallback+0x50>)
 8002d40:	7ce3      	ldrb	r3, [r4, #19]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d000      	beq.n	8002d4a <HAL_UART_RxCpltCallback+0x2a>

      // re-enable RTC fix message
      HAL_UART_Receive_IT(UART_DEBUG, rtc, 20);
    }
  }
}
 8002d48:	bd10      	pop	{r4, pc}
      HAL_UART_Transmit_IT(UART_DEBUG, (uint8_t *)"ACK", 3);
 8002d4a:	490a      	ldr	r1, [pc, #40]	@ (8002d74 <HAL_UART_RxCpltCallback+0x54>)
 8002d4c:	480a      	ldr	r0, [pc, #40]	@ (8002d78 <HAL_UART_RxCpltCallback+0x58>)
 8002d4e:	2203      	movs	r2, #3
 8002d50:	f004 fe4c 	bl	80079ec <HAL_UART_Transmit_IT>
      RTC_FIX(RTC_UART);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff fadd 	bl	8002314 <RTC_FIX>
      HAL_UART_Receive_IT(UART_DEBUG, rtc, 20);
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	4806      	ldr	r0, [pc, #24]	@ (8002d78 <HAL_UART_RxCpltCallback+0x58>)
}
 8002d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_UART_Receive_IT(UART_DEBUG, rtc, 20);
 8002d62:	2214      	movs	r2, #20
 8002d64:	f004 be64 	b.w	8007a30 <HAL_UART_Receive_IT>
 8002d68:	40011000 	.word	0x40011000
 8002d6c:	20008637 	.word	0x20008637
 8002d70:	20008638 	.word	0x20008638
 8002d74:	0800bfd0 	.word	0x0800bfd0
 8002d78:	20009ad8 	.word	0x20009ad8

08002d7c <SERIAL_SETUP>:
//  }
//
//  return;
//}

int SERIAL_SETUP(void) {
 8002d7c:	b508      	push	{r3, lr}
  ring_buffer_init(&SERIAL_BUFFER, (char *)SERIAL_BUFFER_ARR, sizeof(SERIAL_BUFFER_ARR));
 8002d7e:	4804      	ldr	r0, [pc, #16]	@ (8002d90 <SERIAL_SETUP+0x14>)
 8002d80:	4904      	ldr	r1, [pc, #16]	@ (8002d94 <SERIAL_SETUP+0x18>)
 8002d82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d86:	f7ff fa6f 	bl	8002268 <ring_buffer_init>

  return SYS_OK;
}
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	bd08      	pop	{r3, pc}
 8002d8e:	bf00      	nop
 8002d90:	20008614 	.word	0x20008614
 8002d94:	20004614 	.word	0x20004614

08002d98 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d98:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d9a:	480b      	ldr	r0, [pc, #44]	@ (8002dc8 <MX_USART1_UART_Init+0x30>)
 8002d9c:	4c0b      	ldr	r4, [pc, #44]	@ (8002dcc <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d9e:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8002da0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002da4:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002da6:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002daa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dae:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002db6:	f004 fd83 	bl	80078c0 <HAL_UART_Init>
 8002dba:	b900      	cbnz	r0, 8002dbe <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002dc2:	f7ff ba4f 	b.w	8002264 <Error_Handler>
 8002dc6:	bf00      	nop
 8002dc8:	20009ad8 	.word	0x20009ad8
 8002dcc:	40011000 	.word	0x40011000

08002dd0 <MX_USART2_UART_Init>:
/* USART3 init function */

void MX_USART2_UART_Init(void)
{
 8002dd0:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart2.Instance = USART2;
 8002dd2:	480b      	ldr	r0, [pc, #44]	@ (8002e00 <MX_USART2_UART_Init+0x30>)
 8002dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8002e04 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd6:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 9600;
 8002dd8:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ddc:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 9600;
 8002dde:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002de2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002de6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dea:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dee:	f004 fd67 	bl	80078c0 <HAL_UART_Init>
 8002df2:	b900      	cbnz	r0, 8002df6 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002df4:	bd10      	pop	{r4, pc}
 8002df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002dfa:	f7ff ba33 	b.w	8002264 <Error_Handler>
 8002dfe:	bf00      	nop
 8002e00:	20009a90 	.word	0x20009a90
 8002e04:	40004400 	.word	0x40004400

08002e08 <HAL_UART_MspInit>:
/* USART6 init function */



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e08:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8002e0a:	6803      	ldr	r3, [r0, #0]
 8002e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8002f0c <HAL_UART_MspInit+0x104>)
{
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8002e12:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002e18:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002e1c:	9408      	str	r4, [sp, #32]
  if(uartHandle->Instance==USART1)
 8002e1e:	d004      	beq.n	8002e2a <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002e20:	4a3b      	ldr	r2, [pc, #236]	@ (8002f10 <HAL_UART_MspInit+0x108>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02d      	beq.n	8002e82 <HAL_UART_MspInit+0x7a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e26:	b00a      	add	sp, #40	@ 0x28
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002e2c:	9400      	str	r4, [sp, #0]
 8002e2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	4839      	ldr	r0, [pc, #228]	@ (8002f18 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e32:	f042 0210 	orr.w	r2, r2, #16
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e3a:	f002 0210 	and.w	r2, r2, #16
 8002e3e:	9200      	str	r2, [sp, #0]
 8002e40:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	9401      	str	r4, [sp, #4]
 8002e44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_DEBUG_TX_Pin|USART_DEBUG_RX_Pin;
 8002e54:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e60:	2307      	movs	r3, #7
 8002e62:	2203      	movs	r2, #3
 8002e64:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f001 fa71 	bl	8004350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e6e:	4622      	mov	r2, r4
 8002e70:	4621      	mov	r1, r4
 8002e72:	2025      	movs	r0, #37	@ 0x25
 8002e74:	f000 fffe 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e78:	2025      	movs	r0, #37	@ 0x25
 8002e7a:	f001 f837 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 8002e7e:	b00a      	add	sp, #40	@ 0x28
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e82:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002e84:	9402      	str	r4, [sp, #8]
 8002e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8002e88:	4e24      	ldr	r6, [pc, #144]	@ (8002f1c <HAL_UART_MspInit+0x114>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e8a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e92:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002e96:	9202      	str	r2, [sp, #8]
 8002e98:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9a:	9403      	str	r4, [sp, #12]
 8002e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e9e:	f042 0208 	orr.w	r2, r2, #8
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART_GPS_TX_Pin|USART_GPS_RX_Pin;
 8002eac:	2260      	movs	r2, #96	@ 0x60
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	9307      	str	r3, [sp, #28]
 8002eb8:	4605      	mov	r5, r0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eba:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ebc:	4818      	ldr	r0, [pc, #96]	@ (8002f20 <HAL_UART_MspInit+0x118>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec4:	f001 fa44 	bl	8004350 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002ec8:	4a16      	ldr	r2, [pc, #88]	@ (8002f24 <HAL_UART_MspInit+0x11c>)
 8002eca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002ece:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ed2:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002edc:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ee0:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee4:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ee8:	f001 f828 	bl	8003f3c <HAL_DMA_Init>
 8002eec:	b958      	cbnz	r0, 8002f06 <HAL_UART_MspInit+0xfe>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ef0:	63ae      	str	r6, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ef6:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ef8:	f000 ffbc 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002efc:	2026      	movs	r0, #38	@ 0x26
 8002efe:	f000 fff5 	bl	8003eec <HAL_NVIC_EnableIRQ>
}
 8002f02:	b00a      	add	sp, #40	@ 0x28
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002f06:	f7ff f9ad 	bl	8002264 <Error_Handler>
 8002f0a:	e7f0      	b.n	8002eee <HAL_UART_MspInit+0xe6>
 8002f0c:	40011000 	.word	0x40011000
 8002f10:	40004400 	.word	0x40004400
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	20009a30 	.word	0x20009a30
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40026028 	.word	0x40026028

08002f28 <HAL_UARTEx_RxEventCallback>:
}

/* USER CODE BEGIN 1 */
#ifdef ENABLE_MONITOR_GPS
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
  if (huart->Instance == USART2) {
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_UARTEx_RxEventCallback+0x2c>)
 8002f2a:	6802      	ldr	r2, [r0, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d000      	beq.n	8002f32 <HAL_UARTEx_RxEventCallback+0xa>
 8002f30:	4770      	bx	lr
    gps_flag = true; // mark GPS updated
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <HAL_UARTEx_RxEventCallback+0x30>)

    // re-enable DMA to receive UART data until line idle
    HAL_UARTEx_ReceiveToIdle_DMA(UART_GPS, gps_data, 1 << 7);
 8002f34:	4909      	ldr	r1, [pc, #36]	@ (8002f5c <HAL_UARTEx_RxEventCallback+0x34>)
 8002f36:	480a      	ldr	r0, [pc, #40]	@ (8002f60 <HAL_UARTEx_RxEventCallback+0x38>)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002f38:	b510      	push	{r4, lr}
    HAL_UARTEx_ReceiveToIdle_DMA(UART_GPS, gps_data, 1 << 7);
 8002f3a:	2280      	movs	r2, #128	@ 0x80
    gps_flag = true; // mark GPS updated
 8002f3c:	2401      	movs	r4, #1
 8002f3e:	601c      	str	r4, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(UART_GPS, gps_data, 1 << 7);
 8002f40:	f005 f872 	bl	8008028 <HAL_UARTEx_ReceiveToIdle_DMA>

    // disable Half Transfer interrupt
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002f44:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <HAL_UARTEx_RxEventCallback+0x3c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	f023 0308 	bic.w	r3, r3, #8
 8002f4e:	6013      	str	r3, [r2, #0]
  }
}
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	bf00      	nop
 8002f54:	40004400 	.word	0x40004400
 8002f58:	200005b0 	.word	0x200005b0
 8002f5c:	20000530 	.word	0x20000530
 8002f60:	20009a90 	.word	0x20009a90
 8002f64:	20009a30 	.word	0x20009a30

08002f68 <GPS_SETUP>:

int GPS_SETUP(void) {
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // set module power full
  const uint8_t GPS_PMS_FULL[] = { 0xB5, 0x62, 0x06, 0x86, 0x00, 0x00, 0x8C, 0xAA };
 8002f6c:	f8df 9164 	ldr.w	r9, [pc, #356]	@ 80030d4 <GPS_SETUP+0x16c>

  HAL_UART_Transmit(UART_GPS, GPS_PMS_FULL, sizeof(GPS_PMS_FULL), 100);
 8002f70:	4c53      	ldr	r4, [pc, #332]	@ (80030c0 <GPS_SETUP+0x158>)
  const uint8_t GPS_PMS_FULL[] = { 0xB5, 0x62, 0x06, 0x86, 0x00, 0x00, 0x8C, 0xAA };
 8002f72:	e899 0003 	ldmia.w	r9, {r0, r1}
int GPS_SETUP(void) {
 8002f76:	b0a7      	sub	sp, #156	@ 0x9c
  const uint8_t GPS_PMS_FULL[] = { 0xB5, 0x62, 0x06, 0x86, 0x00, 0x00, 0x8C, 0xAA };
 8002f78:	466d      	mov	r5, sp
 8002f7a:	e885 0003 	stmia.w	r5, {r0, r1}
  HAL_UART_Transmit(UART_GPS, GPS_PMS_FULL, sizeof(GPS_PMS_FULL), 100);
 8002f7e:	2364      	movs	r3, #100	@ 0x64
 8002f80:	4629      	mov	r1, r5
 8002f82:	2208      	movs	r2, #8
 8002f84:	4620      	mov	r0, r4
 8002f86:	f004 fccb 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50); // wait enough time rather than check ACK message
 8002f8a:	2032      	movs	r0, #50	@ 0x32
 8002f8c:	f000 f91e 	bl	80031cc <HAL_Delay>

  // disable unnecessary NMEA messages
  const uint8_t GPS_DISABLE_NMEA_GxGGA[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x24 };
 8002f90:	f109 0308 	add.w	r3, r9, #8
 8002f94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f96:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t GPS_DISABLE_NMEA_GxGLL[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B };
 8002f9a:	f109 0b18 	add.w	fp, r9, #24
  const uint8_t GPS_DISABLE_NMEA_GxGGA[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x24 };
 8002f9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  const uint8_t GPS_DISABLE_NMEA_GxGLL[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B };
 8002fa2:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8002fa6:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
  const uint8_t GPS_DISABLE_NMEA_GxGSA[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x32 };
 8002faa:	f109 0a28 	add.w	sl, r9, #40	@ 0x28
  const uint8_t GPS_DISABLE_NMEA_GxGLL[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B };
 8002fae:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
  const uint8_t GPS_DISABLE_NMEA_GxGSA[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x32 };
 8002fb2:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8002fb6:	af0e      	add	r7, sp, #56	@ 0x38
 8002fb8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const uint8_t GPS_DISABLE_NMEA_GxGSV[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39 };
 8002fbc:	f109 0338 	add.w	r3, r9, #56	@ 0x38
 8002fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  const uint8_t GPS_DISABLE_NMEA_GxVTG[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x47 };
 8002fc2:	f109 0e48 	add.w	lr, r9, #72	@ 0x48
  const uint8_t GPS_DISABLE_NMEA_GxGSV[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39 };
 8002fc6:	ae12      	add	r6, sp, #72	@ 0x48
 8002fc8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint8_t GPS_DISABLE_NMEA_GxVTG[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x47 };
 8002fcc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8002fd0:	ad16      	add	r5, sp, #88	@ 0x58
 8002fd2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  HAL_UART_Transmit(UART_GPS, GPS_DISABLE_NMEA_GxGGA, sizeof(GPS_DISABLE_NMEA_GxGGA), 100);
 8002fd6:	4661      	mov	r1, ip
 8002fd8:	2364      	movs	r3, #100	@ 0x64
 8002fda:	2210      	movs	r2, #16
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f004 fc9f 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50);
 8002fe2:	2032      	movs	r0, #50	@ 0x32
 8002fe4:	f000 f8f2 	bl	80031cc <HAL_Delay>
  HAL_UART_Transmit(UART_GPS, GPS_DISABLE_NMEA_GxGLL, sizeof(GPS_DISABLE_NMEA_GxGLL), 100);
 8002fe8:	4641      	mov	r1, r8
 8002fea:	2364      	movs	r3, #100	@ 0x64
 8002fec:	2210      	movs	r2, #16
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f004 fc96 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50);
 8002ff4:	2032      	movs	r0, #50	@ 0x32
 8002ff6:	f000 f8e9 	bl	80031cc <HAL_Delay>
  HAL_UART_Transmit(UART_GPS, GPS_DISABLE_NMEA_GxGSA, sizeof(GPS_DISABLE_NMEA_GxGSA), 100);
 8002ffa:	4639      	mov	r1, r7
 8002ffc:	2364      	movs	r3, #100	@ 0x64
 8002ffe:	2210      	movs	r2, #16
 8003000:	4620      	mov	r0, r4
 8003002:	f004 fc8d 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50);
 8003006:	2032      	movs	r0, #50	@ 0x32
 8003008:	f000 f8e0 	bl	80031cc <HAL_Delay>
  HAL_UART_Transmit(UART_GPS, GPS_DISABLE_NMEA_GxGSV, sizeof(GPS_DISABLE_NMEA_GxGSV), 100);
 800300c:	4631      	mov	r1, r6
 800300e:	2364      	movs	r3, #100	@ 0x64
 8003010:	2210      	movs	r2, #16
 8003012:	4620      	mov	r0, r4
 8003014:	f004 fc84 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50);
 8003018:	2032      	movs	r0, #50	@ 0x32
 800301a:	f000 f8d7 	bl	80031cc <HAL_Delay>
  HAL_UART_Transmit(UART_GPS, GPS_DISABLE_NMEA_GxVTG, sizeof(GPS_DISABLE_NMEA_GxVTG), 100);
 800301e:	4629      	mov	r1, r5
 8003020:	2364      	movs	r3, #100	@ 0x64
 8003022:	2210      	movs	r2, #16
 8003024:	4620      	mov	r0, r4
 8003026:	f004 fc7b 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50);

  // disable GPTXT messages
  const uint8_t GPS_DISABLE_NMEA_INFO[] = { 0xB5, 0x62, 0x06, 0x02, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x9A, 0x77 };
 800302a:	f109 0658 	add.w	r6, r9, #88	@ 0x58
  HAL_Delay(50);
 800302e:	2032      	movs	r0, #50	@ 0x32
 8003030:	f000 f8cc 	bl	80031cc <HAL_Delay>
  const uint8_t GPS_DISABLE_NMEA_INFO[] = { 0xB5, 0x62, 0x06, 0x02, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x9A, 0x77 };
 8003034:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003036:	ad1a      	add	r5, sp, #104	@ 0x68
 8003038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303a:	6832      	ldr	r2, [r6, #0]
 800303c:	802a      	strh	r2, [r5, #0]

  HAL_UART_Transmit(UART_GPS, GPS_DISABLE_NMEA_INFO, sizeof(GPS_DISABLE_NMEA_INFO), 100);
 800303e:	a91a      	add	r1, sp, #104	@ 0x68
 8003040:	2364      	movs	r3, #100	@ 0x64
 8003042:	2212      	movs	r2, #18
 8003044:	4620      	mov	r0, r4
 8003046:	f004 fc6b 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50);
 800304a:	2032      	movs	r0, #50	@ 0x32
 800304c:	f000 f8be 	bl	80031cc <HAL_Delay>

  // set target module refresh rate to 10Hz
  // reference: u-blox 7 Receiver Description Including Protocol Specification V14, 35.14 CFG-RATE
  const uint8_t GPS_RATE_10HZ[] = { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x64, 0x00, 0x01, 0x00, 0x01, 0x00, 0x7A, 0x12 };
 8003050:	f109 036c 	add.w	r3, r9, #108	@ 0x6c
 8003054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003056:	ad02      	add	r5, sp, #8
 8003058:	c507      	stmia	r5!, {r0, r1, r2}

  HAL_UART_Transmit(UART_GPS, GPS_RATE_10HZ, sizeof(GPS_RATE_10HZ), 100);
 800305a:	a902      	add	r1, sp, #8
 800305c:	220e      	movs	r2, #14
  const uint8_t GPS_RATE_10HZ[] = { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x64, 0x00, 0x01, 0x00, 0x01, 0x00, 0x7A, 0x12 };
 800305e:	802b      	strh	r3, [r5, #0]
  HAL_UART_Transmit(UART_GPS, GPS_RATE_10HZ, sizeof(GPS_RATE_10HZ), 100);
 8003060:	4620      	mov	r0, r4
 8003062:	2364      	movs	r3, #100	@ 0x64
 8003064:	f004 fc5c 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50);

  // set target module baud rate to 115200bps
  // reference: u-blox 7 Receiver Description Including Protocol Specification V14, 35.13 CFG-PRT
  const uint8_t GPS_BAUD_115200[] = { 0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7E };
 8003068:	f109 057c 	add.w	r5, r9, #124	@ 0x7c
  HAL_Delay(50);
 800306c:	2032      	movs	r0, #50	@ 0x32
 800306e:	f000 f8ad 	bl	80031cc <HAL_Delay>
  const uint8_t GPS_BAUD_115200[] = { 0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7E };
 8003072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003074:	ae1f      	add	r6, sp, #124	@ 0x7c
 8003076:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

  HAL_UART_Transmit(UART_GPS, GPS_BAUD_115200, sizeof(GPS_BAUD_115200), 100);
 800307c:	2364      	movs	r3, #100	@ 0x64
  const uint8_t GPS_BAUD_115200[] = { 0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7E };
 800307e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  HAL_UART_Transmit(UART_GPS, GPS_BAUD_115200, sizeof(GPS_BAUD_115200), 100);
 8003082:	a91f      	add	r1, sp, #124	@ 0x7c
 8003084:	221c      	movs	r2, #28
 8003086:	4620      	mov	r0, r4
 8003088:	f004 fc4a 	bl	8007920 <HAL_UART_Transmit>
  HAL_Delay(50);
 800308c:	2032      	movs	r0, #50	@ 0x32
 800308e:	f000 f89d 	bl	80031cc <HAL_Delay>

  // match our baud rate to 115200bps
  USART2->BRR = HAL_RCC_GetPCLK1Freq() / 115200;
 8003092:	f002 fffd 	bl	8006090 <HAL_RCC_GetPCLK1Freq>
 8003096:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <GPS_SETUP+0x15c>)

  // receive UART data until line idle
  HAL_UARTEx_ReceiveToIdle_DMA(UART_GPS, gps_data, 1 << 7);
 8003098:	490b      	ldr	r1, [pc, #44]	@ (80030c8 <GPS_SETUP+0x160>)
  USART2->BRR = HAL_RCC_GetPCLK1Freq() / 115200;
 800309a:	fba3 3000 	umull	r3, r0, r3, r0
 800309e:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <GPS_SETUP+0x164>)
 80030a0:	0c00      	lsrs	r0, r0, #16
 80030a2:	6098      	str	r0, [r3, #8]
  HAL_UARTEx_ReceiveToIdle_DMA(UART_GPS, gps_data, 1 << 7);
 80030a4:	2280      	movs	r2, #128	@ 0x80
 80030a6:	4620      	mov	r0, r4
 80030a8:	f004 ffbe 	bl	8008028 <HAL_UARTEx_ReceiveToIdle_DMA>

  // disable Half Transfer interrupt
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80030ac:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <GPS_SETUP+0x168>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	6813      	ldr	r3, [r2, #0]

  return SYS_OK;
}
 80030b2:	2000      	movs	r0, #0
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80030b4:	f023 0308 	bic.w	r3, r3, #8
 80030b8:	6013      	str	r3, [r2, #0]
}
 80030ba:	b027      	add	sp, #156	@ 0x9c
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	20009a90 	.word	0x20009a90
 80030c4:	91a2b3c5 	.word	0x91a2b3c5
 80030c8:	20000530 	.word	0x20000530
 80030cc:	40004400 	.word	0x40004400
 80030d0:	20009a30 	.word	0x20009a30
 80030d4:	0800bec0 	.word	0x0800bec0

080030d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003110 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030dc:	f7ff fc62 	bl	80029a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030e0:	480c      	ldr	r0, [pc, #48]	@ (8003114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030e2:	490d      	ldr	r1, [pc, #52]	@ (8003118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030e4:	4a0d      	ldr	r2, [pc, #52]	@ (800311c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e8:	e002      	b.n	80030f0 <LoopCopyDataInit>

080030ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ee:	3304      	adds	r3, #4

080030f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f4:	d3f9      	bcc.n	80030ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030fc:	e001      	b.n	8003102 <LoopFillZerobss>

080030fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003100:	3204      	adds	r2, #4

08003102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003104:	d3fb      	bcc.n	80030fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003106:	f006 fff9 	bl	800a0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310a:	f7fe feed 	bl	8001ee8 <main>
  bx  lr    
 800310e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003118:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800311c:	0800c3c0 	.word	0x0800c3c0
  ldr r2, =_sbss
 8003120:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003124:	20009c88 	.word	0x20009c88

08003128 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003128:	e7fe      	b.n	8003128 <CAN2_RX0_IRQHandler>
	...

0800312c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800312c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800312e:	4a0e      	ldr	r2, [pc, #56]	@ (8003168 <HAL_InitTick+0x3c>)
 8003130:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_InitTick+0x40>)
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
{
 8003136:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003138:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800313c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003140:	fbb3 f0f0 	udiv	r0, r3, r0
 8003144:	f000 fee0 	bl	8003f08 <HAL_SYSTICK_Config>
 8003148:	b908      	cbnz	r0, 800314e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314a:	2d0f      	cmp	r5, #15
 800314c:	d901      	bls.n	8003152 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800314e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003150:	bd38      	pop	{r3, r4, r5, pc}
 8003152:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003154:	4602      	mov	r2, r0
 8003156:	4629      	mov	r1, r5
 8003158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800315c:	f000 fe8a 	bl	8003e74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <HAL_InitTick+0x44>)
 8003162:	4620      	mov	r0, r4
 8003164:	601d      	str	r5, [r3, #0]
}
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	20000008 	.word	0x20000008
 800316c:	20000004 	.word	0x20000004
 8003170:	2000000c 	.word	0x2000000c

08003174 <HAL_Init>:
{
 8003174:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003176:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <HAL_Init+0x30>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003186:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800318e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003190:	2003      	movs	r0, #3
 8003192:	f000 fe5d 	bl	8003e50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003196:	200f      	movs	r0, #15
 8003198:	f7ff ffc8 	bl	800312c <HAL_InitTick>
  HAL_MspInit();
 800319c:	f7ff fb06 	bl	80027ac <HAL_MspInit>
}
 80031a0:	2000      	movs	r0, #0
 80031a2:	bd08      	pop	{r3, pc}
 80031a4:	40023c00 	.word	0x40023c00

080031a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80031a8:	4a03      	ldr	r2, [pc, #12]	@ (80031b8 <HAL_IncTick+0x10>)
 80031aa:	4b04      	ldr	r3, [pc, #16]	@ (80031bc <HAL_IncTick+0x14>)
 80031ac:	6811      	ldr	r1, [r2, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	440b      	add	r3, r1
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20009b1c 	.word	0x20009b1c
 80031bc:	20000008 	.word	0x20000008

080031c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80031c0:	4b01      	ldr	r3, [pc, #4]	@ (80031c8 <HAL_GetTick+0x8>)
 80031c2:	6818      	ldr	r0, [r3, #0]
}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20009b1c 	.word	0x20009b1c

080031cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff fff6 	bl	80031c0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80031d6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80031d8:	d002      	beq.n	80031e0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80031da:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <HAL_Delay+0x20>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031e0:	f7ff ffee 	bl	80031c0 <HAL_GetTick>
 80031e4:	1b40      	subs	r0, r0, r5
 80031e6:	42a0      	cmp	r0, r4
 80031e8:	d3fa      	bcc.n	80031e0 <HAL_Delay+0x14>
  {
  }
}
 80031ea:	bd38      	pop	{r3, r4, r5, pc}
 80031ec:	20000008 	.word	0x20000008

080031f0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f0:	2800      	cmp	r0, #0
 80031f2:	f000 809e 	beq.w	8003332 <HAL_ADC_Init+0x142>
{
 80031f6:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031f8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80031fa:	4604      	mov	r4, r0
 80031fc:	b13d      	cbz	r5, 800320e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003200:	06db      	lsls	r3, r3, #27
 8003202:	d50c      	bpl.n	800321e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003204:	2300      	movs	r3, #0
 8003206:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 800320a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 800320c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800320e:	f7fd ffe5 	bl	80011dc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003212:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003216:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321a:	06db      	lsls	r3, r3, #27
 800321c:	d4f2      	bmi.n	8003204 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800321e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003220:	4a47      	ldr	r2, [pc, #284]	@ (8003340 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8003222:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003226:	f023 0302 	bic.w	r3, r3, #2
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003230:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003232:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003234:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8003238:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800323a:	6851      	ldr	r1, [r2, #4]
 800323c:	6860      	ldr	r0, [r4, #4]
 800323e:	4301      	orrs	r1, r0
 8003240:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003242:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003244:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003246:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800324c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003256:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003258:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800325a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800325e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003266:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003268:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800326a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800326e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	4302      	orrs	r2, r0
 8003274:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003276:	4a33      	ldr	r2, [pc, #204]	@ (8003344 <HAL_ADC_Init+0x154>)
 8003278:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800327a:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800327c:	d051      	beq.n	8003322 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800327e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003282:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	4311      	orrs	r1, r2
 800328a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003292:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	4302      	orrs	r2, r0
 8003298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	f022 0202 	bic.w	r2, r2, #2
 80032a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	7e21      	ldrb	r1, [r4, #24]
 80032a6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80032aa:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ac:	f894 2020 	ldrb.w	r2, [r4, #32]
 80032b0:	2a00      	cmp	r2, #0
 80032b2:	d040      	beq.n	8003336 <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b4:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032bc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032c4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	3901      	subs	r1, #1
 80032ca:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80032ce:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032d2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032d4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032dc:	3901      	subs	r1, #1
 80032de:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80032e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032e4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032e6:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80032f4:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 80032f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003302:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003304:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003306:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800330a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800330c:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800330e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003310:	f023 0303 	bic.w	r3, r3, #3
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800331a:	2300      	movs	r3, #0
 800331c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003320:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003322:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	e7b3      	b.n	800329a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003332:	2001      	movs	r0, #1
}
 8003334:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	e7c7      	b.n	80032d0 <HAL_ADC_Init+0xe0>
 8003340:	40012300 	.word	0x40012300
 8003344:	0f000001 	.word	0x0f000001

08003348 <HAL_ADC_Start_DMA>:
{
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 800334c:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
{
 8003350:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003352:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8003354:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 8003356:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003358:	f000 808d 	beq.w	8003476 <HAL_ADC_Start_DMA+0x12e>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800335c:	682e      	ldr	r6, [r5, #0]
 800335e:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8003360:	2201      	movs	r2, #1
 8003362:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003366:	68b2      	ldr	r2, [r6, #8]
 8003368:	07d4      	lsls	r4, r2, #31
 800336a:	d414      	bmi.n	8003396 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 800336c:	68b2      	ldr	r2, [r6, #8]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003374:	4a43      	ldr	r2, [pc, #268]	@ (8003484 <HAL_ADC_Start_DMA+0x13c>)
 8003376:	6810      	ldr	r0, [r2, #0]
 8003378:	4a43      	ldr	r2, [pc, #268]	@ (8003488 <HAL_ADC_Start_DMA+0x140>)
 800337a:	fba2 2000 	umull	r2, r0, r2, r0
 800337e:	0c80      	lsrs	r0, r0, #18
 8003380:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003384:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8003386:	9a01      	ldr	r2, [sp, #4]
 8003388:	b12a      	cbz	r2, 8003396 <HAL_ADC_Start_DMA+0x4e>
      counter--;
 800338a:	9c01      	ldr	r4, [sp, #4]
 800338c:	3c01      	subs	r4, #1
 800338e:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8003390:	9801      	ldr	r0, [sp, #4]
 8003392:	2800      	cmp	r0, #0
 8003394:	d1f9      	bne.n	800338a <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003396:	68b2      	ldr	r2, [r6, #8]
 8003398:	05d0      	lsls	r0, r2, #23
 800339a:	d503      	bpl.n	80033a4 <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800339c:	68b2      	ldr	r2, [r6, #8]
 800339e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033a2:	60b2      	str	r2, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033a4:	68b2      	ldr	r2, [r6, #8]
 80033a6:	07d2      	lsls	r2, r2, #31
 80033a8:	d54d      	bpl.n	8003446 <HAL_ADC_Start_DMA+0xfe>
    ADC_STATE_CLR_SET(hadc->State,
 80033aa:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 80033ac:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 80033b0:	f020 0001 	bic.w	r0, r0, #1
 80033b4:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80033b8:	6428      	str	r0, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033ba:	6872      	ldr	r2, [r6, #4]
 80033bc:	0554      	lsls	r4, r2, #21
 80033be:	d505      	bpl.n	80033cc <HAL_ADC_Start_DMA+0x84>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033c0:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80033c2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80033c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033ca:	642a      	str	r2, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033cc:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ce:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033d4:	bf1c      	itt	ne
 80033d6:	6c6a      	ldrne	r2, [r5, #68]	@ 0x44
 80033d8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80033dc:	646a      	str	r2, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);   
 80033de:	2200      	movs	r2, #0
 80033e0:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033e4:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033e6:	4929      	ldr	r1, [pc, #164]	@ (800348c <HAL_ADC_Start_DMA+0x144>)
 80033e8:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033ea:	4929      	ldr	r1, [pc, #164]	@ (8003490 <HAL_ADC_Start_DMA+0x148>)
 80033ec:	6401      	str	r1, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033ee:	4929      	ldr	r1, [pc, #164]	@ (8003494 <HAL_ADC_Start_DMA+0x14c>)
 80033f0:	64c1      	str	r1, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033f2:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 80033f6:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f8:	6871      	ldr	r1, [r6, #4]
 80033fa:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80033fe:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003400:	68b1      	ldr	r1, [r6, #8]
 8003402:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8003406:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003408:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 800340c:	f000 fe2c 	bl	8004068 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003410:	4b21      	ldr	r3, [pc, #132]	@ (8003498 <HAL_ADC_Start_DMA+0x150>)
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	06d0      	lsls	r0, r2, #27
 8003416:	d121      	bne.n	800345c <HAL_ADC_Start_DMA+0x114>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003418:	682a      	ldr	r2, [r5, #0]
 800341a:	4920      	ldr	r1, [pc, #128]	@ (800349c <HAL_ADC_Start_DMA+0x154>)
 800341c:	428a      	cmp	r2, r1
 800341e:	d009      	beq.n	8003434 <HAL_ADC_Start_DMA+0xec>
 8003420:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8003424:	428a      	cmp	r2, r1
 8003426:	d029      	beq.n	800347c <HAL_ADC_Start_DMA+0x134>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003428:	491d      	ldr	r1, [pc, #116]	@ (80034a0 <HAL_ADC_Start_DMA+0x158>)
 800342a:	428a      	cmp	r2, r1
 800342c:	d113      	bne.n	8003456 <HAL_ADC_Start_DMA+0x10e>
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	06db      	lsls	r3, r3, #27
 8003432:	d410      	bmi.n	8003456 <HAL_ADC_Start_DMA+0x10e>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003434:	6893      	ldr	r3, [r2, #8]
 8003436:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
 800343a:	d10c      	bne.n	8003456 <HAL_ADC_Start_DMA+0x10e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800343c:	6893      	ldr	r3, [r2, #8]
 800343e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003442:	6093      	str	r3, [r2, #8]
 8003444:	e007      	b.n	8003456 <HAL_ADC_Start_DMA+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003446:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003448:	f043 0310 	orr.w	r3, r3, #16
 800344c:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8003456:	2000      	movs	r0, #0
}
 8003458:	b002      	add	sp, #8
 800345a:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800345c:	4a0f      	ldr	r2, [pc, #60]	@ (800349c <HAL_ADC_Start_DMA+0x154>)
 800345e:	682b      	ldr	r3, [r5, #0]
 8003460:	4293      	cmp	r3, r2
 8003462:	d1f8      	bne.n	8003456 <HAL_ADC_Start_DMA+0x10e>
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800346a:	d1f4      	bne.n	8003456 <HAL_ADC_Start_DMA+0x10e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	e7ef      	b.n	8003456 <HAL_ADC_Start_DMA+0x10e>
  __HAL_LOCK(hadc);
 8003476:	2002      	movs	r0, #2
}
 8003478:	b002      	add	sp, #8
 800347a:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	06d9      	lsls	r1, r3, #27
 8003480:	d0d8      	beq.n	8003434 <HAL_ADC_Start_DMA+0xec>
 8003482:	e7e8      	b.n	8003456 <HAL_ADC_Start_DMA+0x10e>
 8003484:	20000004 	.word	0x20000004
 8003488:	431bde83 	.word	0x431bde83
 800348c:	080035f5 	.word	0x080035f5
 8003490:	080034a9 	.word	0x080034a9
 8003494:	080035dd 	.word	0x080035dd
 8003498:	40012300 	.word	0x40012300
 800349c:	40012000 	.word	0x40012000
 80034a0:	40012200 	.word	0x40012200

080034a4 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop

080034a8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034aa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80034ac:	f7ff fffa 	bl	80034a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b0:	bd08      	pop	{r3, pc}
 80034b2:	bf00      	nop

080034b4 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop

080034b8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 80034bc:	6803      	ldr	r3, [r0, #0]
{
 80034be:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80034c0:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034c2:	685e      	ldr	r6, [r3, #4]
  if(tmp1 && tmp2)
 80034c4:	07aa      	lsls	r2, r5, #30
{
 80034c6:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80034c8:	d501      	bpl.n	80034ce <HAL_ADC_IRQHandler+0x12>
 80034ca:	06b0      	lsls	r0, r6, #26
 80034cc:	d44d      	bmi.n	800356a <HAL_ADC_IRQHandler+0xae>
  if(tmp1 && tmp2)
 80034ce:	0769      	lsls	r1, r5, #29
 80034d0:	d501      	bpl.n	80034d6 <HAL_ADC_IRQHandler+0x1a>
 80034d2:	0632      	lsls	r2, r6, #24
 80034d4:	d417      	bmi.n	8003506 <HAL_ADC_IRQHandler+0x4a>
  if(tmp1 && tmp2)
 80034d6:	07e9      	lsls	r1, r5, #31
 80034d8:	d501      	bpl.n	80034de <HAL_ADC_IRQHandler+0x22>
 80034da:	0672      	lsls	r2, r6, #25
 80034dc:	d404      	bmi.n	80034e8 <HAL_ADC_IRQHandler+0x2c>
  if(tmp1 && tmp2)
 80034de:	06a9      	lsls	r1, r5, #26
 80034e0:	d501      	bpl.n	80034e6 <HAL_ADC_IRQHandler+0x2a>
 80034e2:	0172      	lsls	r2, r6, #5
 80034e4:	d469      	bmi.n	80035ba <HAL_ADC_IRQHandler+0xfe>
}
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	07d0      	lsls	r0, r2, #31
 80034ec:	d5f7      	bpl.n	80034de <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f4:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7ff ffdc 	bl	80034b4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	f06f 0201 	mvn.w	r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e7eb      	b.n	80034de <HAL_ADC_IRQHandler+0x22>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003506:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003508:	06d0      	lsls	r0, r2, #27
 800350a:	d403      	bmi.n	8003514 <HAL_ADC_IRQHandler+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800350c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800350e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003512:	6422      	str	r2, [r4, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 800351a:	d11e      	bne.n	800355a <HAL_ADC_IRQHandler+0x9e>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800351c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800351e:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8003522:	d002      	beq.n	800352a <HAL_ADC_IRQHandler+0x6e>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003524:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003526:	0551      	lsls	r1, r2, #21
 8003528:	d417      	bmi.n	800355a <HAL_ADC_IRQHandler+0x9e>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800352a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800352c:	0552      	lsls	r2, r2, #21
 800352e:	d414      	bmi.n	800355a <HAL_ADC_IRQHandler+0x9e>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003530:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003532:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003536:	d110      	bne.n	800355a <HAL_ADC_IRQHandler+0x9e>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003538:	7e22      	ldrb	r2, [r4, #24]
 800353a:	b972      	cbnz	r2, 800355a <HAL_ADC_IRQHandler+0x9e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003542:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003544:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800354a:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800354c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800354e:	05d8      	lsls	r0, r3, #23
 8003550:	d403      	bmi.n	800355a <HAL_ADC_IRQHandler+0x9e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003552:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800355a:	4620      	mov	r0, r4
 800355c:	f000 f928 	bl	80037b0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	f06f 020c 	mvn.w	r2, #12
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e7b5      	b.n	80034d6 <HAL_ADC_IRQHandler+0x1a>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800356a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800356c:	06d1      	lsls	r1, r2, #27
 800356e:	d403      	bmi.n	8003578 <HAL_ADC_IRQHandler+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003570:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	6422      	str	r2, [r4, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800357e:	d114      	bne.n	80035aa <HAL_ADC_IRQHandler+0xee>
 8003580:	7e22      	ldrb	r2, [r4, #24]
 8003582:	b992      	cbnz	r2, 80035aa <HAL_ADC_IRQHandler+0xee>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003586:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 800358a:	d123      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x118>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	f022 0220 	bic.w	r2, r2, #32
 8003592:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003594:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003596:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800359a:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800359c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800359e:	04d8      	lsls	r0, r3, #19
 80035a0:	d403      	bmi.n	80035aa <HAL_ADC_IRQHandler+0xee>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80035aa:	4620      	mov	r0, r4
 80035ac:	f7fd fcac 	bl	8000f08 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	f06f 0212 	mvn.w	r2, #18
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e789      	b.n	80034ce <HAL_ADC_IRQHandler+0x12>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035ba:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035bc:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035c0:	f042 0202 	orr.w	r2, r2, #2
 80035c4:	6462      	str	r2, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 80035c6:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035c8:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80035ca:	f7ff ff75 	bl	80034b8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	601d      	str	r5, [r3, #0]
}
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035d4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035d6:	0552      	lsls	r2, r2, #21
 80035d8:	d4e7      	bmi.n	80035aa <HAL_ADC_IRQHandler+0xee>
 80035da:	e7d7      	b.n	800358c <HAL_ADC_IRQHandler+0xd0>

080035dc <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035dc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80035de:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80035e0:	2340      	movs	r3, #64	@ 0x40
 80035e2:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035e4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	6443      	str	r3, [r0, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035ec:	f7ff ff64 	bl	80034b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035f0:	bd08      	pop	{r3, pc}
 80035f2:	bf00      	nop

080035f4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035f4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035f8:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 80035fc:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003600:	d123      	bne.n	800364a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003606:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800360a:	688a      	ldr	r2, [r1, #8]
 800360c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003610:	d117      	bne.n	8003642 <ADC_DMAConvCplt+0x4e>
 8003612:	7e1a      	ldrb	r2, [r3, #24]
 8003614:	b9aa      	cbnz	r2, 8003642 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003616:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003618:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 800361c:	d002      	beq.n	8003624 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800361e:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003620:	0550      	lsls	r0, r2, #21
 8003622:	d40e      	bmi.n	8003642 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003624:	684a      	ldr	r2, [r1, #4]
 8003626:	f022 0220 	bic.w	r2, r2, #32
 800362a:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800362c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800362e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003634:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003636:	04d1      	lsls	r1, r2, #19
 8003638:	d403      	bmi.n	8003642 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fc60 	bl	8000f08 <HAL_ADC_ConvCpltCallback>
}
 8003648:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800364a:	06d2      	lsls	r2, r2, #27
 800364c:	d404      	bmi.n	8003658 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8003650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff2d 	bl	80034b8 <HAL_ADC_ErrorCallback>
}
 800365e:	bd10      	pop	{r4, pc}

08003660 <HAL_ADC_ConfigChannel>:
{
 8003660:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003662:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003666:	b082      	sub	sp, #8
 8003668:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 800366a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003672:	f000 8093 	beq.w	800379c <HAL_ADC_ConfigChannel+0x13c>
 8003676:	2301      	movs	r3, #1
 8003678:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800367c:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800367e:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003680:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003682:	2d09      	cmp	r5, #9
 8003684:	b2a8      	uxth	r0, r5
 8003686:	d828      	bhi.n	80036da <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003688:	691e      	ldr	r6, [r3, #16]
 800368a:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800368e:	f04f 0c07 	mov.w	ip, #7
 8003692:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003696:	ea26 060c 	bic.w	r6, r6, ip
 800369a:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800369c:	691e      	ldr	r6, [r3, #16]
 800369e:	fa04 f40e 	lsl.w	r4, r4, lr
 80036a2:	4334      	orrs	r4, r6
 80036a4:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 80036a6:	684c      	ldr	r4, [r1, #4]
 80036a8:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036aa:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 80036ae:	d82a      	bhi.n	8003706 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036b0:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80036b2:	3905      	subs	r1, #5
 80036b4:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036b8:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036ba:	fa0c f101 	lsl.w	r1, ip, r1
 80036be:	ea24 0101 	bic.w	r1, r4, r1
 80036c2:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80036c6:	4308      	orrs	r0, r1
 80036c8:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036ca:	4936      	ldr	r1, [pc, #216]	@ (80037a4 <HAL_ADC_ConfigChannel+0x144>)
 80036cc:	428b      	cmp	r3, r1
 80036ce:	d02b      	beq.n	8003728 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 80036d6:	b002      	add	sp, #8
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036da:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80036de:	68de      	ldr	r6, [r3, #12]
 80036e0:	f1ac 0c1e 	sub.w	ip, ip, #30
 80036e4:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036e8:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036ec:	fa0e fc0c 	lsl.w	ip, lr, ip
 80036f0:	ea26 060c 	bic.w	r6, r6, ip
 80036f4:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036f6:	68de      	ldr	r6, [r3, #12]
 80036f8:	4334      	orrs	r4, r6
 80036fa:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 80036fc:	684c      	ldr	r4, [r1, #4]
 80036fe:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003700:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8003704:	d9d4      	bls.n	80036b0 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8003706:	2c0c      	cmp	r4, #12
 8003708:	d834      	bhi.n	8003774 <HAL_ADC_ConfigChannel+0x114>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800370a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800370c:	3923      	subs	r1, #35	@ 0x23
 800370e:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003710:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003712:	fa06 f101 	lsl.w	r1, r6, r1
 8003716:	ea24 0101 	bic.w	r1, r4, r1
 800371a:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800371c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800371e:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003720:	4920      	ldr	r1, [pc, #128]	@ (80037a4 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003722:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003724:	428b      	cmp	r3, r1
 8003726:	d1d3      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x70>
 8003728:	2d12      	cmp	r5, #18
 800372a:	d030      	beq.n	800378e <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800372c:	f1a5 0310 	sub.w	r3, r5, #16
 8003730:	2b01      	cmp	r3, #1
 8003732:	d8cd      	bhi.n	80036d0 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003734:	491c      	ldr	r1, [pc, #112]	@ (80037a8 <HAL_ADC_ConfigChannel+0x148>)
 8003736:	684b      	ldr	r3, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003738:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800373a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800373e:	604b      	str	r3, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003740:	d1c6      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003742:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_ADC_ConfigChannel+0x14c>)
 8003744:	f101 7146 	add.w	r1, r1, #51904512	@ 0x3180000
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f501 312e 	add.w	r1, r1, #178176	@ 0x2b800
 800374e:	f201 3183 	addw	r1, r1, #899	@ 0x383
 8003752:	fba1 1303 	umull	r1, r3, r1, r3
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003760:	9b01      	ldr	r3, [sp, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0b4      	beq.n	80036d0 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003766:	9b01      	ldr	r3, [sp, #4]
 8003768:	3b01      	subs	r3, #1
 800376a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800376c:	9b01      	ldr	r3, [sp, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f9      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x106>
 8003772:	e7ad      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003774:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8003776:	3941      	subs	r1, #65	@ 0x41
 8003778:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800377a:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800377c:	fa06 f101 	lsl.w	r1, r6, r1
 8003780:	ea24 0101 	bic.w	r1, r4, r1
 8003784:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003786:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003788:	4308      	orrs	r0, r1
 800378a:	62d8      	str	r0, [r3, #44]	@ 0x2c
 800378c:	e79d      	b.n	80036ca <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800378e:	f8d1 3304 	ldr.w	r3, [r1, #772]	@ 0x304
 8003792:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003796:	f8c1 3304 	str.w	r3, [r1, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800379a:	e799      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800379c:	2002      	movs	r0, #2
}
 800379e:	b002      	add	sp, #8
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	bf00      	nop
 80037a4:	40012000 	.word	0x40012000
 80037a8:	40012300 	.word	0x40012300
 80037ac:	20000004 	.word	0x20000004

080037b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop

080037b4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d07b      	beq.n	80038b0 <HAL_CAN_Init+0xfc>
{
 80037b8:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80037be:	4604      	mov	r4, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d072      	beq.n	80038aa <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037c4:	6822      	ldr	r2, [r4, #0]
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ce:	f7ff fcf7 	bl	80031c0 <HAL_GetTick>
 80037d2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037d4:	e004      	b.n	80037e0 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037d6:	f7ff fcf3 	bl	80031c0 <HAL_GetTick>
 80037da:	1b40      	subs	r0, r0, r5
 80037dc:	280a      	cmp	r0, #10
 80037de:	d85b      	bhi.n	8003898 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	07d1      	lsls	r1, r2, #31
 80037e6:	d5f6      	bpl.n	80037d6 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f022 0202 	bic.w	r2, r2, #2
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f0:	f7ff fce6 	bl	80031c0 <HAL_GetTick>
 80037f4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037f6:	e004      	b.n	8003802 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037f8:	f7ff fce2 	bl	80031c0 <HAL_GetTick>
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	280a      	cmp	r0, #10
 8003800:	d84a      	bhi.n	8003898 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	0792      	lsls	r2, r2, #30
 8003808:	d4f6      	bmi.n	80037f8 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800380a:	7e22      	ldrb	r2, [r4, #24]
 800380c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	bf0c      	ite	eq
 8003812:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003816:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 800381a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800381c:	7e62      	ldrb	r2, [r4, #25]
 800381e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	bf0c      	ite	eq
 8003824:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003828:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800382e:	7ea2      	ldrb	r2, [r4, #26]
 8003830:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	bf0c      	ite	eq
 8003836:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800383a:	f022 0220 	bicne.w	r2, r2, #32
 800383e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003840:	7ee2      	ldrb	r2, [r4, #27]
 8003842:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	bf0c      	ite	eq
 8003848:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800384c:	f042 0210 	orrne.w	r2, r2, #16
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003852:	7f22      	ldrb	r2, [r4, #28]
 8003854:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	bf0c      	ite	eq
 800385a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800385e:	f022 0208 	bicne.w	r2, r2, #8
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003864:	7f62      	ldrb	r2, [r4, #29]
 8003866:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	bf0c      	ite	eq
 800386c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003870:	f022 0204 	bicne.w	r2, r2, #4
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003876:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800387a:	6921      	ldr	r1, [r4, #16]
 800387c:	4302      	orrs	r2, r0
 800387e:	430a      	orrs	r2, r1
 8003880:	6960      	ldr	r0, [r4, #20]
 8003882:	6861      	ldr	r1, [r4, #4]
 8003884:	4302      	orrs	r2, r0
 8003886:	3901      	subs	r1, #1
 8003888:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800388a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800388c:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800388e:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003890:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003892:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8003896:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003898:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800389a:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800389c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a0:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80038a2:	f884 2020 	strb.w	r2, [r4, #32]
    return HAL_ERROR;
 80038a6:	2001      	movs	r0, #1
}
 80038a8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80038aa:	f7fd fe4b 	bl	8001544 <HAL_CAN_MspInit>
 80038ae:	e789      	b.n	80037c4 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80038b0:	2001      	movs	r0, #1
}
 80038b2:	4770      	bx	lr

080038b4 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038b4:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80038b8:	3a01      	subs	r2, #1
 80038ba:	2a01      	cmp	r2, #1
 80038bc:	d906      	bls.n	80038cc <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038be:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80038c0:	4603      	mov	r3, r0
 80038c2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000

    return HAL_ERROR;
 80038c6:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80038ca:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038cc:	4b40      	ldr	r3, [pc, #256]	@ (80039d0 <HAL_CAN_ConfigFilter+0x11c>)
 80038ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038d2:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038d4:	4302      	orrs	r2, r0
{
 80038d6:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80038dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80038e0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80038e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80038e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80038ec:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80038ee:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80038f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038f6:	694a      	ldr	r2, [r1, #20]
 80038f8:	f002 041f 	and.w	r4, r2, #31
 80038fc:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80038fe:	f8d3 421c 	ldr.w	r4, [r3, #540]	@ 0x21c
 8003902:	ea24 0400 	bic.w	r4, r4, r0
 8003906:	f8c3 421c 	str.w	r4, [r3, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800390a:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800390c:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800390e:	2d00      	cmp	r5, #0
 8003910:	d145      	bne.n	800399e <HAL_CAN_ConfigFilter+0xea>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003912:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
 8003916:	4025      	ands	r5, r4
 8003918:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800391c:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800391e:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003920:	888b      	ldrh	r3, [r1, #4]
 8003922:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003926:	f502 42c8 	add.w	r2, r2, #25600	@ 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800392a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800392e:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003932:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003934:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003936:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800393a:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800393e:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003940:	4a23      	ldr	r2, [pc, #140]	@ (80039d0 <HAL_CAN_ConfigFilter+0x11c>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003942:	bb33      	cbnz	r3, 8003992 <HAL_CAN_ConfigFilter+0xde>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003944:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 8003948:	4023      	ands	r3, r4
 800394a:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800394e:	690b      	ldr	r3, [r1, #16]
 8003950:	b9c3      	cbnz	r3, 8003984 <HAL_CAN_ConfigFilter+0xd0>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003952:	4b1f      	ldr	r3, [pc, #124]	@ (80039d0 <HAL_CAN_ConfigFilter+0x11c>)
 8003954:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003958:	4014      	ands	r4, r2
 800395a:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800395e:	6a0b      	ldr	r3, [r1, #32]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_CAN_ConfigFilter+0xbc>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003964:	4a1a      	ldr	r2, [pc, #104]	@ (80039d0 <HAL_CAN_ConfigFilter+0x11c>)
 8003966:	f8d2 321c 	ldr.w	r3, [r2, #540]	@ 0x21c
 800396a:	4303      	orrs	r3, r0
 800396c:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003970:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <HAL_CAN_ConfigFilter+0x11c>)
 8003972:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8003976:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 800397a:	2000      	movs	r0, #0
}
 800397c:	bc30      	pop	{r4, r5}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800397e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8003982:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003984:	4a12      	ldr	r2, [pc, #72]	@ (80039d0 <HAL_CAN_ConfigFilter+0x11c>)
 8003986:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 800398a:	4303      	orrs	r3, r0
 800398c:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 8003990:	e7e5      	b.n	800395e <HAL_CAN_ConfigFilter+0xaa>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003992:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 8003996:	4303      	orrs	r3, r0
 8003998:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
 800399c:	e7d7      	b.n	800394e <HAL_CAN_ConfigFilter+0x9a>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800399e:	2d01      	cmp	r5, #1
 80039a0:	d1cd      	bne.n	800393e <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80039a2:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
 80039a6:	4305      	orrs	r5, r0
 80039a8:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039ac:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039ae:	680d      	ldr	r5, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039b0:	888b      	ldrh	r3, [r1, #4]
 80039b2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80039b6:	f502 42c8 	add.w	r2, r2, #25600	@ 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039ba:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039be:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039c2:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039c4:	898b      	ldrh	r3, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039c6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039ca:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244
 80039ce:	e7b6      	b.n	800393e <HAL_CAN_ConfigFilter+0x8a>
 80039d0:	40006400 	.word	0x40006400

080039d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80039d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80039da:	2b01      	cmp	r3, #1
{
 80039dc:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80039de:	d005      	beq.n	80039ec <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80039e0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80039e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039e6:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 80039e8:	2001      	movs	r0, #1

    return HAL_ERROR;
  }
}
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039ec:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039ee:	2302      	movs	r3, #2
 80039f0:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80039fc:	f7ff fbe0 	bl	80031c0 <HAL_GetTick>
 8003a00:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a02:	e004      	b.n	8003a0e <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a04:	f7ff fbdc 	bl	80031c0 <HAL_GetTick>
 8003a08:	1b43      	subs	r3, r0, r5
 8003a0a:	2b0a      	cmp	r3, #10
 8003a0c:	d807      	bhi.n	8003a1e <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f013 0301 	ands.w	r3, r3, #1
 8003a16:	d1f5      	bne.n	8003a04 <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a18:	6263      	str	r3, [r4, #36]	@ 0x24
    return HAL_OK;
 8003a1a:	4618      	mov	r0, r3
}
 8003a1c:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a20:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a26:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a28:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 8003a2c:	e7dc      	b.n	80039e8 <HAL_CAN_Start+0x14>
 8003a2e:	bf00      	nop

08003a30 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a30:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a34:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003a38:	f1bc 0f01 	cmp.w	ip, #1
 8003a3c:	d865      	bhi.n	8003b0a <HAL_CAN_GetRxMessage+0xda>
{
 8003a3e:	b570      	push	{r4, r5, r6, lr}
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a40:	6804      	ldr	r4, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a42:	b941      	cbnz	r1, 8003a56 <HAL_CAN_GetRxMessage+0x26>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a44:	68e5      	ldr	r5, [r4, #12]
 8003a46:	07ae      	lsls	r6, r5, #30
 8003a48:	d108      	bne.n	8003a5c <HAL_CAN_GetRxMessage+0x2c>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a4a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a50:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8003a52:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a56:	6925      	ldr	r5, [r4, #16]
 8003a58:	07ad      	lsls	r5, r5, #30
 8003a5a:	d0f6      	beq.n	8003a4a <HAL_CAN_GetRxMessage+0x1a>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a5c:	eb04 1c01 	add.w	ip, r4, r1, lsl #4
 8003a60:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8003a64:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 8003a68:	f005 0504 	and.w	r5, r5, #4
 8003a6c:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	d051      	beq.n	8003b16 <HAL_CAN_GetRxMessage+0xe6>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a72:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 8003a76:	08ed      	lsrs	r5, r5, #3
 8003a78:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a7a:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 8003a7e:	f005 0502 	and.w	r5, r5, #2
 8003a82:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a84:	f8dc 51b4 	ldr.w	r5, [ip, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a88:	f8dc 61b4 	ldr.w	r6, [ip, #436]	@ 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a8c:	f005 050f 	and.w	r5, r5, #15
 8003a90:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a92:	4474      	add	r4, lr
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a94:	f8dc 51b4 	ldr.w	r5, [ip, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a98:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8003a9c:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a9e:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003aa0:	f8d4 61b8 	ldr.w	r6, [r4, #440]	@ 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003aa4:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003aa6:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003aa8:	6802      	ldr	r2, [r0, #0]
 8003aaa:	4472      	add	r2, lr
 8003aac:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8003ab0:	0a12      	lsrs	r2, r2, #8
 8003ab2:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ab4:	6802      	ldr	r2, [r0, #0]
 8003ab6:	4472      	add	r2, lr
 8003ab8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8003abc:	0c12      	lsrs	r2, r2, #16
 8003abe:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ac0:	6802      	ldr	r2, [r0, #0]
 8003ac2:	4472      	add	r2, lr
 8003ac4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8003ac8:	0e12      	lsrs	r2, r2, #24
 8003aca:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003acc:	6802      	ldr	r2, [r0, #0]
 8003ace:	4472      	add	r2, lr
 8003ad0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8003ad4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ad6:	6802      	ldr	r2, [r0, #0]
 8003ad8:	4472      	add	r2, lr
 8003ada:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8003ade:	0a12      	lsrs	r2, r2, #8
 8003ae0:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ae2:	6802      	ldr	r2, [r0, #0]
 8003ae4:	4472      	add	r2, lr
 8003ae6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8003aea:	0c12      	lsrs	r2, r2, #16
 8003aec:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003aee:	6802      	ldr	r2, [r0, #0]
 8003af0:	4472      	add	r2, lr
 8003af2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8003af6:	0e12      	lsrs	r2, r2, #24
 8003af8:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003afa:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003afc:	b981      	cbnz	r1, 8003b20 <HAL_CAN_GetRxMessage+0xf0>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003afe:	68d3      	ldr	r3, [r2, #12]
 8003b00:	f043 0320 	orr.w	r3, r3, #32
 8003b04:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003b06:	2000      	movs	r0, #0
}
 8003b08:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b0a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b10:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8003b12:	2001      	movs	r0, #1
}
 8003b14:	4770      	bx	lr
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b16:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 8003b1a:	0d6d      	lsrs	r5, r5, #21
 8003b1c:	6015      	str	r5, [r2, #0]
 8003b1e:	e7ac      	b.n	8003a7a <HAL_CAN_GetRxMessage+0x4a>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b20:	6913      	ldr	r3, [r2, #16]
 8003b22:	f043 0320 	orr.w	r3, r3, #32
 8003b26:	6113      	str	r3, [r2, #16]
 8003b28:	e7ed      	b.n	8003b06 <HAL_CAN_GetRxMessage+0xd6>
 8003b2a:	bf00      	nop

08003b2c <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b2c:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b30:	3a01      	subs	r2, #1
 8003b32:	2a01      	cmp	r2, #1
{
 8003b34:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003b36:	d905      	bls.n	8003b44 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b38:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003b3a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000

    return HAL_ERROR;
 8003b3e:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b40:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8003b42:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b44:	6802      	ldr	r2, [r0, #0]
 8003b46:	6953      	ldr	r3, [r2, #20]
 8003b48:	430b      	orrs	r3, r1
    return HAL_OK;
 8003b4a:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b4c:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8003b4e:	4770      	bx	lr

08003b50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop

08003b54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop

08003b58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop

08003b60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop

08003b64 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop

08003b68 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop

08003b6c <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop

08003b70 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop

08003b78 <HAL_CAN_IRQHandler>:
{
 8003b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b7c:	6803      	ldr	r3, [r0, #0]
 8003b7e:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b80:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b84:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b86:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b8a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b8e:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b92:	f014 0601 	ands.w	r6, r4, #1
{
 8003b96:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b98:	d01f      	beq.n	8003bda <HAL_CAN_IRQHandler+0x62>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b9a:	07f9      	lsls	r1, r7, #31
 8003b9c:	f100 8097 	bmi.w	8003cce <HAL_CAN_IRQHandler+0x156>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ba0:	2600      	movs	r6, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ba2:	05f9      	lsls	r1, r7, #23
 8003ba4:	d50b      	bpl.n	8003bbe <HAL_CAN_IRQHandler+0x46>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ba6:	682b      	ldr	r3, [r5, #0]
 8003ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bac:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003bae:	05ba      	lsls	r2, r7, #22
 8003bb0:	f100 80f5 	bmi.w	8003d9e <HAL_CAN_IRQHandler+0x226>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003bb4:	057b      	lsls	r3, r7, #21
 8003bb6:	f140 80e8 	bpl.w	8003d8a <HAL_CAN_IRQHandler+0x212>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003bba:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bbe:	03f9      	lsls	r1, r7, #15
 8003bc0:	d50b      	bpl.n	8003bda <HAL_CAN_IRQHandler+0x62>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bc2:	682b      	ldr	r3, [r5, #0]
 8003bc4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bc8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003bca:	03ba      	lsls	r2, r7, #14
 8003bcc:	f100 80eb 	bmi.w	8003da6 <HAL_CAN_IRQHandler+0x22e>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003bd0:	037b      	lsls	r3, r7, #13
 8003bd2:	f140 80df 	bpl.w	8003d94 <HAL_CAN_IRQHandler+0x21c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bd6:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003bda:	0721      	lsls	r1, r4, #28
 8003bdc:	d502      	bpl.n	8003be4 <HAL_CAN_IRQHandler+0x6c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003bde:	f01b 0f10 	tst.w	fp, #16
 8003be2:	d16e      	bne.n	8003cc2 <HAL_CAN_IRQHandler+0x14a>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003be4:	0762      	lsls	r2, r4, #29
 8003be6:	d503      	bpl.n	8003bf0 <HAL_CAN_IRQHandler+0x78>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003be8:	f01b 0f08 	tst.w	fp, #8
 8003bec:	f040 8097 	bne.w	8003d1e <HAL_CAN_IRQHandler+0x1a6>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003bf0:	07a3      	lsls	r3, r4, #30
 8003bf2:	d503      	bpl.n	8003bfc <HAL_CAN_IRQHandler+0x84>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	079f      	lsls	r7, r3, #30
 8003bfa:	d17a      	bne.n	8003cf2 <HAL_CAN_IRQHandler+0x17a>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bfc:	0660      	lsls	r0, r4, #25
 8003bfe:	d502      	bpl.n	8003c06 <HAL_CAN_IRQHandler+0x8e>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c00:	f01a 0f10 	tst.w	sl, #16
 8003c04:	d157      	bne.n	8003cb6 <HAL_CAN_IRQHandler+0x13e>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003c06:	06a1      	lsls	r1, r4, #26
 8003c08:	d502      	bpl.n	8003c10 <HAL_CAN_IRQHandler+0x98>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003c0a:	f01a 0f08 	tst.w	sl, #8
 8003c0e:	d169      	bne.n	8003ce4 <HAL_CAN_IRQHandler+0x16c>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c10:	06e2      	lsls	r2, r4, #27
 8003c12:	d503      	bpl.n	8003c1c <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	079b      	lsls	r3, r3, #30
 8003c1a:	d16e      	bne.n	8003cfa <HAL_CAN_IRQHandler+0x182>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c1c:	03a7      	lsls	r7, r4, #14
 8003c1e:	d502      	bpl.n	8003c26 <HAL_CAN_IRQHandler+0xae>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c20:	f018 0f10 	tst.w	r8, #16
 8003c24:	d16d      	bne.n	8003d02 <HAL_CAN_IRQHandler+0x18a>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c26:	03e0      	lsls	r0, r4, #15
 8003c28:	d502      	bpl.n	8003c30 <HAL_CAN_IRQHandler+0xb8>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c2a:	f018 0f08 	tst.w	r8, #8
 8003c2e:	d16f      	bne.n	8003d10 <HAL_CAN_IRQHandler+0x198>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c30:	0421      	lsls	r1, r4, #16
 8003c32:	d53c      	bpl.n	8003cae <HAL_CAN_IRQHandler+0x136>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c34:	f018 0f04 	tst.w	r8, #4
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c38:	682b      	ldr	r3, [r5, #0]
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c3a:	d036      	beq.n	8003caa <HAL_CAN_IRQHandler+0x132>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c3c:	05e2      	lsls	r2, r4, #23
 8003c3e:	d504      	bpl.n	8003c4a <HAL_CAN_IRQHandler+0xd2>
 8003c40:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c44:	bf18      	it	ne
 8003c46:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c4a:	05a7      	lsls	r7, r4, #22
 8003c4c:	d46e      	bmi.n	8003d2c <HAL_CAN_IRQHandler+0x1b4>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c4e:	0561      	lsls	r1, r4, #21
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c50:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c54:	d525      	bpl.n	8003ca2 <HAL_CAN_IRQHandler+0x12a>
 8003c56:	f019 0f04 	tst.w	r9, #4
 8003c5a:	d022      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x12a>
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c5c:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c60:	2a00      	cmp	r2, #0
 8003c62:	d071      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x1d0>
 8003c64:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 8003c68:	d06e      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x1d0>
        switch (esrflags & CAN_ESR_LEC)
 8003c6a:	f1b9 0f40 	cmp.w	r9, #64	@ 0x40
 8003c6e:	f000 80c0 	beq.w	8003df2 <HAL_CAN_IRQHandler+0x27a>
 8003c72:	d86c      	bhi.n	8003d4e <HAL_CAN_IRQHandler+0x1d6>
 8003c74:	f1b9 0f20 	cmp.w	r9, #32
 8003c78:	f000 80a7 	beq.w	8003dca <HAL_CAN_IRQHandler+0x252>
 8003c7c:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8003c80:	d174      	bne.n	8003d6c <HAL_CAN_IRQHandler+0x1f4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c82:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c84:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c8a:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c8c:	f046 0620 	orr.w	r6, r6, #32
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c90:	6059      	str	r1, [r3, #4]
    hcan->ErrorCode |= errorcode;
 8003c92:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003c94:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 8003c96:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8003c98:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003c9a:	f7fd fba5 	bl	80013e8 <HAL_CAN_ErrorCallback>
}
 8003c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ca2:	b112      	cbz	r2, 8003caa <HAL_CAN_IRQHandler+0x132>
 8003ca4:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 8003ca8:	d1df      	bne.n	8003c6a <HAL_CAN_IRQHandler+0xf2>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003caa:	2204      	movs	r2, #4
 8003cac:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003cae:	2e00      	cmp	r6, #0
 8003cb0:	d1ef      	bne.n	8003c92 <HAL_CAN_IRQHandler+0x11a>
}
 8003cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003cb6:	682b      	ldr	r3, [r5, #0]
 8003cb8:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003cba:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003cbe:	611a      	str	r2, [r3, #16]
 8003cc0:	e7a1      	b.n	8003c06 <HAL_CAN_IRQHandler+0x8e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003cc2:	682b      	ldr	r3, [r5, #0]
 8003cc4:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003cc6:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	e78a      	b.n	8003be4 <HAL_CAN_IRQHandler+0x6c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003cce:	2201      	movs	r2, #1
 8003cd0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003cd2:	07ba      	lsls	r2, r7, #30
 8003cd4:	d435      	bmi.n	8003d42 <HAL_CAN_IRQHandler+0x1ca>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003cd6:	077b      	lsls	r3, r7, #29
 8003cd8:	d454      	bmi.n	8003d84 <HAL_CAN_IRQHandler+0x20c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cda:	073e      	lsls	r6, r7, #28
 8003cdc:	d57e      	bpl.n	8003ddc <HAL_CAN_IRQHandler+0x264>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003cde:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8003ce2:	e75e      	b.n	8003ba2 <HAL_CAN_IRQHandler+0x2a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003cea:	4628      	mov	r0, r5
 8003cec:	f7ff ff3e 	bl	8003b6c <HAL_CAN_RxFifo1FullCallback>
 8003cf0:	e78e      	b.n	8003c10 <HAL_CAN_IRQHandler+0x98>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f7fd fb3c 	bl	8001370 <HAL_CAN_RxFifo0MsgPendingCallback>
 8003cf8:	e780      	b.n	8003bfc <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f7ff ff34 	bl	8003b68 <HAL_CAN_RxFifo1MsgPendingCallback>
 8003d00:	e78c      	b.n	8003c1c <HAL_CAN_IRQHandler+0xa4>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	2210      	movs	r2, #16
 8003d06:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f7ff ff31 	bl	8003b70 <HAL_CAN_SleepCallback>
 8003d0e:	e78a      	b.n	8003c26 <HAL_CAN_IRQHandler+0xae>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	2208      	movs	r2, #8
 8003d14:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d16:	4628      	mov	r0, r5
 8003d18:	f7ff ff2c 	bl	8003b74 <HAL_CAN_WakeUpFromRxMsgCallback>
 8003d1c:	e788      	b.n	8003c30 <HAL_CAN_IRQHandler+0xb8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d1e:	682b      	ldr	r3, [r5, #0]
 8003d20:	2208      	movs	r2, #8
 8003d22:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d24:	4628      	mov	r0, r5
 8003d26:	f7fd fb7f 	bl	8001428 <HAL_CAN_RxFifo0FullCallback>
 8003d2a:	e761      	b.n	8003bf0 <HAL_CAN_IRQHandler+0x78>
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d2c:	f019 0f02 	tst.w	r9, #2
 8003d30:	d08d      	beq.n	8003c4e <HAL_CAN_IRQHandler+0xd6>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d32:	0560      	lsls	r0, r4, #21
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d34:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d38:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d3c:	d48b      	bmi.n	8003c56 <HAL_CAN_IRQHandler+0xde>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d3e:	b11a      	cbz	r2, 8003d48 <HAL_CAN_IRQHandler+0x1d0>
 8003d40:	e790      	b.n	8003c64 <HAL_CAN_IRQHandler+0xec>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d42:	f7ff ff05 	bl	8003b50 <HAL_CAN_TxMailbox0CompleteCallback>
 8003d46:	e72b      	b.n	8003ba0 <HAL_CAN_IRQHandler+0x28>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d48:	2204      	movs	r2, #4
 8003d4a:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d4c:	e7a1      	b.n	8003c92 <HAL_CAN_IRQHandler+0x11a>
        switch (esrflags & CAN_ESR_LEC)
 8003d4e:	f1b9 0f50 	cmp.w	r9, #80	@ 0x50
 8003d52:	d02c      	beq.n	8003dae <HAL_CAN_IRQHandler+0x236>
 8003d54:	f1b9 0f60 	cmp.w	r9, #96	@ 0x60
 8003d58:	d132      	bne.n	8003dc0 <HAL_CAN_IRQHandler+0x248>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d5a:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d5c:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d62:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d64:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d68:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d6a:	e792      	b.n	8003c92 <HAL_CAN_IRQHandler+0x11a>
        switch (esrflags & CAN_ESR_LEC)
 8003d6c:	f1b9 0f10 	cmp.w	r9, #16
 8003d70:	d126      	bne.n	8003dc0 <HAL_CAN_IRQHandler+0x248>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d72:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d74:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d76:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d7a:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_STF;
 8003d7c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d80:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d82:	e786      	b.n	8003c92 <HAL_CAN_IRQHandler+0x11a>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d84:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8003d88:	e70b      	b.n	8003ba2 <HAL_CAN_IRQHandler+0x2a>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d8a:	0538      	lsls	r0, r7, #20
 8003d8c:	d52d      	bpl.n	8003dea <HAL_CAN_IRQHandler+0x272>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d8e:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8003d92:	e714      	b.n	8003bbe <HAL_CAN_IRQHandler+0x46>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d94:	0338      	lsls	r0, r7, #12
 8003d96:	d524      	bpl.n	8003de2 <HAL_CAN_IRQHandler+0x26a>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d98:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8003d9c:	e71d      	b.n	8003bda <HAL_CAN_IRQHandler+0x62>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f7ff fed8 	bl	8003b54 <HAL_CAN_TxMailbox1CompleteCallback>
 8003da4:	e70b      	b.n	8003bbe <HAL_CAN_IRQHandler+0x46>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003da6:	4628      	mov	r0, r5
 8003da8:	f7ff fed6 	bl	8003b58 <HAL_CAN_TxMailbox2CompleteCallback>
 8003dac:	e715      	b.n	8003bda <HAL_CAN_IRQHandler+0x62>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003dae:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003db0:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003db2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003db6:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BD;
 8003db8:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003dbc:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003dbe:	e768      	b.n	8003c92 <HAL_CAN_IRQHandler+0x11a>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003dc6:	619a      	str	r2, [r3, #24]
 8003dc8:	e76f      	b.n	8003caa <HAL_CAN_IRQHandler+0x132>
 8003dca:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003dcc:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003dce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003dd2:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_FOR;
 8003dd4:	f046 0610 	orr.w	r6, r6, #16
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003dd8:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003dda:	e75a      	b.n	8003c92 <HAL_CAN_IRQHandler+0x11a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ddc:	f7ff febe 	bl	8003b5c <HAL_CAN_TxMailbox0AbortCallback>
 8003de0:	e6de      	b.n	8003ba0 <HAL_CAN_IRQHandler+0x28>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003de2:	4628      	mov	r0, r5
 8003de4:	f7ff febe 	bl	8003b64 <HAL_CAN_TxMailbox2AbortCallback>
 8003de8:	e6f7      	b.n	8003bda <HAL_CAN_IRQHandler+0x62>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003dea:	4628      	mov	r0, r5
 8003dec:	f7ff feb8 	bl	8003b60 <HAL_CAN_TxMailbox1AbortCallback>
 8003df0:	e6e5      	b.n	8003bbe <HAL_CAN_IRQHandler+0x46>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003df2:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003df4:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003df6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003dfa:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BR;
 8003dfc:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e00:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e02:	e746      	b.n	8003c92 <HAL_CAN_IRQHandler+0x11a>

08003e04 <HAL_CAN_GetState>:
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e04:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e08:	1e59      	subs	r1, r3, #1
 8003e0a:	2901      	cmp	r1, #1
{
 8003e0c:	4602      	mov	r2, r0
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e0e:	b2d8      	uxtb	r0, r3
  if ((state == HAL_CAN_STATE_READY) ||
 8003e10:	d900      	bls.n	8003e14 <HAL_CAN_GetState+0x10>
    }
  }

  /* Return CAN state */
  return state;
}
 8003e12:	4770      	bx	lr
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	0792      	lsls	r2, r2, #30
 8003e1a:	d405      	bmi.n	8003e28 <HAL_CAN_GetState+0x24>
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8003e1c:	681b      	ldr	r3, [r3, #0]
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8003e1e:	f013 0f02 	tst.w	r3, #2
 8003e22:	bf18      	it	ne
 8003e24:	2003      	movne	r0, #3
 8003e26:	4770      	bx	lr
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8003e28:	2004      	movs	r0, #4
}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_CAN_GetError>:
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003e2c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_CAN_ResetError>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
  HAL_StatusTypeDef status = HAL_OK;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e30:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e34:	3a01      	subs	r2, #1
 8003e36:	2a01      	cmp	r2, #1
{
 8003e38:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003e3a:	d905      	bls.n	8003e48 <HAL_CAN_ResetError+0x18>
    hcan->ErrorCode = 0U;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e3c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003e3e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000

    status = HAL_ERROR;
 8003e42:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Return the status */
  return status;
}
 8003e46:	4770      	bx	lr
    hcan->ErrorCode = 0U;
 8003e48:	2000      	movs	r0, #0
 8003e4a:	6258      	str	r0, [r3, #36]	@ 0x24
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e50:	4907      	ldr	r1, [pc, #28]	@ (8003e70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003e52:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e54:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e56:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e60:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e62:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003e6a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_NVIC_SetPriority+0x70>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e7c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e7e:	f1c3 0e07 	rsb	lr, r3, #7
 8003e82:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e86:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8a:	bf28      	it	cs
 8003e8c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e90:	f1bc 0f06 	cmp.w	ip, #6
 8003e94:	d91c      	bls.n	8003ed0 <HAL_NVIC_SetPriority+0x5c>
 8003e96:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e9e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003ea2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003eaa:	fa03 f30e 	lsl.w	r3, r3, lr
 8003eae:	ea21 0303 	bic.w	r3, r1, r3
 8003eb2:	fa03 f30c 	lsl.w	r3, r3, ip
 8003eb6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8003eba:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ebc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003ebe:	db0a      	blt.n	8003ed6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003ec4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003ec8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003ecc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ed0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed2:	4694      	mov	ip, r2
 8003ed4:	e7e7      	b.n	8003ea6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed6:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <HAL_NVIC_SetPriority+0x74>)
 8003ed8:	f000 000f 	and.w	r0, r0, #15
 8003edc:	4402      	add	r2, r0
 8003ede:	7613      	strb	r3, [r2, #24]
 8003ee0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ee4:	e000ed00 	.word	0xe000ed00
 8003ee8:	e000ecfc 	.word	0xe000ecfc

08003eec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003eec:	2800      	cmp	r0, #0
 8003eee:	db07      	blt.n	8003f00 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef0:	0941      	lsrs	r1, r0, #5
 8003ef2:	4a04      	ldr	r2, [pc, #16]	@ (8003f04 <HAL_NVIC_EnableIRQ+0x18>)
 8003ef4:	f000 001f 	and.w	r0, r0, #31
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4083      	lsls	r3, r0
 8003efc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000e100 	.word	0xe000e100

08003f08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f08:	3801      	subs	r0, #1
 8003f0a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003f0e:	d301      	bcc.n	8003f14 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f10:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003f12:	4770      	bx	lr
{
 8003f14:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f16:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1a:	4c07      	ldr	r4, [pc, #28]	@ (8003f38 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003f22:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f26:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f28:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f2a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f2c:	619a      	str	r2, [r3, #24]
}
 8003f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f32:	6119      	str	r1, [r3, #16]
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003f40:	f7ff f93e 	bl	80031c0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f44:	2c00      	cmp	r4, #0
 8003f46:	d075      	beq.n	8004034 <HAL_DMA_Init+0xf8>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f48:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003f4a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8003f52:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f60:	e005      	b.n	8003f6e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f62:	f7ff f92d 	bl	80031c0 <HAL_GetTick>
 8003f66:	1b43      	subs	r3, r0, r5
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d839      	bhi.n	8003fe0 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	07d1      	lsls	r1, r2, #31
 8003f72:	d4f6      	bmi.n	8003f62 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f74:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003f78:	68e1      	ldr	r1, [r4, #12]
 8003f7a:	4302      	orrs	r2, r0
 8003f7c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f82:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f84:	432a      	orrs	r2, r5
 8003f86:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f88:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8003f8a:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8c:	4302      	orrs	r2, r0
 8003f8e:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f90:	4932      	ldr	r1, [pc, #200]	@ (800405c <HAL_DMA_Init+0x120>)
 8003f92:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f94:	6a25      	ldr	r5, [r4, #32]
 8003f96:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f98:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f9a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003f9c:	2904      	cmp	r1, #4
 8003f9e:	d026      	beq.n	8003fee <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fa2:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fa4:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fa8:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003faa:	b2d8      	uxtb	r0, r3
 8003fac:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8003fae:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fb0:	3810      	subs	r0, #16
 8003fb2:	fba2 5200 	umull	r5, r2, r2, r0
 8003fb6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fb8:	492a      	ldr	r1, [pc, #168]	@ (8004064 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fbe:	5c89      	ldrb	r1, [r1, r2]
 8003fc0:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8003fc6:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fc8:	bf88      	it	hi
 8003fca:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fcc:	223f      	movs	r2, #63	@ 0x3f
 8003fce:	408a      	lsls	r2, r1
 8003fd0:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd2:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd4:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003fda:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8003fea:	4618      	mov	r0, r3
}
 8003fec:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fee:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8003ff2:	4329      	orrs	r1, r5
 8003ff4:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8003ff6:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003ff8:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8003ffa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ffc:	f021 0107 	bic.w	r1, r1, #7
 8004000:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004002:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004006:	2d00      	cmp	r5, #0
 8004008:	d0cf      	beq.n	8003faa <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800400a:	b928      	cbnz	r0, 8004018 <HAL_DMA_Init+0xdc>
  {
    switch (tmp)
 800400c:	2a01      	cmp	r2, #1
 800400e:	d021      	beq.n	8004054 <HAL_DMA_Init+0x118>
 8004010:	f032 0202 	bics.w	r2, r2, #2
 8004014:	d1c9      	bne.n	8003faa <HAL_DMA_Init+0x6e>
 8004016:	e006      	b.n	8004026 <HAL_DMA_Init+0xea>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004018:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800401c:	d00c      	beq.n	8004038 <HAL_DMA_Init+0xfc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800401e:	2a02      	cmp	r2, #2
 8004020:	d903      	bls.n	800402a <HAL_DMA_Init+0xee>
 8004022:	2a03      	cmp	r2, #3
 8004024:	d1c1      	bne.n	8003faa <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004026:	01ea      	lsls	r2, r5, #7
 8004028:	d5bf      	bpl.n	8003faa <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800402a:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800402c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800402e:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004030:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8004034:	2001      	movs	r0, #1
}
 8004036:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004038:	2a03      	cmp	r2, #3
 800403a:	d8b6      	bhi.n	8003faa <HAL_DMA_Init+0x6e>
 800403c:	a001      	add	r0, pc, #4	@ (adr r0, 8004044 <HAL_DMA_Init+0x108>)
 800403e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004042:	bf00      	nop
 8004044:	0800402b 	.word	0x0800402b
 8004048:	08004027 	.word	0x08004027
 800404c:	0800402b 	.word	0x0800402b
 8004050:	08004055 	.word	0x08004055
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004054:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8004058:	d1a7      	bne.n	8003faa <HAL_DMA_Init+0x6e>
 800405a:	e7e6      	b.n	800402a <HAL_DMA_Init+0xee>
 800405c:	f010803f 	.word	0xf010803f
 8004060:	aaaaaaab 	.word	0xaaaaaaab
 8004064:	0800bfd4 	.word	0x0800bfd4

08004068 <HAL_DMA_Start_IT>:
{
 8004068:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800406a:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800406e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8004070:	2c01      	cmp	r4, #1
 8004072:	d00a      	beq.n	800408a <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8004074:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
  __HAL_LOCK(hdma);
 8004078:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800407c:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 800407e:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004082:	d005      	beq.n	8004090 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8004084:	2300      	movs	r3, #0
 8004086:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 800408a:	2002      	movs	r0, #2
}
 800408c:	bc70      	pop	{r4, r5, r6}
 800408e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004090:	2602      	movs	r6, #2
 8004092:	f880 6035 	strb.w	r6, [r0, #53]	@ 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004096:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004098:	2600      	movs	r6, #0
 800409a:	6546      	str	r6, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800409c:	6826      	ldr	r6, [r4, #0]
 800409e:	f426 2680 	bic.w	r6, r6, #262144	@ 0x40000
 80040a2:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80040a4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040a6:	6883      	ldr	r3, [r0, #8]
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
    hdma->Instance->PAR = DstAddress;
 80040aa:	bf0e      	itee	eq
 80040ac:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80040ae:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80040b0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80040b4:	bf08      	it	eq
 80040b6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b8:	233f      	movs	r3, #63	@ 0x3f
 80040ba:	4093      	lsls	r3, r2
 80040bc:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040be:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80040c0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040c2:	f043 0316 	orr.w	r3, r3, #22
 80040c6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80040c8:	b11a      	cbz	r2, 80040d2 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80040da:	6023      	str	r3, [r4, #0]
}
 80040dc:	bc70      	pop	{r4, r5, r6}
 80040de:	4770      	bx	lr

080040e0 <HAL_DMA_Abort>:
{
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e4:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 80040e6:	f7ff f86b 	bl	80031c0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ea:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d006      	beq.n	8004100 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f2:	2380      	movs	r3, #128	@ 0x80
 80040f4:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80040f6:	2300      	movs	r3, #0
 80040f8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80040fc:	2001      	movs	r0, #1
}
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	f022 0216 	bic.w	r2, r2, #22
 8004108:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004110:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004112:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004114:	4605      	mov	r5, r0
 8004116:	b342      	cbz	r2, 800416a <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f022 0208 	bic.w	r2, r2, #8
 800411e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004128:	e005      	b.n	8004136 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800412a:	f7ff f849 	bl	80031c0 <HAL_GetTick>
 800412e:	1b43      	subs	r3, r0, r5
 8004130:	2b05      	cmp	r3, #5
 8004132:	d810      	bhi.n	8004156 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f013 0301 	ands.w	r3, r3, #1
 800413c:	d1f5      	bne.n	800412a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800413e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004140:	223f      	movs	r2, #63	@ 0x3f
 8004142:	408a      	lsls	r2, r1
  return HAL_OK;
 8004144:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8004146:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8004148:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414a:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800414c:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004150:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8004154:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004156:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004158:	2220      	movs	r2, #32
 800415a:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800415c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800415e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004162:	2300      	movs	r3, #0
 8004164:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8004168:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800416a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800416c:	2a00      	cmp	r2, #0
 800416e:	d1d3      	bne.n	8004118 <HAL_DMA_Abort+0x38>
 8004170:	e7d6      	b.n	8004120 <HAL_DMA_Abort+0x40>
 8004172:	bf00      	nop

08004174 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004174:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8004178:	2b02      	cmp	r3, #2
 800417a:	d003      	beq.n	8004184 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800417c:	2380      	movs	r3, #128	@ 0x80
 800417e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004180:	2001      	movs	r0, #1
 8004182:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004184:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004186:	2305      	movs	r3, #5
 8004188:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 800418c:	6813      	ldr	r3, [r2, #0]
 800418e:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8004192:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004194:	6013      	str	r3, [r2, #0]
}
 8004196:	4770      	bx	lr

08004198 <HAL_DMA_IRQHandler>:
{
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 800419c:	4a67      	ldr	r2, [pc, #412]	@ (800433c <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800419e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a0:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041a6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 80041a8:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041aa:	2208      	movs	r2, #8
 80041ac:	409a      	lsls	r2, r3
 80041ae:	422a      	tst	r2, r5
{
 80041b0:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b2:	d003      	beq.n	80041bc <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041b4:	6801      	ldr	r1, [r0, #0]
 80041b6:	6808      	ldr	r0, [r1, #0]
 80041b8:	0740      	lsls	r0, r0, #29
 80041ba:	d478      	bmi.n	80042ae <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041bc:	2201      	movs	r2, #1
 80041be:	409a      	lsls	r2, r3
 80041c0:	422a      	tst	r2, r5
 80041c2:	d003      	beq.n	80041cc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041c4:	6821      	ldr	r1, [r4, #0]
 80041c6:	6949      	ldr	r1, [r1, #20]
 80041c8:	0608      	lsls	r0, r1, #24
 80041ca:	d46a      	bmi.n	80042a2 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041cc:	2204      	movs	r2, #4
 80041ce:	409a      	lsls	r2, r3
 80041d0:	422a      	tst	r2, r5
 80041d2:	d003      	beq.n	80041dc <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041d4:	6821      	ldr	r1, [r4, #0]
 80041d6:	6809      	ldr	r1, [r1, #0]
 80041d8:	0789      	lsls	r1, r1, #30
 80041da:	d45c      	bmi.n	8004296 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041dc:	2210      	movs	r2, #16
 80041de:	409a      	lsls	r2, r3
 80041e0:	422a      	tst	r2, r5
 80041e2:	d003      	beq.n	80041ec <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041e4:	6821      	ldr	r1, [r4, #0]
 80041e6:	6808      	ldr	r0, [r1, #0]
 80041e8:	0700      	lsls	r0, r0, #28
 80041ea:	d441      	bmi.n	8004270 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041ec:	2220      	movs	r2, #32
 80041ee:	409a      	lsls	r2, r3
 80041f0:	422a      	tst	r2, r5
 80041f2:	d014      	beq.n	800421e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041f4:	6821      	ldr	r1, [r4, #0]
 80041f6:	6808      	ldr	r0, [r1, #0]
 80041f8:	06c0      	lsls	r0, r0, #27
 80041fa:	d510      	bpl.n	800421e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041fc:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041fe:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8004202:	2a05      	cmp	r2, #5
 8004204:	d063      	beq.n	80042ce <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004206:	680b      	ldr	r3, [r1, #0]
 8004208:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800420c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800420e:	d07e      	beq.n	800430e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004210:	0319      	lsls	r1, r3, #12
 8004212:	f140 8089 	bpl.w	8004328 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8004216:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004218:	b10b      	cbz	r3, 800421e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800421a:	4620      	mov	r0, r4
 800421c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800421e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004220:	b323      	cbz	r3, 800426c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004222:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004224:	07da      	lsls	r2, r3, #31
 8004226:	d51a      	bpl.n	800425e <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8004228:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800422a:	4945      	ldr	r1, [pc, #276]	@ (8004340 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800422c:	2305      	movs	r3, #5
 800422e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004232:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004234:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8004238:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800423c:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	e002      	b.n	8004248 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	07db      	lsls	r3, r3, #31
 8004246:	d504      	bpl.n	8004252 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8004248:	9b01      	ldr	r3, [sp, #4]
 800424a:	3301      	adds	r3, #1
 800424c:	42b3      	cmp	r3, r6
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	d9f7      	bls.n	8004242 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8004252:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8004254:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004256:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800425a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800425e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004260:	b123      	cbz	r3, 800426c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8004262:	4620      	mov	r0, r4
}
 8004264:	b003      	add	sp, #12
 8004266:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800426a:	4718      	bx	r3
}
 800426c:	b003      	add	sp, #12
 800426e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004270:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004272:	680a      	ldr	r2, [r1, #0]
 8004274:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004278:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800427a:	d122      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427c:	05d2      	lsls	r2, r2, #23
 800427e:	d403      	bmi.n	8004288 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004280:	680a      	ldr	r2, [r1, #0]
 8004282:	f022 0208 	bic.w	r2, r2, #8
 8004286:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004288:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800428a:	2a00      	cmp	r2, #0
 800428c:	d0ae      	beq.n	80041ec <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800428e:	4620      	mov	r0, r4
 8004290:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004292:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004294:	e7aa      	b.n	80041ec <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004296:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800429a:	f042 0204 	orr.w	r2, r2, #4
 800429e:	6562      	str	r2, [r4, #84]	@ 0x54
 80042a0:	e79c      	b.n	80041dc <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042a2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042a6:	f042 0202 	orr.w	r2, r2, #2
 80042aa:	6562      	str	r2, [r4, #84]	@ 0x54
 80042ac:	e78e      	b.n	80041cc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042ae:	6808      	ldr	r0, [r1, #0]
 80042b0:	f020 0004 	bic.w	r0, r0, #4
 80042b4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042b6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	6562      	str	r2, [r4, #84]	@ 0x54
 80042c0:	e77c      	b.n	80041bc <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042c2:	0311      	lsls	r1, r2, #12
 80042c4:	d5e0      	bpl.n	8004288 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042c6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	d1e0      	bne.n	800428e <HAL_DMA_IRQHandler+0xf6>
 80042cc:	e78e      	b.n	80041ec <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ce:	680a      	ldr	r2, [r1, #0]
 80042d0:	f022 0216 	bic.w	r2, r2, #22
 80042d4:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042d6:	694a      	ldr	r2, [r1, #20]
 80042d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042dc:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80042e0:	b33a      	cbz	r2, 8004332 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e2:	680a      	ldr	r2, [r1, #0]
 80042e4:	f022 0208 	bic.w	r2, r2, #8
 80042e8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ea:	223f      	movs	r2, #63	@ 0x3f
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80042f0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f2:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80042f4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80042f6:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80042f8:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80042fc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8004300:	2900      	cmp	r1, #0
 8004302:	d0b3      	beq.n	800426c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8004304:	4620      	mov	r0, r4
}
 8004306:	b003      	add	sp, #12
 8004308:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800430c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800430e:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8004312:	d180      	bne.n	8004216 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004314:	680a      	ldr	r2, [r1, #0]
 8004316:	f022 0210 	bic.w	r2, r2, #16
 800431a:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800431c:	2201      	movs	r2, #1
 800431e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8004322:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8004326:	e776      	b.n	8004216 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8004328:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800432a:	2b00      	cmp	r3, #0
 800432c:	f47f af75 	bne.w	800421a <HAL_DMA_IRQHandler+0x82>
 8004330:	e775      	b.n	800421e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004332:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004334:	2a00      	cmp	r2, #0
 8004336:	d1d4      	bne.n	80042e2 <HAL_DMA_IRQHandler+0x14a>
 8004338:	e7d7      	b.n	80042ea <HAL_DMA_IRQHandler+0x152>
 800433a:	bf00      	nop
 800433c:	20000004 	.word	0x20000004
 8004340:	1b4e81b5 	.word	0x1b4e81b5

08004344 <HAL_DMA_GetState>:
  return hdma->State;
 8004344:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop

0800434c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800434c:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 800434e:	4770      	bx	lr

08004350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004354:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004356:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004358:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8004574 <HAL_GPIO_Init+0x224>
{
 800435c:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 800435e:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004362:	4689      	mov	r9, r1
 8004364:	e003      	b.n	800436e <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004366:	3301      	adds	r3, #1
 8004368:	2b10      	cmp	r3, #16
 800436a:	f000 8091 	beq.w	8004490 <HAL_GPIO_Init+0x140>
    ioposition = 0x01U << position;
 800436e:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004372:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8004376:	43a2      	bics	r2, r4
 8004378:	d1f5      	bne.n	8004366 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800437a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800437e:	f001 0203 	and.w	r2, r1, #3
 8004382:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004386:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004388:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800438a:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800438e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004390:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004394:	d97f      	bls.n	8004496 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004396:	2a03      	cmp	r2, #3
 8004398:	f040 80b6 	bne.w	8004508 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->MODER;
 800439c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800439e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043a2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043a4:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043a6:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80043aa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043ac:	d0db      	beq.n	8004366 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ae:	2200      	movs	r2, #0
 80043b0:	9203      	str	r2, [sp, #12]
 80043b2:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80043b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ba:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 80043be:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80043c2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80043c6:	9203      	str	r2, [sp, #12]
 80043c8:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80043ca:	f023 0203 	bic.w	r2, r3, #3
 80043ce:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043d2:	f003 0703 	and.w	r7, r3, #3
 80043d6:	260f      	movs	r6, #15
 80043d8:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 80043dc:	00bf      	lsls	r7, r7, #2
 80043de:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043e2:	4e61      	ldr	r6, [pc, #388]	@ (8004568 <HAL_GPIO_Init+0x218>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80043e4:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043e6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043e8:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ec:	d027      	beq.n	800443e <HAL_GPIO_Init+0xee>
 80043ee:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80043f2:	42b0      	cmp	r0, r6
 80043f4:	f000 8093 	beq.w	800451e <HAL_GPIO_Init+0x1ce>
 80043f8:	4e5c      	ldr	r6, [pc, #368]	@ (800456c <HAL_GPIO_Init+0x21c>)
 80043fa:	42b0      	cmp	r0, r6
 80043fc:	f000 8095 	beq.w	800452a <HAL_GPIO_Init+0x1da>
 8004400:	f8df c174 	ldr.w	ip, [pc, #372]	@ 8004578 <HAL_GPIO_Init+0x228>
 8004404:	4560      	cmp	r0, ip
 8004406:	f000 8096 	beq.w	8004536 <HAL_GPIO_Init+0x1e6>
 800440a:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800457c <HAL_GPIO_Init+0x22c>
 800440e:	4560      	cmp	r0, ip
 8004410:	f000 8097 	beq.w	8004542 <HAL_GPIO_Init+0x1f2>
 8004414:	f8df c168 	ldr.w	ip, [pc, #360]	@ 8004580 <HAL_GPIO_Init+0x230>
 8004418:	4560      	cmp	r0, ip
 800441a:	f000 8098 	beq.w	800454e <HAL_GPIO_Init+0x1fe>
 800441e:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8004584 <HAL_GPIO_Init+0x234>
 8004422:	4560      	cmp	r0, ip
 8004424:	f000 8099 	beq.w	800455a <HAL_GPIO_Init+0x20a>
 8004428:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8004588 <HAL_GPIO_Init+0x238>
 800442c:	4560      	cmp	r0, ip
 800442e:	bf0c      	ite	eq
 8004430:	f04f 0c07 	moveq.w	ip, #7
 8004434:	f04f 0c08 	movne.w	ip, #8
 8004438:	fa0c f707 	lsl.w	r7, ip, r7
 800443c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800443e:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004440:	4a4b      	ldr	r2, [pc, #300]	@ (8004570 <HAL_GPIO_Init+0x220>)
 8004442:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004444:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8004446:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800444a:	4e49      	ldr	r6, [pc, #292]	@ (8004570 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 800444c:	bf54      	ite	pl
 800444e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004450:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8004454:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8004456:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004458:	4e45      	ldr	r6, [pc, #276]	@ (8004570 <HAL_GPIO_Init+0x220>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800445a:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 800445c:	bf54      	ite	pl
 800445e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004460:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8004464:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8004466:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004468:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800446a:	4e41      	ldr	r6, [pc, #260]	@ (8004570 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 800446c:	bf54      	ite	pl
 800446e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004470:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8004474:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004476:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004478:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 800447a:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800447e:	493c      	ldr	r1, [pc, #240]	@ (8004570 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8004480:	bf54      	ite	pl
 8004482:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004484:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004488:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800448a:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448c:	f47f af6f 	bne.w	800436e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8004490:	b005      	add	sp, #20
 8004492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8004496:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004498:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800449c:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80044a0:	fa07 f70c 	lsl.w	r7, r7, ip
 80044a4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80044a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80044aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ac:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044b0:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80044b4:	409f      	lsls	r7, r3
 80044b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80044ba:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80044bc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044be:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c2:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80044c6:	fa07 f70c 	lsl.w	r7, r7, ip
 80044ca:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ce:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80044d0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044d2:	f47f af63 	bne.w	800439c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 80044d6:	08df      	lsrs	r7, r3, #3
 80044d8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80044dc:	9701      	str	r7, [sp, #4]
 80044de:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80044e4:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044e6:	f003 0e07 	and.w	lr, r3, #7
 80044ea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80044ee:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044f0:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044f4:	fa06 fe0e 	lsl.w	lr, r6, lr
 80044f8:	9e00      	ldr	r6, [sp, #0]
 80044fa:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80044fe:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004500:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004504:	6237      	str	r7, [r6, #32]
 8004506:	e749      	b.n	800439c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8004508:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800450a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800450e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004512:	fa07 f70c 	lsl.w	r7, r7, ip
 8004516:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800451a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800451c:	e73e      	b.n	800439c <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800451e:	f04f 0c01 	mov.w	ip, #1
 8004522:	fa0c f707 	lsl.w	r7, ip, r7
 8004526:	433d      	orrs	r5, r7
 8004528:	e789      	b.n	800443e <HAL_GPIO_Init+0xee>
 800452a:	f04f 0c02 	mov.w	ip, #2
 800452e:	fa0c f707 	lsl.w	r7, ip, r7
 8004532:	433d      	orrs	r5, r7
 8004534:	e783      	b.n	800443e <HAL_GPIO_Init+0xee>
 8004536:	f04f 0c03 	mov.w	ip, #3
 800453a:	fa0c f707 	lsl.w	r7, ip, r7
 800453e:	433d      	orrs	r5, r7
 8004540:	e77d      	b.n	800443e <HAL_GPIO_Init+0xee>
 8004542:	f04f 0c04 	mov.w	ip, #4
 8004546:	fa0c f707 	lsl.w	r7, ip, r7
 800454a:	433d      	orrs	r5, r7
 800454c:	e777      	b.n	800443e <HAL_GPIO_Init+0xee>
 800454e:	f04f 0c05 	mov.w	ip, #5
 8004552:	fa0c f707 	lsl.w	r7, ip, r7
 8004556:	433d      	orrs	r5, r7
 8004558:	e771      	b.n	800443e <HAL_GPIO_Init+0xee>
 800455a:	f04f 0c06 	mov.w	ip, #6
 800455e:	fa0c f707 	lsl.w	r7, ip, r7
 8004562:	433d      	orrs	r5, r7
 8004564:	e76b      	b.n	800443e <HAL_GPIO_Init+0xee>
 8004566:	bf00      	nop
 8004568:	40020000 	.word	0x40020000
 800456c:	40020800 	.word	0x40020800
 8004570:	40013c00 	.word	0x40013c00
 8004574:	40023800 	.word	0x40023800
 8004578:	40020c00 	.word	0x40020c00
 800457c:	40021000 	.word	0x40021000
 8004580:	40021400 	.word	0x40021400
 8004584:	40021800 	.word	0x40021800
 8004588:	40021c00 	.word	0x40021c00

0800458c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800458c:	6903      	ldr	r3, [r0, #16]
 800458e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004590:	bf14      	ite	ne
 8004592:	2001      	movne	r0, #1
 8004594:	2000      	moveq	r0, #0
 8004596:	4770      	bx	lr

08004598 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004598:	b902      	cbnz	r2, 800459c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800459a:	0409      	lsls	r1, r1, #16
 800459c:	6181      	str	r1, [r0, #24]
  }
}
 800459e:	4770      	bx	lr

080045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a4:	4681      	mov	r9, r0
 80045a6:	460e      	mov	r6, r1
 80045a8:	4617      	mov	r7, r2
 80045aa:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ac:	f8d9 4000 	ldr.w	r4, [r9]
 80045b0:	e004      	b.n	80045bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b2:	6965      	ldr	r5, [r4, #20]
 80045b4:	056a      	lsls	r2, r5, #21
 80045b6:	d409      	bmi.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	1c7b      	adds	r3, r7, #1
 80045ba:	d121      	bne.n	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045bc:	6960      	ldr	r0, [r4, #20]
 80045be:	ea26 0000 	bic.w	r0, r6, r0
 80045c2:	b280      	uxth	r0, r0
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d1f4      	bne.n	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 80045c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045d2:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d6:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d8:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
 80045dc:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	f8c9 2030 	str.w	r2, [r9, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e2:	f889 303d 	strb.w	r3, [r9, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e6:	f889 203e 	strb.w	r2, [r9, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ea:	f8d9 3040 	ldr.w	r3, [r9, #64]	@ 0x40
 80045ee:	f043 0304 	orr.w	r3, r3, #4
 80045f2:	f8c9 3040 	str.w	r3, [r9, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80045f6:	2300      	movs	r3, #0
 80045f8:	f889 303c 	strb.w	r3, [r9, #60]	@ 0x3c
      return HAL_ERROR;
 80045fc:	2001      	movs	r0, #1
 80045fe:	e7e3      	b.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004600:	f7fe fdde 	bl	80031c0 <HAL_GetTick>
 8004604:	eba0 0008 	sub.w	r0, r0, r8
 8004608:	42b8      	cmp	r0, r7
 800460a:	d801      	bhi.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 800460c:	2f00      	cmp	r7, #0
 800460e:	d1cd      	bne.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004610:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004612:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004614:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004618:	f889 203d 	strb.w	r2, [r9, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	f889 303e 	strb.w	r3, [r9, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	f8d9 3040 	ldr.w	r3, [r9, #64]	@ 0x40
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c9 3040 	str.w	r3, [r9, #64]	@ 0x40
        return HAL_ERROR;
 800462a:	e7e4      	b.n	80045f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x56>

0800462c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	4605      	mov	r5, r0
 8004630:	460e      	mov	r6, r1
 8004632:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004634:	682c      	ldr	r4, [r5, #0]
 8004636:	e001      	b.n	800463c <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004638:	1c73      	adds	r3, r6, #1
 800463a:	d11a      	bne.n	8004672 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800463c:	6963      	ldr	r3, [r4, #20]
 800463e:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8004642:	d114      	bne.n	800466e <I2C_WaitOnTXEFlagUntilTimeout+0x42>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004644:	6960      	ldr	r0, [r4, #20]
 8004646:	0542      	lsls	r2, r0, #21
 8004648:	d5f6      	bpl.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464a:	f46f 6180 	mvn.w	r1, #1024	@ 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800464e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004650:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004652:	632b      	str	r3, [r5, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004654:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004658:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800465c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800465e:	f043 0304 	orr.w	r3, r3, #4
 8004662:	642b      	str	r3, [r5, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004664:	2300      	movs	r3, #0
 8004666:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 800466a:	2001      	movs	r0, #1
}
 800466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800466e:	2000      	movs	r0, #0
}
 8004670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fe fda5 	bl	80031c0 <HAL_GetTick>
 8004676:	1bc0      	subs	r0, r0, r7
 8004678:	42b0      	cmp	r0, r6
 800467a:	d801      	bhi.n	8004680 <I2C_WaitOnTXEFlagUntilTimeout+0x54>
 800467c:	2e00      	cmp	r6, #0
 800467e:	d1d9      	bne.n	8004634 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004680:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004682:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004684:	632b      	str	r3, [r5, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004686:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800468a:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004690:	4313      	orrs	r3, r2
 8004692:	642b      	str	r3, [r5, #64]	@ 0x40
        return HAL_ERROR;
 8004694:	e7e6      	b.n	8004664 <I2C_WaitOnTXEFlagUntilTimeout+0x38>
 8004696:	bf00      	nop

08004698 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	4605      	mov	r5, r0
 800469c:	460e      	mov	r6, r1
 800469e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a0:	682c      	ldr	r4, [r5, #0]
 80046a2:	e001      	b.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 80046a4:	1c73      	adds	r3, r6, #1
 80046a6:	d11a      	bne.n	80046de <I2C_WaitOnBTFFlagUntilTimeout+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a8:	6963      	ldr	r3, [r4, #20]
 80046aa:	f013 0304 	ands.w	r3, r3, #4
 80046ae:	d114      	bne.n	80046da <I2C_WaitOnBTFFlagUntilTimeout+0x42>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046b0:	6960      	ldr	r0, [r4, #20]
 80046b2:	0542      	lsls	r2, r0, #21
 80046b4:	d5f6      	bpl.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b6:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ba:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046bc:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80046be:	632b      	str	r3, [r5, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c4:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046c8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	642b      	str	r3, [r5, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80046d0:	2300      	movs	r3, #0
 80046d2:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80046d6:	2001      	movs	r0, #1
}
 80046d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80046da:	2000      	movs	r0, #0
}
 80046dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fe fd6f 	bl	80031c0 <HAL_GetTick>
 80046e2:	1bc0      	subs	r0, r0, r7
 80046e4:	42b0      	cmp	r0, r6
 80046e6:	d801      	bhi.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x54>
 80046e8:	2e00      	cmp	r6, #0
 80046ea:	d1d9      	bne.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ec:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ee:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046f0:	632b      	str	r3, [r5, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046f2:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f6:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046fa:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80046fc:	4313      	orrs	r3, r2
 80046fe:	642b      	str	r3, [r5, #64]	@ 0x40
        return HAL_ERROR;
 8004700:	e7e6      	b.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x38>
 8004702:	bf00      	nop

08004704 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004704:	2800      	cmp	r0, #0
 8004706:	f000 80b8 	beq.w	800487a <HAL_I2C_Init+0x176>
{
 800470a:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800470c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004710:	4604      	mov	r4, r0
 8004712:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8098 	beq.w	800484c <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 800471c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800471e:	2224      	movs	r2, #36	@ 0x24
 8004720:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800473a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800473c:	f001 fca8 	bl	8006090 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004740:	6865      	ldr	r5, [r4, #4]
 8004742:	4b4f      	ldr	r3, [pc, #316]	@ (8004880 <HAL_I2C_Init+0x17c>)
 8004744:	429d      	cmp	r5, r3
 8004746:	d84f      	bhi.n	80047e8 <HAL_I2C_Init+0xe4>
 8004748:	4b4e      	ldr	r3, [pc, #312]	@ (8004884 <HAL_I2C_Init+0x180>)
 800474a:	4298      	cmp	r0, r3
 800474c:	d97c      	bls.n	8004848 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800474e:	4b4e      	ldr	r3, [pc, #312]	@ (8004888 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004750:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8004752:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004756:	1e43      	subs	r3, r0, #1
 8004758:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800475c:	6822      	ldr	r2, [r4, #0]
 800475e:	6851      	ldr	r1, [r2, #4]
 8004760:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004764:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8004768:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800476a:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 800476c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004770:	f10c 0c01 	add.w	ip, ip, #1
 8004774:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004778:	ea41 010c 	orr.w	r1, r1, ip
 800477c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800477e:	69d1      	ldr	r1, [r2, #28]
 8004780:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004784:	3301      	adds	r3, #1
 8004786:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800478a:	4203      	tst	r3, r0
 800478c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004790:	d161      	bne.n	8004856 <HAL_I2C_Init+0x152>
 8004792:	2304      	movs	r3, #4
 8004794:	430b      	orrs	r3, r1
 8004796:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004798:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800479c:	6811      	ldr	r1, [r2, #0]
 800479e:	4303      	orrs	r3, r0
 80047a0:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047a8:	6891      	ldr	r1, [r2, #8]
 80047aa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80047ae:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80047b2:	4303      	orrs	r3, r0
 80047b4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047bc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80047c0:	68d1      	ldr	r1, [r2, #12]
 80047c2:	4303      	orrs	r3, r0
 80047c4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80047c8:	430b      	orrs	r3, r1
 80047ca:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80047cc:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ce:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80047d0:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80047d6:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d8:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047da:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047de:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 80047e4:	4618      	mov	r0, r3
}
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047e8:	4b28      	ldr	r3, [pc, #160]	@ (800488c <HAL_I2C_Init+0x188>)
 80047ea:	4298      	cmp	r0, r3
 80047ec:	d92c      	bls.n	8004848 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ee:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80047f0:	4b25      	ldr	r3, [pc, #148]	@ (8004888 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047f2:	4e27      	ldr	r6, [pc, #156]	@ (8004890 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80047f4:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047f8:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047fa:	6850      	ldr	r0, [r2, #4]
 80047fc:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8004800:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8004804:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004806:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800480a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800480e:	fb00 f101 	mul.w	r1, r0, r1
 8004812:	fba6 6101 	umull	r6, r1, r6, r1
 8004816:	6a10      	ldr	r0, [r2, #32]
 8004818:	0989      	lsrs	r1, r1, #6
 800481a:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800481e:	3101      	adds	r1, #1
 8004820:	4301      	orrs	r1, r0
 8004822:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004824:	69d1      	ldr	r1, [r2, #28]
 8004826:	68a0      	ldr	r0, [r4, #8]
 8004828:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800482c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004830:	b9a0      	cbnz	r0, 800485c <HAL_I2C_Init+0x158>
 8004832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004836:	fbb3 f3f5 	udiv	r3, r3, r5
 800483a:	3301      	adds	r3, #1
 800483c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004840:	b1cb      	cbz	r3, 8004876 <HAL_I2C_Init+0x172>
 8004842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004846:	e7a5      	b.n	8004794 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004848:	2001      	movs	r0, #1
}
 800484a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800484c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004850:	f7fd f8bc 	bl	80019cc <HAL_I2C_MspInit>
 8004854:	e762      	b.n	800471c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485a:	e79b      	b.n	8004794 <HAL_I2C_Init+0x90>
 800485c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004860:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004864:	fbb3 f3f5 	udiv	r3, r3, r5
 8004868:	3301      	adds	r3, #1
 800486a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486e:	b113      	cbz	r3, 8004876 <HAL_I2C_Init+0x172>
 8004870:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004874:	e78e      	b.n	8004794 <HAL_I2C_Init+0x90>
 8004876:	2301      	movs	r3, #1
 8004878:	e78c      	b.n	8004794 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800487a:	2001      	movs	r0, #1
}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	000186a0 	.word	0x000186a0
 8004884:	001e847f 	.word	0x001e847f
 8004888:	431bde83 	.word	0x431bde83
 800488c:	003d08ff 	.word	0x003d08ff
 8004890:	10624dd3 	.word	0x10624dd3

08004894 <HAL_I2C_Master_Transmit>:
{
 8004894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	4604      	mov	r4, r0
 800489a:	b082      	sub	sp, #8
 800489c:	4699      	mov	r9, r3
 800489e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80048a0:	4688      	mov	r8, r1
 80048a2:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7fe fc8c 	bl	80031c0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d004      	beq.n	80048ba <HAL_I2C_Master_Transmit+0x26>
      return HAL_BUSY;
 80048b0:	2502      	movs	r5, #2
}
 80048b2:	4628      	mov	r0, r5
 80048b4:	b002      	add	sp, #8
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	4606      	mov	r6, r0
 80048bc:	e005      	b.n	80048ca <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fe fc7f 	bl	80031c0 <HAL_GetTick>
 80048c2:	1b80      	subs	r0, r0, r6
 80048c4:	2819      	cmp	r0, #25
 80048c6:	f200 80d6 	bhi.w	8004a76 <HAL_I2C_Master_Transmit+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	699d      	ldr	r5, [r3, #24]
 80048ce:	ea6f 0c05 	mvn.w	ip, r5
 80048d2:	f01c 0502 	ands.w	r5, ip, #2
 80048d6:	d0f2      	beq.n	80048be <HAL_I2C_Master_Transmit+0x2a>
    __HAL_LOCK(hi2c);
 80048d8:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 80048dc:	2a01      	cmp	r2, #1
 80048de:	d0e7      	beq.n	80048b0 <HAL_I2C_Master_Transmit+0x1c>
 80048e0:	2201      	movs	r2, #1
 80048e2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	07d5      	lsls	r5, r2, #31
 80048ea:	f140 80ab 	bpl.w	8004a44 <HAL_I2C_Master_Transmit+0x1b0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ee:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f0:	496d      	ldr	r1, [pc, #436]	@ (8004aa8 <HAL_I2C_Master_Transmit+0x214>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048f6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048f8:	2221      	movs	r2, #33	@ 0x21
 80048fa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048fe:	2210      	movs	r2, #16
 8004900:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004904:	2200      	movs	r2, #0
 8004906:	6422      	str	r2, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8004908:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800490c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800490e:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004910:	8522      	strh	r2, [r4, #40]	@ 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004912:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    hi2c->pBuffPtr    = pData;
 8004914:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004918:	2a08      	cmp	r2, #8
 800491a:	d006      	beq.n	800492a <HAL_I2C_Master_Transmit+0x96>
 800491c:	2a01      	cmp	r2, #1
 800491e:	d004      	beq.n	800492a <HAL_I2C_Master_Transmit+0x96>
 8004920:	428a      	cmp	r2, r1
 8004922:	d002      	beq.n	800492a <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004924:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004926:	2a12      	cmp	r2, #18
 8004928:	d106      	bne.n	8004938 <HAL_I2C_Master_Transmit+0xa4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	e001      	b.n	8004938 <HAL_I2C_Master_Transmit+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8004934:	1c78      	adds	r0, r7, #1
 8004936:	d164      	bne.n	8004a02 <HAL_I2C_Master_Transmit+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	07d2      	lsls	r2, r2, #31
 800493c:	d5fa      	bpl.n	8004934 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800493e:	6922      	ldr	r2, [r4, #16]
 8004940:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8004944:	f040 8083 	bne.w	8004a4e <HAL_I2C_Master_Transmit+0x1ba>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004948:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 800494c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800494e:	4957      	ldr	r1, [pc, #348]	@ (8004aac <HAL_I2C_Master_Transmit+0x218>)
 8004950:	4633      	mov	r3, r6
 8004952:	463a      	mov	r2, r7
 8004954:	4620      	mov	r0, r4
 8004956:	f7ff fe23 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495a:	4605      	mov	r5, r0
 800495c:	2800      	cmp	r0, #0
 800495e:	d16c      	bne.n	8004a3a <HAL_I2C_Master_Transmit+0x1a6>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	9001      	str	r0, [sp, #4]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	9201      	str	r2, [sp, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	9b01      	ldr	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 800496e:	e035      	b.n	80049dc <HAL_I2C_Master_Transmit+0x148>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004970:	f7ff fe5c 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004976:	4632      	mov	r2, r6
 8004978:	4639      	mov	r1, r7
 800497a:	4620      	mov	r0, r4
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497c:	2b00      	cmp	r3, #0
 800497e:	f040 8087 	bne.w	8004a90 <HAL_I2C_Master_Transmit+0x1fc>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004982:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 8004986:	f8d4 c000 	ldr.w	ip, [r4]
      hi2c->XferSize--;
 800498a:	f8b4 8028 	ldrh.w	r8, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800498e:	4673      	mov	r3, lr
 8004990:	f813 9b01 	ldrb.w	r9, [r3], #1
 8004994:	f8cc 9010 	str.w	r9, [ip, #16]
      hi2c->pBuffPtr++;
 8004998:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800499a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800499c:	3b01      	subs	r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049a2:	f8dc 9014 	ldr.w	r9, [ip, #20]
      hi2c->XferSize--;
 80049a6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80049aa:	b29b      	uxth	r3, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ac:	f019 0f04 	tst.w	r9, #4
      hi2c->XferSize--;
 80049b0:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049b2:	d00f      	beq.n	80049d4 <HAL_I2C_Master_Transmit+0x140>
 80049b4:	b173      	cbz	r3, 80049d4 <HAL_I2C_Master_Transmit+0x140>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b6:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80049ba:	f8cc 3010 	str.w	r3, [ip, #16]
        hi2c->pBuffPtr++;
 80049be:	f10e 0302 	add.w	r3, lr, #2
 80049c2:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80049c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049c6:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80049c8:	f1a8 0802 	sub.w	r8, r8, #2
        hi2c->XferCount--;
 80049cc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80049ce:	f8a4 8028 	strh.w	r8, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80049d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d4:	f7ff fe60 	bl	8004698 <I2C_WaitOnBTFFlagUntilTimeout>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d159      	bne.n	8004a90 <HAL_I2C_Master_Transmit+0x1fc>
    while (hi2c->XferSize > 0U)
 80049dc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049de:	4632      	mov	r2, r6
 80049e0:	4639      	mov	r1, r7
 80049e2:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1c3      	bne.n	8004970 <HAL_I2C_Master_Transmit+0xdc>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	6821      	ldr	r1, [r4, #0]
 80049ea:	680a      	ldr	r2, [r1, #0]
 80049ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f0:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80049f2:	2220      	movs	r2, #32
 80049f4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80049f8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8004a00:	e757      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a02:	f7fe fbdd 	bl	80031c0 <HAL_GetTick>
 8004a06:	1b80      	subs	r0, r0, r6
 8004a08:	4287      	cmp	r7, r0
 8004a0a:	d34a      	bcc.n	8004aa2 <HAL_I2C_Master_Transmit+0x20e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	461a      	mov	r2, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a10:	2f00      	cmp	r7, #0
 8004a12:	d191      	bne.n	8004938 <HAL_I2C_Master_Transmit+0xa4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a14:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a16:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a18:	6321      	str	r1, [r4, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a1e:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004a24:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	f043 0320 	orr.w	r3, r3, #32
 8004a2c:	6423      	str	r3, [r4, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	05d9      	lsls	r1, r3, #23
 8004a32:	d502      	bpl.n	8004a3a <HAL_I2C_Master_Transmit+0x1a6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a38:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004a3a:	2501      	movs	r5, #1
}
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	b002      	add	sp, #8
 8004a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e74f      	b.n	80048ee <HAL_I2C_Master_Transmit+0x5a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a4e:	ea4f 12e8 	mov.w	r2, r8, asr #7
 8004a52:	f002 0206 	and.w	r2, r2, #6
 8004a56:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 8004a5a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a5c:	4914      	ldr	r1, [pc, #80]	@ (8004ab0 <HAL_I2C_Master_Transmit+0x21c>)
 8004a5e:	4633      	mov	r3, r6
 8004a60:	463a      	mov	r2, r7
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7ff fd9c 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d1e6      	bne.n	8004a3a <HAL_I2C_Master_Transmit+0x1a6>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a6c:	6822      	ldr	r2, [r4, #0]
 8004a6e:	fa5f f388 	uxtb.w	r3, r8
 8004a72:	6113      	str	r3, [r2, #16]
 8004a74:	e76b      	b.n	800494e <HAL_I2C_Master_Transmit+0xba>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a76:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a78:	6325      	str	r5, [r4, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a7e:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004a84:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a88:	f043 0320 	orr.w	r3, r3, #32
 8004a8c:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8004a8e:	e70f      	b.n	80048b0 <HAL_I2C_Master_Transmit+0x1c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d1d1      	bne.n	8004a3a <HAL_I2C_Master_Transmit+0x1a6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	6813      	ldr	r3, [r2, #0]
 8004a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e7cb      	b.n	8004a3a <HAL_I2C_Master_Transmit+0x1a6>
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	e7b6      	b.n	8004a14 <HAL_I2C_Master_Transmit+0x180>
 8004aa6:	bf00      	nop
 8004aa8:	ffff0000 	.word	0xffff0000
 8004aac:	00010002 	.word	0x00010002
 8004ab0:	00010008 	.word	0x00010008

08004ab4 <HAL_I2C_Master_Transmit_IT>:
{
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	4684      	mov	ip, r0
  __IO uint32_t count = 0U;
 8004aba:	2000      	movs	r0, #0
 8004abc:	9001      	str	r0, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abe:	f89c 003d 	ldrb.w	r0, [ip, #61]	@ 0x3d
 8004ac2:	2820      	cmp	r0, #32
 8004ac4:	d129      	bne.n	8004b1a <HAL_I2C_Master_Transmit_IT+0x66>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ac6:	4830      	ldr	r0, [pc, #192]	@ (8004b88 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8004ac8:	4c30      	ldr	r4, [pc, #192]	@ (8004b8c <HAL_I2C_Master_Transmit_IT+0xd8>)
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	08c0      	lsrs	r0, r0, #3
 8004ace:	fba4 4000 	umull	r4, r0, r4, r0
 8004ad2:	0a00      	lsrs	r0, r0, #8
 8004ad4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ad8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004adc:	9001      	str	r0, [sp, #4]
 8004ade:	e004      	b.n	8004aea <HAL_I2C_Master_Transmit_IT+0x36>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004ae0:	f8dc 4000 	ldr.w	r4, [ip]
 8004ae4:	69a0      	ldr	r0, [r4, #24]
 8004ae6:	0780      	lsls	r0, r0, #30
 8004ae8:	d51a      	bpl.n	8004b20 <HAL_I2C_Master_Transmit_IT+0x6c>
      count--;
 8004aea:	9c01      	ldr	r4, [sp, #4]
 8004aec:	3c01      	subs	r4, #1
 8004aee:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8004af0:	9801      	ldr	r0, [sp, #4]
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d1f4      	bne.n	8004ae0 <HAL_I2C_Master_Transmit_IT+0x2c>
        hi2c->State               = HAL_I2C_STATE_READY;
 8004af6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af8:	f8cc 0030 	str.w	r0, [ip, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004afc:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	f88c 003e 	strb.w	r0, [ip, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b04:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004b08:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8004b10:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b12:	f8cc 3040 	str.w	r3, [ip, #64]	@ 0x40
}
 8004b16:	b002      	add	sp, #8
 8004b18:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8004b1a:	2002      	movs	r0, #2
}
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8004b20:	f89c 003c 	ldrb.w	r0, [ip, #60]	@ 0x3c
 8004b24:	2801      	cmp	r0, #1
 8004b26:	d0f8      	beq.n	8004b1a <HAL_I2C_Master_Transmit_IT+0x66>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	07c0      	lsls	r0, r0, #31
 8004b2c:	d403      	bmi.n	8004b36 <HAL_I2C_Master_Transmit_IT+0x82>
      __HAL_I2C_ENABLE(hi2c);
 8004b2e:	6820      	ldr	r0, [r4, #0]
 8004b30:	f040 0001 	orr.w	r0, r0, #1
 8004b34:	6020      	str	r0, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b36:	6820      	ldr	r0, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b38:	f04f 0e21 	mov.w	lr, #33	@ 0x21
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b3c:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 8004b40:	6020      	str	r0, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b42:	f88c e03d 	strb.w	lr, [ip, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b46:	2000      	movs	r0, #0
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b48:	f04f 0e10 	mov.w	lr, #16
 8004b4c:	f88c e03e 	strb.w	lr, [ip, #62]	@ 0x3e
    hi2c->pBuffPtr    = pData;
 8004b50:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b54:	f8cc 0040 	str.w	r0, [ip, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b58:	4a0d      	ldr	r2, [pc, #52]	@ (8004b90 <HAL_I2C_Master_Transmit_IT+0xdc>)
    hi2c->XferCount   = Size;
 8004b5a:	f8ac 302a 	strh.w	r3, [ip, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b5e:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
    __HAL_UNLOCK(hi2c);
 8004b62:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b66:	f8cc 202c 	str.w	r2, [ip, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004b6a:	f8cc 1044 	str.w	r1, [ip, #68]	@ 0x44
    hi2c->XferSize    = hi2c->XferCount;
 8004b6e:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b78:	6063      	str	r3, [r4, #4]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b80:	6023      	str	r3, [r4, #0]
}
 8004b82:	b002      	add	sp, #8
 8004b84:	bd10      	pop	{r4, pc}
 8004b86:	bf00      	nop
 8004b88:	20000004 	.word	0x20000004
 8004b8c:	14f8b589 	.word	0x14f8b589
 8004b90:	ffff0000 	.word	0xffff0000

08004b94 <HAL_I2C_Mem_Read_IT>:
{
 8004b94:	b4f0      	push	{r4, r5, r6, r7}
 8004b96:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004b98:	2400      	movs	r4, #0
 8004b9a:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9c:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
{
 8004ba0:	f8bd c01c 	ldrh.w	ip, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba4:	2c20      	cmp	r4, #32
 8004ba6:	d126      	bne.n	8004bf6 <HAL_I2C_Mem_Read_IT+0x62>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ba8:	4c30      	ldr	r4, [pc, #192]	@ (8004c6c <HAL_I2C_Mem_Read_IT+0xd8>)
 8004baa:	4d31      	ldr	r5, [pc, #196]	@ (8004c70 <HAL_I2C_Mem_Read_IT+0xdc>)
 8004bac:	6824      	ldr	r4, [r4, #0]
 8004bae:	08e4      	lsrs	r4, r4, #3
 8004bb0:	fba5 5404 	umull	r5, r4, r5, r4
 8004bb4:	0a24      	lsrs	r4, r4, #8
 8004bb6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004bba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004bbe:	9401      	str	r4, [sp, #4]
 8004bc0:	e003      	b.n	8004bca <HAL_I2C_Mem_Read_IT+0x36>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004bc2:	6804      	ldr	r4, [r0, #0]
 8004bc4:	69a5      	ldr	r5, [r4, #24]
 8004bc6:	07ae      	lsls	r6, r5, #30
 8004bc8:	d519      	bpl.n	8004bfe <HAL_I2C_Mem_Read_IT+0x6a>
      count--;
 8004bca:	9c01      	ldr	r4, [sp, #4]
 8004bcc:	3c01      	subs	r4, #1
 8004bce:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8004bd0:	9c01      	ldr	r4, [sp, #4]
 8004bd2:	2c00      	cmp	r4, #0
 8004bd4:	d1f5      	bne.n	8004bc2 <HAL_I2C_Mem_Read_IT+0x2e>
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bd6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd8:	6304      	str	r4, [r0, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bda:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bde:	f880 403e 	strb.w	r4, [r0, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004be4:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be8:	f043 0320 	orr.w	r3, r3, #32
 8004bec:	6403      	str	r3, [r0, #64]	@ 0x40
        return HAL_ERROR;
 8004bee:	2001      	movs	r0, #1
}
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bcf0      	pop	{r4, r5, r6, r7}
 8004bf4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004bf6:	2002      	movs	r0, #2
}
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bcf0      	pop	{r4, r5, r6, r7}
 8004bfc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004bfe:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8004c02:	2d01      	cmp	r5, #1
 8004c04:	d0f7      	beq.n	8004bf6 <HAL_I2C_Mem_Read_IT+0x62>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c06:	6825      	ldr	r5, [r4, #0]
 8004c08:	07ed      	lsls	r5, r5, #31
 8004c0a:	d403      	bmi.n	8004c14 <HAL_I2C_Mem_Read_IT+0x80>
      __HAL_I2C_ENABLE(hi2c);
 8004c0c:	6825      	ldr	r5, [r4, #0]
 8004c0e:	f045 0501 	orr.w	r5, r5, #1
 8004c12:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c14:	6825      	ldr	r5, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c16:	4f17      	ldr	r7, [pc, #92]	@ (8004c74 <HAL_I2C_Mem_Read_IT+0xe0>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c18:	f425 6500 	bic.w	r5, r5, #2048	@ 0x800
 8004c1c:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8004c1e:	9d06      	ldr	r5, [sp, #24]
 8004c20:	6245      	str	r5, [r0, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c22:	2522      	movs	r5, #34	@ 0x22
 8004c24:	f880 503d 	strb.w	r5, [r0, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c28:	2600      	movs	r6, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c2a:	2540      	movs	r5, #64	@ 0x40
 8004c2c:	f880 503e 	strb.w	r5, [r0, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	6406      	str	r6, [r0, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8004c32:	f8a0 c02a 	strh.w	ip, [r0, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c36:	8d45      	ldrh	r5, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c38:	62c7      	str	r7, [r0, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004c3a:	6441      	str	r1, [r0, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004c3c:	6482      	str	r2, [r0, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004c3e:	64c3      	str	r3, [r0, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004c40:	6506      	str	r6, [r0, #80]	@ 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	6822      	ldr	r2, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8004c44:	b2ad      	uxth	r5, r5
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
    hi2c->XferSize    = hi2c->XferCount;
 8004c4a:	8505      	strh	r5, [r0, #40]	@ 0x28
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4c:	6022      	str	r2, [r4, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c54:	6022      	str	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004c56:	f880 603c 	strb.w	r6, [r0, #60]	@ 0x3c
    if (hi2c->XferSize > 0U)
 8004c5a:	b11d      	cbz	r5, 8004c64 <HAL_I2C_Mem_Read_IT+0xd0>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c5c:	6863      	ldr	r3, [r4, #4]
 8004c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c62:	6063      	str	r3, [r4, #4]
    return HAL_OK;
 8004c64:	2000      	movs	r0, #0
}
 8004c66:	b002      	add	sp, #8
 8004c68:	bcf0      	pop	{r4, r5, r6, r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	20000004 	.word	0x20000004
 8004c70:	14f8b589 	.word	0x14f8b589
 8004c74:	ffff0000 	.word	0xffff0000

08004c78 <HAL_I2C_IsDeviceReady>:
{
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	b083      	sub	sp, #12
 8004c80:	461e      	mov	r6, r3
 8004c82:	468a      	mov	sl, r1
 8004c84:	4693      	mov	fp, r2
  uint32_t tickstart = HAL_GetTick();
 8004c86:	f7fe fa9b 	bl	80031c0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8a:	f895 303d 	ldrb.w	r3, [r5, #61]	@ 0x3d
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d003      	beq.n	8004c9a <HAL_I2C_IsDeviceReady+0x22>
      return HAL_BUSY;
 8004c92:	2002      	movs	r0, #2
}
 8004c94:	b003      	add	sp, #12
 8004c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9a:	4607      	mov	r7, r0
 8004c9c:	e005      	b.n	8004caa <HAL_I2C_IsDeviceReady+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9e:	f7fe fa8f 	bl	80031c0 <HAL_GetTick>
 8004ca2:	1bc0      	subs	r0, r0, r7
 8004ca4:	2819      	cmp	r0, #25
 8004ca6:	f200 809d 	bhi.w	8004de4 <HAL_I2C_IsDeviceReady+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	43d2      	mvns	r2, r2
 8004cb0:	f012 0402 	ands.w	r4, r2, #2
 8004cb4:	d0f3      	beq.n	8004c9e <HAL_I2C_IsDeviceReady+0x26>
    __HAL_LOCK(hi2c);
 8004cb6:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8004cba:	2a01      	cmp	r2, #1
 8004cbc:	d0e9      	beq.n	8004c92 <HAL_I2C_IsDeviceReady+0x1a>
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	07d4      	lsls	r4, r2, #31
 8004cc8:	f140 8087 	bpl.w	8004dda <HAL_I2C_IsDeviceReady+0x162>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ccc:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cce:	495b      	ldr	r1, [pc, #364]	@ (8004e3c <HAL_I2C_IsDeviceReady+0x1c4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd6:	2024      	movs	r0, #36	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd8:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cda:	f885 003d 	strb.w	r0, [r5, #61]	@ 0x3d
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cde:	f00a 0afe 	and.w	sl, sl, #254	@ 0xfe
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce2:	642a      	str	r2, [r5, #64]	@ 0x40
  uint32_t I2C_Trials = 0U;
 8004ce4:	4691      	mov	r9, r2
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce6:	62e9      	str	r1, [r5, #44]	@ 0x2c
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004ce8:	f04f 08a0 	mov.w	r8, #160	@ 0xa0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf2:	601a      	str	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf4:	e001      	b.n	8004cfa <HAL_I2C_IsDeviceReady+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	1c70      	adds	r0, r6, #1
 8004cf8:	d140      	bne.n	8004d7c <HAL_I2C_IsDeviceReady+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cfa:	695a      	ldr	r2, [r3, #20]
 8004cfc:	07d2      	lsls	r2, r2, #31
 8004cfe:	d5fa      	bpl.n	8004cf6 <HAL_I2C_IsDeviceReady+0x7e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d00:	f8c3 a010 	str.w	sl, [r3, #16]
      tickstart = HAL_GetTick();
 8004d04:	f7fe fa5c 	bl	80031c0 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d08:	682b      	ldr	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004d0a:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d0c:	e00a      	b.n	8004d24 <HAL_I2C_IsDeviceReady+0xac>
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	d112      	bne.n	8004d38 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d12:	f7fe fa55 	bl	80031c0 <HAL_GetTick>
 8004d16:	1bc0      	subs	r0, r0, r7
 8004d18:	42b0      	cmp	r0, r6
 8004d1a:	d800      	bhi.n	8004d1e <HAL_I2C_IsDeviceReady+0xa6>
 8004d1c:	b90e      	cbnz	r6, 8004d22 <HAL_I2C_IsDeviceReady+0xaa>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004d1e:	f885 803d 	strb.w	r8, [r5, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d22:	682b      	ldr	r3, [r5, #0]
 8004d24:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d26:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d28:	f895 003d 	ldrb.w	r0, [r5, #61]	@ 0x3d
 8004d2c:	28a0      	cmp	r0, #160	@ 0xa0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d2e:	f002 0202 	and.w	r2, r2, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d32:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d36:	d1ea      	bne.n	8004d0e <HAL_I2C_IsDeviceReady+0x96>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	681a      	ldr	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004d46:	d15c      	bne.n	8004e02 <HAL_I2C_IsDeviceReady+0x18a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d48:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d50:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d52:	6159      	str	r1, [r3, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d54:	e005      	b.n	8004d62 <HAL_I2C_IsDeviceReady+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fe fa33 	bl	80031c0 <HAL_GetTick>
 8004d5a:	1bc0      	subs	r0, r0, r7
 8004d5c:	2819      	cmp	r0, #25
 8004d5e:	d82b      	bhi.n	8004db8 <HAL_I2C_IsDeviceReady+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	699c      	ldr	r4, [r3, #24]
 8004d64:	43e4      	mvns	r4, r4
 8004d66:	f014 0402 	ands.w	r4, r4, #2
 8004d6a:	d0f4      	beq.n	8004d56 <HAL_I2C_IsDeviceReady+0xde>
      I2C_Trials++;
 8004d6c:	f109 0901 	add.w	r9, r9, #1
    while (I2C_Trials < Trials);
 8004d70:	45d9      	cmp	r9, fp
 8004d72:	d3bb      	bcc.n	8004cec <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	2320      	movs	r3, #32
 8004d76:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
    return HAL_ERROR;
 8004d7a:	e027      	b.n	8004dcc <HAL_I2C_IsDeviceReady+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7c:	f7fe fa20 	bl	80031c0 <HAL_GetTick>
 8004d80:	1bc0      	subs	r0, r0, r7
 8004d82:	4286      	cmp	r6, r0
 8004d84:	d33b      	bcc.n	8004dfe <HAL_I2C_IsDeviceReady+0x186>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d86:	682b      	ldr	r3, [r5, #0]
 8004d88:	461a      	mov	r2, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	d1b5      	bne.n	8004cfa <HAL_I2C_IsDeviceReady+0x82>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d8e:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d90:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d92:	6329      	str	r1, [r5, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d94:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d98:	f885 103e 	strb.w	r1, [r5, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d9c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004d9e:	f885 103c 	strb.w	r1, [r5, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004da2:	f043 0320 	orr.w	r3, r3, #32
 8004da6:	642b      	str	r3, [r5, #64]	@ 0x40
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da8:	6813      	ldr	r3, [r2, #0]
 8004daa:	05d9      	lsls	r1, r3, #23
 8004dac:	d502      	bpl.n	8004db4 <HAL_I2C_IsDeviceReady+0x13c>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004db2:	642b      	str	r3, [r5, #64]	@ 0x40
        return HAL_TIMEOUT;
 8004db4:	2003      	movs	r0, #3
 8004db6:	e76d      	b.n	8004c94 <HAL_I2C_IsDeviceReady+0x1c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004db8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dba:	632c      	str	r4, [r5, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dbc:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dc0:	f885 403e 	strb.w	r4, [r5, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dc4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004dc6:	f043 0320 	orr.w	r3, r3, #32
 8004dca:	642b      	str	r3, [r5, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004dcc:	2300      	movs	r3, #0
          return HAL_ERROR;
 8004dce:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8004dd0:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8004dd4:	b003      	add	sp, #12
 8004dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e773      	b.n	8004ccc <HAL_I2C_IsDeviceReady+0x54>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004de4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004de6:	632c      	str	r4, [r5, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004de8:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dec:	f885 403e 	strb.w	r4, [r5, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004df0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004df2:	f885 403c 	strb.w	r4, [r5, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004df6:	f043 0320 	orr.w	r3, r3, #32
 8004dfa:	642b      	str	r3, [r5, #64]	@ 0x40
        return HAL_ERROR;
 8004dfc:	e749      	b.n	8004c92 <HAL_I2C_IsDeviceReady+0x1a>
 8004dfe:	682a      	ldr	r2, [r5, #0]
 8004e00:	e7c5      	b.n	8004d8e <HAL_I2C_IsDeviceReady+0x116>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	9101      	str	r1, [sp, #4]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	9201      	str	r2, [sp, #4]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	9201      	str	r2, [sp, #4]
 8004e14:	9a01      	ldr	r2, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e16:	e005      	b.n	8004e24 <HAL_I2C_IsDeviceReady+0x1ac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e18:	f7fe f9d2 	bl	80031c0 <HAL_GetTick>
 8004e1c:	1bc0      	subs	r0, r0, r7
 8004e1e:	2819      	cmp	r0, #25
 8004e20:	d8ca      	bhi.n	8004db8 <HAL_I2C_IsDeviceReady+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e22:	682b      	ldr	r3, [r5, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	43db      	mvns	r3, r3
 8004e28:	f013 0402 	ands.w	r4, r3, #2
 8004e2c:	d0f4      	beq.n	8004e18 <HAL_I2C_IsDeviceReady+0x1a0>
        __HAL_UNLOCK(hi2c);
 8004e2e:	2000      	movs	r0, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004e30:	2320      	movs	r3, #32
 8004e32:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8004e36:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
        return HAL_OK;
 8004e3a:	e72b      	b.n	8004c94 <HAL_I2C_IsDeviceReady+0x1c>
 8004e3c:	ffff0000 	.word	0xffff0000

08004e40 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop

08004e48 <HAL_I2C_AddrCallback>:
}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop

08004e4c <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop

08004e50 <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop

08004e54 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e54:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  if (hi2c->EventCount == 0U)
 8004e58:	6d01      	ldr	r1, [r0, #80]	@ 0x50
{
 8004e5a:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8004e5c:	b959      	cbnz	r1, 8004e76 <I2C_MemoryTransmit_TXE_BTF+0x22>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e5e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e60:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e62:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e64:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e66:	d00d      	beq.n	8004e84 <I2C_MemoryTransmit_TXE_BTF+0x30>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004e6c:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8004e6e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004e70:	3201      	adds	r2, #1
 8004e72:	6502      	str	r2, [r0, #80]	@ 0x50
 8004e74:	4770      	bx	lr
  else if (hi2c->EventCount == 1U)
 8004e76:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8004e78:	2901      	cmp	r1, #1
 8004e7a:	d009      	beq.n	8004e90 <I2C_MemoryTransmit_TXE_BTF+0x3c>
  else if (hi2c->EventCount == 2U)
 8004e7c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8004e7e:	2902      	cmp	r1, #2
 8004e80:	d00e      	beq.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x4c>
 8004e82:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8004e88:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004e8a:	3202      	adds	r2, #2
 8004e8c:	6502      	str	r2, [r0, #80]	@ 0x50
 8004e8e:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e90:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8004e92:	6801      	ldr	r1, [r0, #0]
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8004e98:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004e9a:	3201      	adds	r2, #1
 8004e9c:	6502      	str	r2, [r0, #80]	@ 0x50
 8004e9e:	4770      	bx	lr
 8004ea0:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ea2:	2a22      	cmp	r2, #34	@ 0x22
 8004ea4:	d01f      	beq.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ea6:	8d41      	ldrh	r1, [r0, #42]	@ 0x2a
 8004ea8:	b289      	uxth	r1, r1
 8004eaa:	b9c1      	cbnz	r1, 8004ede <I2C_MemoryTransmit_TXE_BTF+0x8a>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004eac:	8d41      	ldrh	r1, [r0, #42]	@ 0x2a
 8004eae:	b289      	uxth	r1, r1
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	d1e6      	bne.n	8004e82 <I2C_MemoryTransmit_TXE_BTF+0x2e>
 8004eb4:	2a21      	cmp	r2, #33	@ 0x21
 8004eb6:	d1e4      	bne.n	8004e82 <I2C_MemoryTransmit_TXE_BTF+0x2e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb8:	6802      	ldr	r2, [r0, #0]
{
 8004eba:	b510      	push	{r4, lr}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ebc:	6854      	ldr	r4, [r2, #4]
 8004ebe:	f424 64e0 	bic.w	r4, r4, #1792	@ 0x700
 8004ec2:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec4:	6814      	ldr	r4, [r2, #0]
 8004ec6:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
 8004eca:	6014      	str	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ece:	6301      	str	r1, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	f880 103e 	strb.w	r1, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ed8:	f7ff ffba 	bl	8004e50 <HAL_I2C_MemTxCpltCallback>
}
 8004edc:	bd10      	pop	{r4, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ede:	2a21      	cmp	r2, #33	@ 0x21
 8004ee0:	d00a      	beq.n	8004ef8 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee4:	4770      	bx	lr
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ee6:	6801      	ldr	r1, [r0, #0]
 8004ee8:	680a      	ldr	r2, [r1, #0]
 8004eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eee:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 8004ef0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004ef2:	3201      	adds	r2, #1
 8004ef4:	6502      	str	r2, [r0, #80]	@ 0x50
 8004ef6:	4770      	bx	lr
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ef8:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8004efa:	6802      	ldr	r2, [r0, #0]
 8004efc:	f811 0b01 	ldrb.w	r0, [r1], #1
 8004f00:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8004f02:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8004f04:	6259      	str	r1, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004f06:	3a01      	subs	r2, #1
 8004f08:	b292      	uxth	r2, r2
 8004f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop

08004f14 <I2C_DMAAbort>:
{
 8004f14:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f16:	4b3a      	ldr	r3, [pc, #232]	@ (8005000 <I2C_DMAAbort+0xec>)
 8004f18:	4a3a      	ldr	r2, [pc, #232]	@ (8005004 <I2C_DMAAbort+0xf0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f1c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8004f1e:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f20:	08db      	lsrs	r3, r3, #3
  __IO uint32_t count = 0U;
 8004f22:	2100      	movs	r1, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 8004f28:	9101      	str	r1, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f2a:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f2c:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f30:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f36:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f3a:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	e005      	b.n	8004f4c <I2C_DMAAbort+0x38>
    count--;
 8004f40:	9b01      	ldr	r3, [sp, #4]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	059b      	lsls	r3, r3, #22
 8004f4a:	d506      	bpl.n	8004f5a <I2C_DMAAbort+0x46>
    if (count == 0U)
 8004f4c:	9b01      	ldr	r3, [sp, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f6      	bne.n	8004f40 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f52:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004f54:	f043 0320 	orr.w	r3, r3, #32
 8004f58:	6403      	str	r3, [r0, #64]	@ 0x40
  if (hi2c->hdmarx != NULL)
 8004f5a:	e9d0 430d 	ldrd	r4, r3, [r0, #52]	@ 0x34
  if (hi2c->hdmatx != NULL)
 8004f5e:	b344      	cbz	r4, 8004fb2 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f60:	2500      	movs	r5, #0
 8004f62:	63e5      	str	r5, [r4, #60]	@ 0x3c
  if (hi2c->hdmarx != NULL)
 8004f64:	b1f3      	cbz	r3, 8004fa4 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f68:	63dd      	str	r5, [r3, #60]	@ 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	f426 6680 	bic.w	r6, r6, #1024	@ 0x400
 8004f6e:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8004f70:	8545      	strh	r5, [r0, #42]	@ 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f72:	6525      	str	r5, [r4, #80]	@ 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f74:	2400      	movs	r4, #0
 8004f76:	651c      	str	r4, [r3, #80]	@ 0x50
  __HAL_I2C_DISABLE(hi2c);
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f80:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004f84:	2b60      	cmp	r3, #96	@ 0x60
 8004f86:	d029      	beq.n	8004fdc <I2C_DMAAbort+0xc8>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f88:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8004f8c:	2928      	cmp	r1, #40	@ 0x28
 8004f8e:	d018      	beq.n	8004fc2 <I2C_DMAAbort+0xae>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f90:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f9c:	f7fc fc48 	bl	8001830 <HAL_I2C_ErrorCallback>
}
 8004fa0:	b002      	add	sp, #8
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa4:	6815      	ldr	r5, [r2, #0]
 8004fa6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8004faa:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8004fac:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fae:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8004fb0:	e7e2      	b.n	8004f78 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8004fb2:	b1f3      	cbz	r3, 8004ff2 <I2C_DMAAbort+0xde>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb4:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fb6:	63dc      	str	r4, [r3, #60]	@ 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8004fbc:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8004fbe:	8544      	strh	r4, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8004fc0:	e7d8      	b.n	8004f74 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fca:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fcc:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fd2:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fd4:	6304      	str	r4, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fd6:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
 8004fda:	e7df      	b.n	8004f9c <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fdc:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fe4:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fe8:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fea:	f7ff ff91 	bl	8004f10 <HAL_I2C_AbortCpltCallback>
}
 8004fee:	b002      	add	sp, #8
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff2:	6814      	ldr	r4, [r2, #0]
 8004ff4:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 8004ff8:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8004ffa:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8004ffc:	e7bc      	b.n	8004f78 <I2C_DMAAbort+0x64>
 8004ffe:	bf00      	nop
 8005000:	20000004 	.word	0x20000004
 8005004:	14f8b589 	.word	0x14f8b589

08005008 <I2C_ITError>:
{
 8005008:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800500a:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800500e:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005012:	2b10      	cmp	r3, #16
{
 8005014:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005016:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005018:	d039      	beq.n	800508e <I2C_ITError+0x86>
 800501a:	b2d9      	uxtb	r1, r3
 800501c:	2940      	cmp	r1, #64	@ 0x40
 800501e:	d036      	beq.n	800508e <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005020:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 8005024:	2928      	cmp	r1, #40	@ 0x28
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005026:	6823      	ldr	r3, [r4, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005028:	d03c      	beq.n	80050a4 <I2C_ITError+0x9c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	0508      	lsls	r0, r1, #20
 800502e:	d407      	bmi.n	8005040 <I2C_ITError+0x38>
 8005030:	2a60      	cmp	r2, #96	@ 0x60
 8005032:	d005      	beq.n	8005040 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8005034:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005036:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8005038:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8005040:	2200      	movs	r2, #0
 8005042:	6322      	str	r2, [r4, #48]	@ 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 800504a:	d133      	bne.n	80050b4 <I2C_ITError+0xac>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800504c:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8005050:	2960      	cmp	r1, #96	@ 0x60
 8005052:	d074      	beq.n	800513e <I2C_ITError+0x136>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	0650      	lsls	r0, r2, #25
 8005058:	d505      	bpl.n	8005066 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8005060:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005062:	3301      	adds	r3, #1
 8005064:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8005066:	4620      	mov	r0, r4
 8005068:	f7fc fbe2 	bl	8001830 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 800506c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800506e:	0719      	lsls	r1, r3, #28
 8005070:	d004      	beq.n	800507c <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	6853      	ldr	r3, [r2, #4]
 8005076:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800507a:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800507c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005080:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005082:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8005084:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005086:	d501      	bpl.n	800508c <I2C_ITError+0x84>
 8005088:	2b28      	cmp	r3, #40	@ 0x28
 800508a:	d02e      	beq.n	80050ea <I2C_ITError+0xe2>
}
 800508c:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800508e:	2a22      	cmp	r2, #34	@ 0x22
 8005090:	d1c6      	bne.n	8005020 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800509a:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	0512      	lsls	r2, r2, #20
 80050a0:	d5c8      	bpl.n	8005034 <I2C_ITError+0x2c>
 80050a2:	e7cd      	b.n	8005040 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 80050a4:	2200      	movs	r2, #0
 80050a6:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80050a8:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 80050b2:	d0cb      	beq.n	800504c <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050b4:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050b6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050bc:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050be:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d01e      	beq.n	8005104 <I2C_ITError+0xfc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050c6:	4b29      	ldr	r3, [pc, #164]	@ (800516c <I2C_ITError+0x164>)
 80050c8:	6503      	str	r3, [r0, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050ca:	f7ff f853 	bl	8004174 <HAL_DMA_Abort_IT>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d0cc      	beq.n	800506c <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 80050d2:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050d4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 80050d6:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050e4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80050e6:	4798      	blx	r3
 80050e8:	e7c0      	b.n	800506c <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 80050ea:	2300      	movs	r3, #0
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050ec:	4920      	ldr	r1, [pc, #128]	@ (8005170 <I2C_ITError+0x168>)
 80050ee:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80050f0:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80050f2:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80050f4:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80050f6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80050fe:	f7ff fea5 	bl	8004e4c <HAL_I2C_ListenCpltCallback>
}
 8005102:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005104:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005106:	4b19      	ldr	r3, [pc, #100]	@ (800516c <I2C_ITError+0x164>)
 8005108:	6503      	str	r3, [r0, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800510a:	f7ff f833 	bl	8004174 <HAL_DMA_Abort_IT>
 800510e:	2800      	cmp	r0, #0
 8005110:	d0ac      	beq.n	800506c <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	0651      	lsls	r1, r2, #25
 8005118:	d506      	bpl.n	8005128 <I2C_ITError+0x120>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8005120:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8005122:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8005124:	3201      	adds	r2, #1
 8005126:	6262      	str	r2, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8005128:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800512a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 800512c:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8005130:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8005132:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8005134:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005138:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800513a:	4798      	blx	r3
 800513c:	e796      	b.n	800506c <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 800513e:	2120      	movs	r1, #32
 8005140:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005144:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005146:	695a      	ldr	r2, [r3, #20]
 8005148:	0652      	lsls	r2, r2, #25
 800514a:	d506      	bpl.n	800515a <I2C_ITError+0x152>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8005152:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8005154:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 8005156:	3201      	adds	r2, #1
 8005158:	6262      	str	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
    HAL_I2C_AbortCpltCallback(hi2c);
 8005160:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8005162:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8005164:	f7ff fed4 	bl	8004f10 <HAL_I2C_AbortCpltCallback>
 8005168:	e780      	b.n	800506c <I2C_ITError+0x64>
 800516a:	bf00      	nop
 800516c:	08004f15 	.word	0x08004f15
 8005170:	ffff0000 	.word	0xffff0000

08005174 <HAL_I2C_EV_IRQHandler>:
{
 8005174:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005176:	6803      	ldr	r3, [r0, #0]
 8005178:	685f      	ldr	r7, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800517a:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800517c:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005180:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005184:	2a10      	cmp	r2, #16
{
 8005186:	4604      	mov	r4, r0
 8005188:	b08f      	sub	sp, #60	@ 0x3c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800518a:	b2c9      	uxtb	r1, r1
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800518c:	b2d0      	uxtb	r0, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800518e:	d021      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0x60>
 8005190:	2840      	cmp	r0, #64	@ 0x40
 8005192:	d01f      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005194:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005196:	2a00      	cmp	r2, #0
 8005198:	f000 8097 	beq.w	80052ca <HAL_I2C_EV_IRQHandler+0x156>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800519c:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 800519e:	2000      	movs	r0, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051a0:	f012 0502 	ands.w	r5, r2, #2
 80051a4:	d059      	beq.n	800525a <HAL_I2C_EV_IRQHandler+0xe6>
 80051a6:	05bd      	lsls	r5, r7, #22
 80051a8:	d55a      	bpl.n	8005260 <HAL_I2C_EV_IRQHandler+0xec>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051aa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80051ac:	b102      	cbz	r2, 80051b0 <HAL_I2C_EV_IRQHandler+0x3c>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051ae:	6998      	ldr	r0, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051b0:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80051b4:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80051b8:	2a28      	cmp	r2, #40	@ 0x28
 80051ba:	f000 8230 	beq.w	800561e <HAL_I2C_EV_IRQHandler+0x4aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051be:	2200      	movs	r2, #0
 80051c0:	920c      	str	r2, [sp, #48]	@ 0x30
 80051c2:	6959      	ldr	r1, [r3, #20]
 80051c4:	910c      	str	r1, [sp, #48]	@ 0x30
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80051ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80051cc:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
}
 80051d0:	b00f      	add	sp, #60	@ 0x3c
 80051d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051d4:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051d6:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80051d8:	f012 0f01 	tst.w	r2, #1
 80051dc:	d11a      	bne.n	8005214 <HAL_I2C_EV_IRQHandler+0xa0>
 80051de:	f5b5 0f2a 	cmp.w	r5, #11141120	@ 0xaa0000
 80051e2:	d0f5      	beq.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 80051e4:	f1b5 4f2a 	cmp.w	r5, #2852126720	@ 0xaa000000
 80051e8:	d0f2      	beq.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ea:	0715      	lsls	r5, r2, #28
 80051ec:	d570      	bpl.n	80052d0 <HAL_I2C_EV_IRQHandler+0x15c>
 80051ee:	05bd      	lsls	r5, r7, #22
 80051f0:	f140 8086 	bpl.w	8005300 <HAL_I2C_EV_IRQHandler+0x18c>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051f4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051f8:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051fa:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051fc:	2900      	cmp	r1, #0
 80051fe:	f000 81fb 	beq.w	80055f8 <HAL_I2C_EV_IRQHandler+0x484>
 8005202:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8005204:	2a00      	cmp	r2, #0
 8005206:	f000 81f7 	beq.w	80055f8 <HAL_I2C_EV_IRQHandler+0x484>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	e7dd      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005214:	05bd      	lsls	r5, r7, #22
 8005216:	d571      	bpl.n	80052fc <HAL_I2C_EV_IRQHandler+0x188>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005218:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800521a:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 800521e:	f000 81fb 	beq.w	8005618 <HAL_I2C_EV_IRQHandler+0x4a4>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005222:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005224:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005228:	bf04      	itt	eq
 800522a:	2208      	moveq	r2, #8
 800522c:	62e2      	streq	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800522e:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8005232:	2a40      	cmp	r2, #64	@ 0x40
 8005234:	f000 81e9 	beq.w	800560a <HAL_I2C_EV_IRQHandler+0x496>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005238:	6922      	ldr	r2, [r4, #16]
 800523a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800523e:	f000 81ca 	beq.w	80055d6 <HAL_I2C_EV_IRQHandler+0x462>
      if (hi2c->EventCount == 0U)
 8005242:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005244:	2a00      	cmp	r2, #0
 8005246:	f040 81fe 	bne.w	8005646 <HAL_I2C_EV_IRQHandler+0x4d2>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800524a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800524c:	11d2      	asrs	r2, r2, #7
 800524e:	f002 0206 	and.w	r2, r2, #6
 8005252:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 8005256:	611a      	str	r2, [r3, #16]
 8005258:	e7ba      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800525a:	06d6      	lsls	r6, r2, #27
 800525c:	f100 808a 	bmi.w	8005374 <HAL_I2C_EV_IRQHandler+0x200>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005260:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 8005264:	2921      	cmp	r1, #33	@ 0x21
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005266:	f002 0004 	and.w	r0, r2, #4
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800526a:	f000 80e0 	beq.w	800542e <HAL_I2C_EV_IRQHandler+0x2ba>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800526e:	0651      	lsls	r1, r2, #25
 8005270:	f140 8113 	bpl.w	800549a <HAL_I2C_EV_IRQHandler+0x326>
 8005274:	057a      	lsls	r2, r7, #21
 8005276:	f140 8110 	bpl.w	800549a <HAL_I2C_EV_IRQHandler+0x326>
 800527a:	2800      	cmp	r0, #0
 800527c:	f040 8110 	bne.w	80054a0 <HAL_I2C_EV_IRQHandler+0x32c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005280:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8005284:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005286:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005288:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 800528a:	2a00      	cmp	r2, #0
 800528c:	d0a0      	beq.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8005294:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 8005296:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8005298:	3b01      	subs	r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800529e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 80052a0:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052a2:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80052a4:	6262      	str	r2, [r4, #36]	@ 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d192      	bne.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 80052aa:	292a      	cmp	r1, #42	@ 0x2a
 80052ac:	d190      	bne.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052b2:	2522      	movs	r5, #34	@ 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052b4:	2128      	movs	r1, #40	@ 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052ba:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052bc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052be:	6325      	str	r5, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052c0:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052c4:	f7ff fdbe 	bl	8004e44 <HAL_I2C_SlaveRxCpltCallback>
 80052c8:	e782      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052ca:	6998      	ldr	r0, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	e767      	b.n	80051a0 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052d0:	0795      	lsls	r5, r2, #30
 80052d2:	d515      	bpl.n	8005300 <HAL_I2C_EV_IRQHandler+0x18c>
 80052d4:	05bd      	lsls	r5, r7, #22
 80052d6:	d513      	bpl.n	8005300 <HAL_I2C_EV_IRQHandler+0x18c>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052d8:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80052dc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052e0:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 80052e4:	2922      	cmp	r1, #34	@ 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052e6:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052e8:	f000 81bf 	beq.w	800566a <HAL_I2C_EV_IRQHandler+0x4f6>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ec:	2200      	movs	r2, #0
 80052ee:	920a      	str	r2, [sp, #40]	@ 0x28
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80052f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052fa:	e769      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052fc:	0715      	lsls	r5, r2, #28
 80052fe:	d5e7      	bpl.n	80052d0 <HAL_I2C_EV_IRQHandler+0x15c>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005300:	0776      	lsls	r6, r6, #29
 8005302:	f140 80d9 	bpl.w	80054b8 <HAL_I2C_EV_IRQHandler+0x344>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005306:	685d      	ldr	r5, [r3, #4]
 8005308:	052d      	lsls	r5, r5, #20
 800530a:	f53f af61 	bmi.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800530e:	0616      	lsls	r6, r2, #24
 8005310:	f002 0504 	and.w	r5, r2, #4
 8005314:	f140 80f9 	bpl.w	800550a <HAL_I2C_EV_IRQHandler+0x396>
 8005318:	057a      	lsls	r2, r7, #21
 800531a:	f140 80f6 	bpl.w	800550a <HAL_I2C_EV_IRQHandler+0x396>
 800531e:	2d00      	cmp	r5, #0
 8005320:	f040 80f6 	bne.w	8005510 <HAL_I2C_EV_IRQHandler+0x39c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005324:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005328:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800532a:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800532e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005330:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005332:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005334:	2800      	cmp	r0, #0
 8005336:	f040 8246 	bne.w	80057c6 <HAL_I2C_EV_IRQHandler+0x652>
 800533a:	2a21      	cmp	r2, #33	@ 0x21
 800533c:	f000 8354 	beq.w	80059e8 <HAL_I2C_EV_IRQHandler+0x874>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005340:	2940      	cmp	r1, #64	@ 0x40
 8005342:	f47f af45 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005346:	2a22      	cmp	r2, #34	@ 0x22
 8005348:	f47f af42 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->XferCount == 0U)
 800534c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800534e:	b292      	uxth	r2, r2
 8005350:	2a00      	cmp	r2, #0
 8005352:	f000 827e 	beq.w	8005852 <HAL_I2C_EV_IRQHandler+0x6de>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005356:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 800535a:	2a40      	cmp	r2, #64	@ 0x40
 800535c:	f000 80e1 	beq.w	8005522 <HAL_I2C_EV_IRQHandler+0x3ae>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005360:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005362:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005366:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8005368:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 800536a:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 800536c:	3b01      	subs	r3, #1
 800536e:	b29b      	uxth	r3, r3
 8005370:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005372:	e72d      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005374:	05b8      	lsls	r0, r7, #22
 8005376:	f57f af73 	bpl.w	8005260 <HAL_I2C_EV_IRQHandler+0xec>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800537a:	f894 603d 	ldrb.w	r6, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005384:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005386:	950d      	str	r5, [sp, #52]	@ 0x34
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	920d      	str	r2, [sp, #52]	@ 0x34
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800539c:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053a2:	b2f6      	uxtb	r6, r6
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053a4:	f100 80e6 	bmi.w	8005574 <HAL_I2C_EV_IRQHandler+0x400>
  if (hi2c->XferCount != 0U)
 80053a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	b313      	cbz	r3, 80053f4 <HAL_I2C_EV_IRQHandler+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	0752      	lsls	r2, r2, #29
 80053b4:	d50a      	bpl.n	80053cc <HAL_I2C_EV_IRQHandler+0x258>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80053bc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 80053be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80053c0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80053c2:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 80053c4:	b292      	uxth	r2, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053c6:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 80053c8:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80053ca:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	0657      	lsls	r7, r2, #25
 80053d0:	d509      	bpl.n	80053e6 <HAL_I2C_EV_IRQHandler+0x272>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80053d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 80053da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80053dc:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80053de:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80053e0:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80053e2:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80053e4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80053e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	b11b      	cbz	r3, 80053f4 <HAL_I2C_EV_IRQHandler+0x280>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053ee:	f043 0304 	orr.w	r3, r3, #4
 80053f2:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f040 80e7 	bne.w	80055ca <HAL_I2C_EV_IRQHandler+0x456>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053fc:	2e2a      	cmp	r6, #42	@ 0x2a
 80053fe:	f000 8172 	beq.w	80056e6 <HAL_I2C_EV_IRQHandler+0x572>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005402:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005406:	2b28      	cmp	r3, #40	@ 0x28
 8005408:	f000 817d 	beq.w	8005706 <HAL_I2C_EV_IRQHandler+0x592>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800540c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800540e:	2b22      	cmp	r3, #34	@ 0x22
 8005410:	d002      	beq.n	8005418 <HAL_I2C_EV_IRQHandler+0x2a4>
 8005412:	2e22      	cmp	r6, #34	@ 0x22
 8005414:	f47f aedc 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005418:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800541a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800541c:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800541e:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8005420:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005424:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005428:	f7ff fd0c 	bl	8004e44 <HAL_I2C_SlaveRxCpltCallback>
 800542c:	e6d0      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800542e:	0616      	lsls	r6, r2, #24
 8005430:	d527      	bpl.n	8005482 <HAL_I2C_EV_IRQHandler+0x30e>
 8005432:	057d      	lsls	r5, r7, #21
 8005434:	d525      	bpl.n	8005482 <HAL_I2C_EV_IRQHandler+0x30e>
 8005436:	bb38      	cbnz	r0, 8005488 <HAL_I2C_EV_IRQHandler+0x314>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005438:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 800543c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800543e:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005440:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8005442:	2a00      	cmp	r2, #0
 8005444:	f43f aec4 	beq.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005448:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800544a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800544e:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8005450:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8005452:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005454:	3a01      	subs	r2, #1
 8005456:	b292      	uxth	r2, r2
 8005458:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800545a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800545c:	b292      	uxth	r2, r2
 800545e:	2a00      	cmp	r2, #0
 8005460:	f47f aeb6 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 8005464:	2829      	cmp	r0, #41	@ 0x29
 8005466:	f47f aeb3 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800546a:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800546c:	2528      	movs	r5, #40	@ 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800546e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005472:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005474:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005476:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005478:	f884 503d 	strb.w	r5, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800547c:	f7ff fce0 	bl	8004e40 <HAL_I2C_SlaveTxCpltCallback>
 8005480:	e6a6      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005482:	2800      	cmp	r0, #0
 8005484:	f43f aea4 	beq.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 8005488:	05b8      	lsls	r0, r7, #22
 800548a:	f57f aea1 	bpl.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 800548e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005490:	b292      	uxth	r2, r2
 8005492:	2a00      	cmp	r2, #0
 8005494:	f43f ae9c 	beq.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 8005498:	e762      	b.n	8005360 <HAL_I2C_EV_IRQHandler+0x1ec>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800549a:	2800      	cmp	r0, #0
 800549c:	f43f ae98 	beq.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 80054a0:	05be      	lsls	r6, r7, #22
 80054a2:	f57f ae95 	bpl.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 80054a6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80054a8:	b292      	uxth	r2, r2
 80054aa:	2a00      	cmp	r2, #0
 80054ac:	f43f ae90 	beq.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	7013      	strb	r3, [r2, #0]
 80054b6:	e020      	b.n	80054fa <HAL_I2C_EV_IRQHandler+0x386>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80054b8:	6859      	ldr	r1, [r3, #4]
 80054ba:	050d      	lsls	r5, r1, #20
 80054bc:	f53f ae88 	bmi.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054c0:	0650      	lsls	r0, r2, #25
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054c2:	f002 0104 	and.w	r1, r2, #4
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054c6:	d432      	bmi.n	800552e <HAL_I2C_EV_IRQHandler+0x3ba>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054c8:	2900      	cmp	r1, #0
 80054ca:	f43f ae81 	beq.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 80054ce:	05be      	lsls	r6, r7, #22
 80054d0:	f57f ae7e 	bpl.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 80054d6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 80054da:	b292      	uxth	r2, r2
 80054dc:	2a04      	cmp	r2, #4
 80054de:	f000 8140 	beq.w	8005762 <HAL_I2C_EV_IRQHandler+0x5ee>
  else if (hi2c->XferCount == 3U)
 80054e2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80054e4:	b292      	uxth	r2, r2
 80054e6:	2a03      	cmp	r2, #3
 80054e8:	f000 817f 	beq.w	80057ea <HAL_I2C_EV_IRQHandler+0x676>
  else if (hi2c->XferCount == 2U)
 80054ec:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80054ee:	b292      	uxth	r2, r2
 80054f0:	2a02      	cmp	r2, #2
 80054f2:	f000 81b3 	beq.w	800585c <HAL_I2C_EV_IRQHandler+0x6e8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80054fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 80054fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80054fe:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 8005500:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8005502:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8005504:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8005506:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 8005508:	e662      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800550a:	2d00      	cmp	r5, #0
 800550c:	f43f ae60 	beq.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 8005510:	05be      	lsls	r6, r7, #22
 8005512:	f57f ae5d 	bpl.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005516:	2921      	cmp	r1, #33	@ 0x21
 8005518:	f000 812a 	beq.w	8005770 <HAL_I2C_EV_IRQHandler+0x5fc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800551c:	2840      	cmp	r0, #64	@ 0x40
 800551e:	f47f ae57 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005522:	4620      	mov	r0, r4
}
 8005524:	b00f      	add	sp, #60	@ 0x3c
 8005526:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800552a:	f7ff bc93 	b.w	8004e54 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800552e:	057a      	lsls	r2, r7, #21
 8005530:	d5ca      	bpl.n	80054c8 <HAL_I2C_EV_IRQHandler+0x354>
 8005532:	2900      	cmp	r1, #0
 8005534:	d1cb      	bne.n	80054ce <HAL_I2C_EV_IRQHandler+0x35a>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005536:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800553a:	2a22      	cmp	r2, #34	@ 0x22
 800553c:	f47f ae48 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    tmp = hi2c->XferCount;
 8005540:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005542:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8005544:	2a03      	cmp	r2, #3
 8005546:	f240 8216 	bls.w	8005976 <HAL_I2C_EV_IRQHandler+0x802>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005550:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8005552:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8005554:	3b01      	subs	r3, #1
 8005556:	b29b      	uxth	r3, r3
 8005558:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800555a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800555e:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8005560:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8005562:	6262      	str	r2, [r4, #36]	@ 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8005564:	f47f ae34 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005568:	6822      	ldr	r2, [r4, #0]
 800556a:	6853      	ldr	r3, [r2, #4]
 800556c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005570:	6053      	str	r3, [r2, #4]
 8005572:	e62d      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005574:	f006 02f7 	and.w	r2, r6, #247	@ 0xf7
 8005578:	2a22      	cmp	r2, #34	@ 0x22
 800557a:	f000 8093 	beq.w	80056a4 <HAL_I2C_EV_IRQHandler+0x530>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800557e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005580:	6802      	ldr	r2, [r0, #0]
 8005582:	6852      	ldr	r2, [r2, #4]
 8005584:	b292      	uxth	r2, r2
 8005586:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8005588:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800558a:	b292      	uxth	r2, r2
 800558c:	b11a      	cbz	r2, 8005596 <HAL_I2C_EV_IRQHandler+0x422>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800558e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005590:	f042 0204 	orr.w	r2, r2, #4
 8005594:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800559c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800559e:	f7fe fed1 	bl	8004344 <HAL_DMA_GetState>
 80055a2:	2801      	cmp	r0, #1
 80055a4:	d008      	beq.n	80055b8 <HAL_I2C_EV_IRQHandler+0x444>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055a6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80055a8:	4b97      	ldr	r3, [pc, #604]	@ (8005808 <HAL_I2C_EV_IRQHandler+0x694>)
 80055aa:	6503      	str	r3, [r0, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055ac:	f7fe fde2 	bl	8004174 <HAL_DMA_Abort_IT>
 80055b0:	b110      	cbz	r0, 80055b8 <HAL_I2C_EV_IRQHandler+0x444>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055b2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80055b4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80055b6:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80055b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f aef6 	bne.w	80053ae <HAL_I2C_EV_IRQHandler+0x23a>
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f43f af1c 	beq.w	8005402 <HAL_I2C_EV_IRQHandler+0x28e>
    I2C_ITError(hi2c);
 80055ca:	4620      	mov	r0, r4
}
 80055cc:	b00f      	add	sp, #60	@ 0x3c
 80055ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80055d2:	f7ff bd19 	b.w	8005008 <I2C_ITError>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055d6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80055da:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055dc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055de:	bf16      	itet	ne
 80055e0:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055e4:	f002 02fe 	andeq.w	r2, r2, #254	@ 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055e8:	b2d2      	uxtbne	r2, r2
 80055ea:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80055ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80055ee:	b11a      	cbz	r2, 80055f8 <HAL_I2C_EV_IRQHandler+0x484>
 80055f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055f2:	2a00      	cmp	r2, #0
 80055f4:	f47f ae09 	bne.w	800520a <HAL_I2C_EV_IRQHandler+0x96>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	f43f ade8 	beq.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 8005600:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005602:	2a00      	cmp	r2, #0
 8005604:	f47f ae01 	bne.w	800520a <HAL_I2C_EV_IRQHandler+0x96>
 8005608:	e5e2      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->EventCount == 0U)
 800560a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800560c:	bb3a      	cbnz	r2, 800565e <HAL_I2C_EV_IRQHandler+0x4ea>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800560e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005610:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	e5db      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005618:	2201      	movs	r2, #1
 800561a:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800561c:	e607      	b.n	800522e <HAL_I2C_EV_IRQHandler+0xba>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005624:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005626:	0607      	lsls	r7, r0, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005628:	f080 0104 	eor.w	r1, r0, #4
    __HAL_UNLOCK(hi2c);
 800562c:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005630:	bf54      	ite	pl
 8005632:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005634:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8005636:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800563a:	f3c1 0180 	ubfx	r1, r1, #2, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff fc02 	bl	8004e48 <HAL_I2C_AddrCallback>
 8005644:	e5c4      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      else if (hi2c->EventCount == 1U)
 8005646:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005648:	2a01      	cmp	r2, #1
 800564a:	f47f adc1 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800564e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005650:	11d2      	asrs	r2, r2, #7
 8005652:	f002 0206 	and.w	r2, r2, #6
 8005656:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 800565a:	611a      	str	r2, [r3, #16]
 800565c:	e5b8      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800565e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	611a      	str	r2, [r3, #16]
 8005668:	e5b2      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800566a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800566c:	b911      	cbnz	r1, 8005674 <HAL_I2C_EV_IRQHandler+0x500>
 800566e:	2a40      	cmp	r2, #64	@ 0x40
 8005670:	f000 80a2 	beq.w	80057b8 <HAL_I2C_EV_IRQHandler+0x644>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005674:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005676:	b922      	cbnz	r2, 8005682 <HAL_I2C_EV_IRQHandler+0x50e>
 8005678:	6921      	ldr	r1, [r4, #16]
 800567a:	f5b1 4f40 	cmp.w	r1, #49152	@ 0xc000
 800567e:	f000 80a6 	beq.w	80057ce <HAL_I2C_EV_IRQHandler+0x65a>
      if (hi2c->XferCount == 0U)
 8005682:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005684:	b292      	uxth	r2, r2
 8005686:	2a00      	cmp	r2, #0
 8005688:	d14a      	bne.n	8005720 <HAL_I2C_EV_IRQHandler+0x5ac>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800568a:	9203      	str	r2, [sp, #12]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	9203      	str	r2, [sp, #12]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	9203      	str	r2, [sp, #12]
 8005694:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800569c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	6523      	str	r3, [r4, #80]	@ 0x50
 80056a2:	e595      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80056a4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80056a6:	6802      	ldr	r2, [r0, #0]
 80056a8:	6852      	ldr	r2, [r2, #4]
 80056aa:	b292      	uxth	r2, r2
 80056ac:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 80056ae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80056b0:	b292      	uxth	r2, r2
 80056b2:	b11a      	cbz	r2, 80056bc <HAL_I2C_EV_IRQHandler+0x548>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056b4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80056b6:	f042 0204 	orr.w	r2, r2, #4
 80056ba:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056c2:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056c4:	f7fe fe3e 	bl	8004344 <HAL_DMA_GetState>
 80056c8:	2801      	cmp	r0, #1
 80056ca:	f43f ae6d 	beq.w	80053a8 <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056ce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80056d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005808 <HAL_I2C_EV_IRQHandler+0x694>)
 80056d2:	6503      	str	r3, [r0, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056d4:	f7fe fd4e 	bl	8004174 <HAL_DMA_Abort_IT>
 80056d8:	2800      	cmp	r0, #0
 80056da:	f43f ae65 	beq.w	80053a8 <HAL_I2C_EV_IRQHandler+0x234>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056de:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80056e0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80056e2:	4798      	blx	r3
 80056e4:	e660      	b.n	80053a8 <HAL_I2C_EV_IRQHandler+0x234>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056e6:	2228      	movs	r2, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 80056e8:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056ea:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ec:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056f0:	f7ff fba8 	bl	8004e44 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056f4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80056f8:	2b28      	cmp	r3, #40	@ 0x28
 80056fa:	d004      	beq.n	8005706 <HAL_I2C_EV_IRQHandler+0x592>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80056fe:	2b22      	cmp	r3, #34	@ 0x22
 8005700:	f47f ad66 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 8005704:	e688      	b.n	8005418 <HAL_I2C_EV_IRQHandler+0x2a4>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005706:	2300      	movs	r3, #0
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005708:	4940      	ldr	r1, [pc, #256]	@ (800580c <HAL_I2C_EV_IRQHandler+0x698>)
 800570a:	62e1      	str	r1, [r4, #44]	@ 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 800570c:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800570e:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8005710:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8005712:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005716:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800571a:	f7ff fb97 	bl	8004e4c <HAL_I2C_ListenCpltCallback>
 800571e:	e557      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      else if (hi2c->XferCount == 1U)
 8005720:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005722:	b292      	uxth	r2, r2
 8005724:	2a01      	cmp	r2, #1
 8005726:	d073      	beq.n	8005810 <HAL_I2C_EV_IRQHandler+0x69c>
      else if (hi2c->XferCount == 2U)
 8005728:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800572a:	b292      	uxth	r2, r2
 800572c:	2a02      	cmp	r2, #2
 800572e:	f000 80d9 	beq.w	80058e4 <HAL_I2C_EV_IRQHandler+0x770>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005738:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	0512      	lsls	r2, r2, #20
 800573e:	d508      	bpl.n	8005752 <HAL_I2C_EV_IRQHandler+0x5de>
 8005740:	2820      	cmp	r0, #32
 8005742:	f200 80fb 	bhi.w	800593c <HAL_I2C_EV_IRQHandler+0x7c8>
 8005746:	2807      	cmp	r0, #7
 8005748:	f200 80ed 	bhi.w	8005926 <HAL_I2C_EV_IRQHandler+0x7b2>
 800574c:	2801      	cmp	r0, #1
 800574e:	f000 80f0 	beq.w	8005932 <HAL_I2C_EV_IRQHandler+0x7be>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2200      	movs	r2, #0
 8005754:	9209      	str	r2, [sp, #36]	@ 0x24
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	9209      	str	r2, [sp, #36]	@ 0x24
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	9309      	str	r3, [sp, #36]	@ 0x24
 800575e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005760:	e79d      	b.n	800569e <HAL_I2C_EV_IRQHandler+0x52a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005768:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800576e:	e6c4      	b.n	80054fa <HAL_I2C_EV_IRQHandler+0x386>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005770:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005772:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8005776:	2a21      	cmp	r2, #33	@ 0x21
 8005778:	f47f ad2a 	bne.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->XferCount != 0U)
 800577c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800577e:	b292      	uxth	r2, r2
 8005780:	2a00      	cmp	r2, #0
 8005782:	f47f aded 	bne.w	8005360 <HAL_I2C_EV_IRQHandler+0x1ec>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005786:	2908      	cmp	r1, #8
 8005788:	f000 80dd 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x7d2>
 800578c:	2920      	cmp	r1, #32
 800578e:	f000 80da 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x7d2>
 8005792:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8005796:	f000 80d6 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x7d2>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 80057a0:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057a2:	2011      	movs	r0, #17
        hi2c->State = HAL_I2C_STATE_READY;
 80057a4:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057a6:	6320      	str	r0, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a8:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057ac:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80057ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057b2:	f7fc f803 	bl	80017bc <HAL_I2C_MasterTxCpltCallback>
 80057b6:	e50b      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b8:	9101      	str	r1, [sp, #4]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	9201      	str	r2, [sp, #4]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	9b01      	ldr	r3, [sp, #4]
 80057c4:	e504      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80057c6:	2a21      	cmp	r2, #33	@ 0x21
 80057c8:	f47f adba 	bne.w	8005340 <HAL_I2C_EV_IRQHandler+0x1cc>
 80057cc:	e5be      	b.n	800534c <HAL_I2C_EV_IRQHandler+0x1d8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ce:	9202      	str	r2, [sp, #8]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	9202      	str	r2, [sp, #8]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	9202      	str	r2, [sp, #8]
 80057d8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80057e2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80057e4:	3301      	adds	r3, #1
 80057e6:	6523      	str	r3, [r4, #80]	@ 0x50
 80057e8:	e4f2      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ea:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80057ec:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80057f4:	f43f ae7f 	beq.w	80054f6 <HAL_I2C_EV_IRQHandler+0x382>
 80057f8:	2802      	cmp	r0, #2
 80057fa:	f43f ae7c 	beq.w	80054f6 <HAL_I2C_EV_IRQHandler+0x382>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e676      	b.n	80054f6 <HAL_I2C_EV_IRQHandler+0x382>
 8005808:	08004f15 	.word	0x08004f15
 800580c:	ffff0000 	.word	0xffff0000
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005810:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8005814:	f000 8129 	beq.w	8005a6a <HAL_I2C_EV_IRQHandler+0x8f6>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005818:	2808      	cmp	r0, #8
 800581a:	f000 80fd 	beq.w	8005a18 <HAL_I2C_EV_IRQHandler+0x8a4>
 800581e:	2820      	cmp	r0, #32
 8005820:	f000 80fa 	beq.w	8005a18 <HAL_I2C_EV_IRQHandler+0x8a4>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005824:	2d12      	cmp	r5, #18
 8005826:	f000 8150 	beq.w	8005aca <HAL_I2C_EV_IRQHandler+0x956>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800582a:	2810      	cmp	r0, #16
 800582c:	f200 814f 	bhi.w	8005ace <HAL_I2C_EV_IRQHandler+0x95a>
 8005830:	4a9c      	ldr	r2, [pc, #624]	@ (8005aa4 <HAL_I2C_EV_IRQHandler+0x930>)
 8005832:	4102      	asrs	r2, r0
 8005834:	07d2      	lsls	r2, r2, #31
 8005836:	f100 814a 	bmi.w	8005ace <HAL_I2C_EV_IRQHandler+0x95a>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005840:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005842:	2200      	movs	r2, #0
 8005844:	9206      	str	r2, [sp, #24]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	9206      	str	r2, [sp, #24]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	9306      	str	r3, [sp, #24]
 800584e:	9b06      	ldr	r3, [sp, #24]
 8005850:	e725      	b.n	800569e <HAL_I2C_EV_IRQHandler+0x52a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	e4b9      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800585c:	3801      	subs	r0, #1
 800585e:	280f      	cmp	r0, #15
 8005860:	d809      	bhi.n	8005876 <HAL_I2C_EV_IRQHandler+0x702>
 8005862:	e8df f000 	tbb	[pc, r0]
 8005866:	353a      	.short	0x353a
 8005868:	08083508 	.word	0x08083508
 800586c:	08080808 	.word	0x08080808
 8005870:	08080808 	.word	0x08080808
 8005874:	3a08      	.short	0x3a08
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800587c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8005882:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 8005884:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005886:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8005888:	3b01      	subs	r3, #1
 800588a:	b29b      	uxth	r3, r3
 800588c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588e:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8005890:	1c51      	adds	r1, r2, #1
 8005892:	6261      	str	r1, [r4, #36]	@ 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005894:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8005896:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005898:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 800589a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 800589c:	3b01      	subs	r3, #1
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058a2:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 80058a4:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 80058aa:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 80058ac:	6262      	str	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058ae:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80058b0:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058b4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80058b8:	2b40      	cmp	r3, #64	@ 0x40
 80058ba:	f000 80ea 	beq.w	8005a92 <HAL_I2C_EV_IRQHandler+0x91e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058be:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058c0:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c2:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80058c6:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058c8:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80058ca:	f7fb ff9f 	bl	800180c <HAL_I2C_MasterRxCpltCallback>
 80058ce:	e47f      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e7d1      	b.n	800587e <HAL_I2C_EV_IRQHandler+0x70a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e7cc      	b.n	800587e <HAL_I2C_EV_IRQHandler+0x70a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058e4:	2810      	cmp	r0, #16
 80058e6:	d804      	bhi.n	80058f2 <HAL_I2C_EV_IRQHandler+0x77e>
 80058e8:	4a6f      	ldr	r2, [pc, #444]	@ (8005aa8 <HAL_I2C_EV_IRQHandler+0x934>)
 80058ea:	40c2      	lsrs	r2, r0
 80058ec:	07d7      	lsls	r7, r2, #31
 80058ee:	f100 80a3 	bmi.w	8005a38 <HAL_I2C_EV_IRQHandler+0x8c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058f8:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005900:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	0516      	lsls	r6, r2, #20
 8005906:	d506      	bpl.n	8005916 <HAL_I2C_EV_IRQHandler+0x7a2>
 8005908:	2820      	cmp	r0, #32
 800590a:	f240 809d 	bls.w	8005a48 <HAL_I2C_EV_IRQHandler+0x8d4>
 800590e:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8005912:	f000 809e 	beq.w	8005a52 <HAL_I2C_EV_IRQHandler+0x8de>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005916:	2200      	movs	r2, #0
 8005918:	9208      	str	r2, [sp, #32]
 800591a:	695a      	ldr	r2, [r3, #20]
 800591c:	9208      	str	r2, [sp, #32]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	9308      	str	r3, [sp, #32]
 8005922:	9b08      	ldr	r3, [sp, #32]
 8005924:	e6bb      	b.n	800569e <HAL_I2C_EV_IRQHandler+0x52a>
 8005926:	4a61      	ldr	r2, [pc, #388]	@ (8005aac <HAL_I2C_EV_IRQHandler+0x938>)
 8005928:	3808      	subs	r0, #8
 800592a:	40c2      	lsrs	r2, r0
 800592c:	07d7      	lsls	r7, r2, #31
 800592e:	f57f af10 	bpl.w	8005752 <HAL_I2C_EV_IRQHandler+0x5de>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	e70a      	b.n	8005752 <HAL_I2C_EV_IRQHandler+0x5de>
 800593c:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8005940:	f47f af07 	bne.w	8005752 <HAL_I2C_EV_IRQHandler+0x5de>
 8005944:	e7f5      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x7be>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 800594c:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594e:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005950:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8005952:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005954:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8005958:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800595a:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800595c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005960:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005964:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005968:	2b40      	cmp	r3, #64	@ 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 800596a:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800596c:	f47f af21 	bne.w	80057b2 <HAL_I2C_EV_IRQHandler+0x63e>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005970:	f7ff fa6e 	bl	8004e50 <HAL_I2C_MemTxCpltCallback>
 8005974:	e42c      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005976:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005978:	2802      	cmp	r0, #2
 800597a:	f43f af6a 	beq.w	8005852 <HAL_I2C_EV_IRQHandler+0x6de>
 800597e:	2a01      	cmp	r2, #1
 8005980:	f63f af67 	bhi.w	8005852 <HAL_I2C_EV_IRQHandler+0x6de>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005984:	4a4a      	ldr	r2, [pc, #296]	@ (8005ab0 <HAL_I2C_EV_IRQHandler+0x93c>)
  __IO uint32_t count = 0U;
 8005986:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 800598e:	fbb2 f2f0 	udiv	r2, r2, r0
 8005992:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005996:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005998:	e004      	b.n	80059a4 <HAL_I2C_EV_IRQHandler+0x830>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 80059a0:	f000 809a 	beq.w	8005ad8 <HAL_I2C_EV_IRQHandler+0x964>
    count--;
 80059a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80059a6:	3a01      	subs	r2, #1
 80059a8:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 80059aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d1f4      	bne.n	800599a <HAL_I2C_EV_IRQHandler+0x826>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b4:	f042 0220 	orr.w	r2, r2, #32
 80059b8:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 80059c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 80059c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80059ca:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80059cc:	3201      	adds	r2, #1
        hi2c->XferCount--;
 80059ce:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	2020      	movs	r0, #32
        hi2c->XferCount--;
 80059d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 80059d4:	6262      	str	r2, [r4, #36]	@ 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 80059da:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059dc:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80059e0:	f7fb ff26 	bl	8001830 <HAL_I2C_ErrorCallback>
 80059e4:	f7ff bbf4 	b.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059e8:	2d08      	cmp	r5, #8
 80059ea:	d0ac      	beq.n	8005946 <HAL_I2C_EV_IRQHandler+0x7d2>
 80059ec:	2d20      	cmp	r5, #32
 80059ee:	d0aa      	beq.n	8005946 <HAL_I2C_EV_IRQHandler+0x7d2>
 80059f0:	f515 3f80 	cmn.w	r5, #65536	@ 0x10000
 80059f4:	d0a7      	beq.n	8005946 <HAL_I2C_EV_IRQHandler+0x7d2>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059fc:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80059fe:	2011      	movs	r0, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	2100      	movs	r1, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	2320      	movs	r3, #32
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a04:	6320      	str	r0, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a06:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a0a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a10:	f7fb fed4 	bl	80017bc <HAL_I2C_MasterTxCpltCallback>
 8005a14:	f7ff bbdc 	b.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a18:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1a:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a20:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a22:	9107      	str	r1, [sp, #28]
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	9207      	str	r2, [sp, #28]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	9207      	str	r2, [sp, #28]
 8005a2c:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e632      	b.n	800569e <HAL_I2C_EV_IRQHandler+0x52a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a3e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	0515      	lsls	r5, r2, #20
 8005a44:	f57f af67 	bpl.w	8005916 <HAL_I2C_EV_IRQHandler+0x7a2>
 8005a48:	2807      	cmp	r0, #7
 8005a4a:	d807      	bhi.n	8005a5c <HAL_I2C_EV_IRQHandler+0x8e8>
 8005a4c:	2801      	cmp	r0, #1
 8005a4e:	f47f af62 	bne.w	8005916 <HAL_I2C_EV_IRQHandler+0x7a2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a58:	605a      	str	r2, [r3, #4]
 8005a5a:	e75c      	b.n	8005916 <HAL_I2C_EV_IRQHandler+0x7a2>
 8005a5c:	4a13      	ldr	r2, [pc, #76]	@ (8005aac <HAL_I2C_EV_IRQHandler+0x938>)
 8005a5e:	3808      	subs	r0, #8
 8005a60:	40c2      	lsrs	r2, r0
 8005a62:	07d1      	lsls	r1, r2, #31
 8005a64:	f57f af57 	bpl.w	8005916 <HAL_I2C_EV_IRQHandler+0x7a2>
 8005a68:	e7f3      	b.n	8005a52 <HAL_I2C_EV_IRQHandler+0x8de>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a70:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8005a78:	d01c      	beq.n	8005ab4 <HAL_I2C_EV_IRQHandler+0x940>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7a:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7c:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a82:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a84:	9104      	str	r1, [sp, #16]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	9204      	str	r2, [sp, #16]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	9b04      	ldr	r3, [sp, #16]
 8005a90:	e605      	b.n	800569e <HAL_I2C_EV_IRQHandler+0x52a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a98:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a9a:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a9c:	f7fb feca 	bl	8001834 <HAL_I2C_MemRxCpltCallback>
 8005aa0:	f7ff bb96 	b.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>
 8005aa4:	fffeffeb 	.word	0xfffeffeb
 8005aa8:	00010014 	.word	0x00010014
 8005aac:	01000101 	.word	0x01000101
 8005ab0:	20000004 	.word	0x20000004
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab4:	9205      	str	r2, [sp, #20]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	9205      	str	r2, [sp, #20]
 8005aba:	699a      	ldr	r2, [r3, #24]
 8005abc:	9205      	str	r2, [sp, #20]
 8005abe:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e5e9      	b.n	800569e <HAL_I2C_EV_IRQHandler+0x52a>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005aca:	2801      	cmp	r0, #1
 8005acc:	d1a4      	bne.n	8005a18 <HAL_I2C_EV_IRQHandler+0x8a4>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e6b4      	b.n	8005842 <HAL_I2C_EV_IRQHandler+0x6ce>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad8:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ada:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005adc:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8005ae0:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ae2:	6859      	ldr	r1, [r3, #4]
 8005ae4:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8005ae8:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8005aee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005af0:	3b01      	subs	r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8005af2:	2120      	movs	r1, #32
        hi2c->XferCount--;
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005af8:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->pBuffPtr++;
 8005afc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005afe:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
        hi2c->pBuffPtr++;
 8005b02:	3301      	adds	r3, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b04:	2940      	cmp	r1, #64	@ 0x40
        hi2c->pBuffPtr++;
 8005b06:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b08:	f47f aeda 	bne.w	80058c0 <HAL_I2C_EV_IRQHandler+0x74c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b10:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b12:	6322      	str	r2, [r4, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b14:	f7fb fe8e 	bl	8001834 <HAL_I2C_MemRxCpltCallback>
 8005b18:	f7ff bb5a 	b.w	80051d0 <HAL_I2C_EV_IRQHandler+0x5c>

08005b1c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	f000 81d8 	beq.w	8005ed2 <HAL_RCC_OscConfig+0x3b6>
{
 8005b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b26:	6803      	ldr	r3, [r0, #0]
 8005b28:	07dd      	lsls	r5, r3, #31
{
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b2e:	d52f      	bpl.n	8005b90 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b30:	499d      	ldr	r1, [pc, #628]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005b32:	688a      	ldr	r2, [r1, #8]
 8005b34:	f002 020c 	and.w	r2, r2, #12
 8005b38:	2a04      	cmp	r2, #4
 8005b3a:	f000 80ec 	beq.w	8005d16 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b3e:	688a      	ldr	r2, [r1, #8]
 8005b40:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b44:	2a08      	cmp	r2, #8
 8005b46:	f000 80e2 	beq.w	8005d0e <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4a:	6863      	ldr	r3, [r4, #4]
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b50:	f000 80eb 	beq.w	8005d2a <HAL_RCC_OscConfig+0x20e>
 8005b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b58:	f000 8173 	beq.w	8005e42 <HAL_RCC_OscConfig+0x326>
 8005b5c:	4d92      	ldr	r5, [pc, #584]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005b5e:	682a      	ldr	r2, [r5, #0]
 8005b60:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b64:	602a      	str	r2, [r5, #0]
 8005b66:	682a      	ldr	r2, [r5, #0]
 8005b68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b6c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 80e0 	bne.w	8005d34 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fd fb24 	bl	80031c0 <HAL_GetTick>
 8005b78:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7a:	e005      	b.n	8005b88 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b7c:	f7fd fb20 	bl	80031c0 <HAL_GetTick>
 8005b80:	1b80      	subs	r0, r0, r6
 8005b82:	2864      	cmp	r0, #100	@ 0x64
 8005b84:	f200 8100 	bhi.w	8005d88 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	039f      	lsls	r7, r3, #14
 8005b8c:	d4f6      	bmi.n	8005b7c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	079d      	lsls	r5, r3, #30
 8005b92:	d528      	bpl.n	8005be6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b94:	4a84      	ldr	r2, [pc, #528]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005b96:	6891      	ldr	r1, [r2, #8]
 8005b98:	f011 0f0c 	tst.w	r1, #12
 8005b9c:	f000 809b 	beq.w	8005cd6 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ba0:	6891      	ldr	r1, [r2, #8]
 8005ba2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ba6:	2908      	cmp	r1, #8
 8005ba8:	f000 8091 	beq.w	8005cce <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bac:	68e3      	ldr	r3, [r4, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 810c 	beq.w	8005dcc <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb4:	4b7d      	ldr	r3, [pc, #500]	@ (8005dac <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb6:	4e7c      	ldr	r6, [pc, #496]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005bbc:	f7fd fb00 	bl	80031c0 <HAL_GetTick>
 8005bc0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc2:	e005      	b.n	8005bd0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc4:	f7fd fafc 	bl	80031c0 <HAL_GetTick>
 8005bc8:	1b40      	subs	r0, r0, r5
 8005bca:	2802      	cmp	r0, #2
 8005bcc:	f200 80dc 	bhi.w	8005d88 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	079f      	lsls	r7, r3, #30
 8005bd4:	d5f6      	bpl.n	8005bc4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd6:	6833      	ldr	r3, [r6, #0]
 8005bd8:	6922      	ldr	r2, [r4, #16]
 8005bda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005bde:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005be2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	071a      	lsls	r2, r3, #28
 8005be8:	d45c      	bmi.n	8005ca4 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bea:	075d      	lsls	r5, r3, #29
 8005bec:	d53a      	bpl.n	8005c64 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bee:	4a6e      	ldr	r2, [pc, #440]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005bf0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005bf2:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8005bf6:	f040 8088 	bne.w	8005d0a <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c04:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c0e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	4e67      	ldr	r6, [pc, #412]	@ (8005db0 <HAL_RCC_OscConfig+0x294>)
 8005c12:	6833      	ldr	r3, [r6, #0]
 8005c14:	05d8      	lsls	r0, r3, #23
 8005c16:	f140 80a7 	bpl.w	8005d68 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c1a:	68a3      	ldr	r3, [r4, #8]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	f000 80b7 	beq.w	8005d90 <HAL_RCC_OscConfig+0x274>
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	f000 811d 	beq.w	8005e62 <HAL_RCC_OscConfig+0x346>
 8005c28:	4e5f      	ldr	r6, [pc, #380]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005c2a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	6732      	str	r2, [r6, #112]	@ 0x70
 8005c32:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8005c34:	f022 0204 	bic.w	r2, r2, #4
 8005c38:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f040 80ad 	bne.w	8005d9a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c40:	f7fd fabe 	bl	80031c0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c44:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005c48:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c4a:	e005      	b.n	8005c58 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4c:	f7fd fab8 	bl	80031c0 <HAL_GetTick>
 8005c50:	1bc0      	subs	r0, r0, r7
 8005c52:	4540      	cmp	r0, r8
 8005c54:	f200 8098 	bhi.w	8005d88 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c58:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005c5a:	079b      	lsls	r3, r3, #30
 8005c5c:	d4f6      	bmi.n	8005c4c <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	f040 80f9 	bne.w	8005e56 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c64:	69a3      	ldr	r3, [r4, #24]
 8005c66:	b1cb      	cbz	r3, 8005c9c <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c68:	4d4f      	ldr	r5, [pc, #316]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005c6a:	68aa      	ldr	r2, [r5, #8]
 8005c6c:	f002 020c 	and.w	r2, r2, #12
 8005c70:	2a08      	cmp	r2, #8
 8005c72:	f000 80bc 	beq.w	8005dee <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c76:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c78:	4b4c      	ldr	r3, [pc, #304]	@ (8005dac <HAL_RCC_OscConfig+0x290>)
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c80:	f000 80f9 	beq.w	8005e76 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c84:	f7fd fa9c 	bl	80031c0 <HAL_GetTick>
 8005c88:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8a:	e004      	b.n	8005c96 <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8c:	f7fd fa98 	bl	80031c0 <HAL_GetTick>
 8005c90:	1b00      	subs	r0, r0, r4
 8005c92:	2802      	cmp	r0, #2
 8005c94:	d878      	bhi.n	8005d88 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c96:	682b      	ldr	r3, [r5, #0]
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	d4f7      	bmi.n	8005c8c <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005c9c:	2000      	movs	r0, #0
}
 8005c9e:	b002      	add	sp, #8
 8005ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ca4:	6963      	ldr	r3, [r4, #20]
 8005ca6:	b1fb      	cbz	r3, 8005ce8 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8005ca8:	4b40      	ldr	r3, [pc, #256]	@ (8005dac <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005caa:	4e3f      	ldr	r6, [pc, #252]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8005cac:	2201      	movs	r2, #1
 8005cae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005cb2:	f7fd fa85 	bl	80031c0 <HAL_GetTick>
 8005cb6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb8:	e004      	b.n	8005cc4 <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cba:	f7fd fa81 	bl	80031c0 <HAL_GetTick>
 8005cbe:	1b40      	subs	r0, r0, r5
 8005cc0:	2802      	cmp	r0, #2
 8005cc2:	d861      	bhi.n	8005d88 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc4:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005cc6:	079b      	lsls	r3, r3, #30
 8005cc8:	d5f7      	bpl.n	8005cba <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	e78d      	b.n	8005bea <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cce:	6852      	ldr	r2, [r2, #4]
 8005cd0:	0251      	lsls	r1, r2, #9
 8005cd2:	f53f af6b 	bmi.w	8005bac <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd6:	4a34      	ldr	r2, [pc, #208]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	0792      	lsls	r2, r2, #30
 8005cdc:	d538      	bpl.n	8005d50 <HAL_RCC_OscConfig+0x234>
 8005cde:	68e2      	ldr	r2, [r4, #12]
 8005ce0:	2a01      	cmp	r2, #1
 8005ce2:	d035      	beq.n	8005d50 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	e7da      	b.n	8005c9e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8005ce8:	4a30      	ldr	r2, [pc, #192]	@ (8005dac <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cea:	4e2f      	ldr	r6, [pc, #188]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8005cec:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005cf0:	f7fd fa66 	bl	80031c0 <HAL_GetTick>
 8005cf4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf6:	e004      	b.n	8005d02 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf8:	f7fd fa62 	bl	80031c0 <HAL_GetTick>
 8005cfc:	1b40      	subs	r0, r0, r5
 8005cfe:	2802      	cmp	r0, #2
 8005d00:	d842      	bhi.n	8005d88 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d02:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005d04:	079f      	lsls	r7, r3, #30
 8005d06:	d4f7      	bmi.n	8005cf8 <HAL_RCC_OscConfig+0x1dc>
 8005d08:	e7df      	b.n	8005cca <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8005d0a:	2500      	movs	r5, #0
 8005d0c:	e780      	b.n	8005c10 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d0e:	684a      	ldr	r2, [r1, #4]
 8005d10:	0251      	lsls	r1, r2, #9
 8005d12:	f57f af1a 	bpl.w	8005b4a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d16:	4a24      	ldr	r2, [pc, #144]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	0392      	lsls	r2, r2, #14
 8005d1c:	f57f af38 	bpl.w	8005b90 <HAL_RCC_OscConfig+0x74>
 8005d20:	6862      	ldr	r2, [r4, #4]
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	f47f af34 	bne.w	8005b90 <HAL_RCC_OscConfig+0x74>
 8005d28:	e7dc      	b.n	8005ce4 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005d2c:	6813      	ldr	r3, [r2, #0]
 8005d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005d34:	f7fd fa44 	bl	80031c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d38:	4e1b      	ldr	r6, [pc, #108]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8005d3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3c:	e004      	b.n	8005d48 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d3e:	f7fd fa3f 	bl	80031c0 <HAL_GetTick>
 8005d42:	1b40      	subs	r0, r0, r5
 8005d44:	2864      	cmp	r0, #100	@ 0x64
 8005d46:	d81f      	bhi.n	8005d88 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d48:	6833      	ldr	r3, [r6, #0]
 8005d4a:	039b      	lsls	r3, r3, #14
 8005d4c:	d5f7      	bpl.n	8005d3e <HAL_RCC_OscConfig+0x222>
 8005d4e:	e71e      	b.n	8005b8e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d50:	4915      	ldr	r1, [pc, #84]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005d52:	6920      	ldr	r0, [r4, #16]
 8005d54:	680a      	ldr	r2, [r1, #0]
 8005d56:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8005d5a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005d5e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d60:	071a      	lsls	r2, r3, #28
 8005d62:	f57f af42 	bpl.w	8005bea <HAL_RCC_OscConfig+0xce>
 8005d66:	e79d      	b.n	8005ca4 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d68:	6833      	ldr	r3, [r6, #0]
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005d70:	f7fd fa26 	bl	80031c0 <HAL_GetTick>
 8005d74:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d76:	6833      	ldr	r3, [r6, #0]
 8005d78:	05d9      	lsls	r1, r3, #23
 8005d7a:	f53f af4e 	bmi.w	8005c1a <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7e:	f7fd fa1f 	bl	80031c0 <HAL_GetTick>
 8005d82:	1bc0      	subs	r0, r0, r7
 8005d84:	2802      	cmp	r0, #2
 8005d86:	d9f6      	bls.n	8005d76 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8005d88:	2003      	movs	r0, #3
}
 8005d8a:	b002      	add	sp, #8
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d90:	4a05      	ldr	r2, [pc, #20]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
 8005d92:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005d9a:	f7fd fa11 	bl	80031c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d9e:	4f02      	ldr	r7, [pc, #8]	@ (8005da8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8005da0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005da2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_OscConfig+0x2a2>
 8005da8:	40023800 	.word	0x40023800
 8005dac:	42470000 	.word	0x42470000
 8005db0:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db4:	f7fd fa04 	bl	80031c0 <HAL_GetTick>
 8005db8:	1b80      	subs	r0, r0, r6
 8005dba:	4540      	cmp	r0, r8
 8005dbc:	d8e4      	bhi.n	8005d88 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dc0:	079a      	lsls	r2, r3, #30
 8005dc2:	d5f7      	bpl.n	8005db4 <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	f43f af4d 	beq.w	8005c64 <HAL_RCC_OscConfig+0x148>
 8005dca:	e044      	b.n	8005e56 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8005dcc:	4a42      	ldr	r2, [pc, #264]	@ (8005ed8 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dce:	4e43      	ldr	r6, [pc, #268]	@ (8005edc <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8005dd0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005dd2:	f7fd f9f5 	bl	80031c0 <HAL_GetTick>
 8005dd6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dd8:	e004      	b.n	8005de4 <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dda:	f7fd f9f1 	bl	80031c0 <HAL_GetTick>
 8005dde:	1b40      	subs	r0, r0, r5
 8005de0:	2802      	cmp	r0, #2
 8005de2:	d8d1      	bhi.n	8005d88 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de4:	6833      	ldr	r3, [r6, #0]
 8005de6:	0799      	lsls	r1, r3, #30
 8005de8:	d4f7      	bmi.n	8005dda <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	e6fb      	b.n	8005be6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	f43f af78 	beq.w	8005ce4 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8005df4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfc:	4291      	cmp	r1, r2
 8005dfe:	f47f af71 	bne.w	8005ce4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e04:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e08:	4291      	cmp	r1, r2
 8005e0a:	f47f af6b 	bne.w	8005ce4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e0e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005e10:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005e14:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e16:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005e1a:	f47f af63 	bne.w	8005ce4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e1e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005e20:	0852      	lsrs	r2, r2, #1
 8005e22:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005e26:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e28:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005e2c:	f47f af5a 	bne.w	8005ce4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e30:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005e32:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e36:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005e3a:	bf14      	ite	ne
 8005e3c:	2001      	movne	r0, #1
 8005e3e:	2000      	moveq	r0, #0
 8005e40:	e72d      	b.n	8005c9e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e42:	4b26      	ldr	r3, [pc, #152]	@ (8005edc <HAL_RCC_OscConfig+0x3c0>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005e52:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e54:	e76e      	b.n	8005d34 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e56:	4a21      	ldr	r2, [pc, #132]	@ (8005edc <HAL_RCC_OscConfig+0x3c0>)
 8005e58:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e60:	e700      	b.n	8005c64 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e62:	4b1e      	ldr	r3, [pc, #120]	@ (8005edc <HAL_RCC_OscConfig+0x3c0>)
 8005e64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e66:	f042 0204 	orr.w	r2, r2, #4
 8005e6a:	671a      	str	r2, [r3, #112]	@ 0x70
 8005e6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e74:	e791      	b.n	8005d9a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8005e76:	f7fd f9a3 	bl	80031c0 <HAL_GetTick>
 8005e7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7c:	e005      	b.n	8005e8a <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e7e:	f7fd f99f 	bl	80031c0 <HAL_GetTick>
 8005e82:	1b80      	subs	r0, r0, r6
 8005e84:	2802      	cmp	r0, #2
 8005e86:	f63f af7f 	bhi.w	8005d88 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	682b      	ldr	r3, [r5, #0]
 8005e8c:	0199      	lsls	r1, r3, #6
 8005e8e:	d4f6      	bmi.n	8005e7e <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e90:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005e94:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005e96:	430b      	orrs	r3, r1
 8005e98:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005e9c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8005ea0:	0852      	lsrs	r2, r2, #1
 8005ea2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005ea6:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005ea8:	490b      	ldr	r1, [pc, #44]	@ (8005ed8 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005eae:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eb0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005eb2:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005eb4:	f7fd f984 	bl	80031c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb8:	4d08      	ldr	r5, [pc, #32]	@ (8005edc <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8005eba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ebc:	e005      	b.n	8005eca <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ebe:	f7fd f97f 	bl	80031c0 <HAL_GetTick>
 8005ec2:	1b00      	subs	r0, r0, r4
 8005ec4:	2802      	cmp	r0, #2
 8005ec6:	f63f af5f 	bhi.w	8005d88 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eca:	682b      	ldr	r3, [r5, #0]
 8005ecc:	019a      	lsls	r2, r3, #6
 8005ece:	d5f6      	bpl.n	8005ebe <HAL_RCC_OscConfig+0x3a2>
 8005ed0:	e6e4      	b.n	8005c9c <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8005ed2:	2001      	movs	r0, #1
}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	42470000 	.word	0x42470000
 8005edc:	40023800 	.word	0x40023800

08005ee0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005ee0:	4b01      	ldr	r3, [pc, #4]	@ (8005ee8 <HAL_RCC_EnableCSS+0x8>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005ee6:	4770      	bx	lr
 8005ee8:	42470000 	.word	0x42470000

08005eec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eec:	4916      	ldr	r1, [pc, #88]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8005eee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ef0:	688b      	ldr	r3, [r1, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d01b      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x46>
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d117      	bne.n	8005f2e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005efe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f00:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f02:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f04:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f08:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f0c:	d113      	bne.n	8005f36 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f0e:	480f      	ldr	r0, [pc, #60]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x60>)
 8005f10:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005f14:	fba1 0100 	umull	r0, r1, r1, r0
 8005f18:	f7fa fe48 	bl	8000bac <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x5c>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005f24:	3301      	adds	r3, #1
 8005f26:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005f28:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005f2c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8005f2e:	4807      	ldr	r0, [pc, #28]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8005f30:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f32:	4807      	ldr	r0, [pc, #28]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8005f34:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f36:	4806      	ldr	r0, [pc, #24]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x64>)
 8005f38:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	fba1 0100 	umull	r0, r1, r1, r0
 8005f42:	f7fa fe33 	bl	8000bac <__aeabi_uldivmod>
 8005f46:	e7e9      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x30>
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	00f42400 	.word	0x00f42400
 8005f50:	007a1200 	.word	0x007a1200

08005f54 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f000 8087 	beq.w	8006068 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f5a:	4a48      	ldr	r2, [pc, #288]	@ (800607c <HAL_RCC_ClockConfig+0x128>)
 8005f5c:	6813      	ldr	r3, [r2, #0]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	428b      	cmp	r3, r1
{
 8005f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f68:	460d      	mov	r5, r1
 8005f6a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f6c:	d209      	bcs.n	8005f82 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6e:	b2cb      	uxtb	r3, r1
 8005f70:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	d002      	beq.n	8005f82 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005f7c:	2001      	movs	r0, #1
}
 8005f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	0798      	lsls	r0, r3, #30
 8005f86:	d514      	bpl.n	8005fb2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f88:	0759      	lsls	r1, r3, #29
 8005f8a:	d504      	bpl.n	8005f96 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f8c:	493c      	ldr	r1, [pc, #240]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 8005f8e:	688a      	ldr	r2, [r1, #8]
 8005f90:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8005f94:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f96:	071a      	lsls	r2, r3, #28
 8005f98:	d504      	bpl.n	8005fa4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f9a:	4939      	ldr	r1, [pc, #228]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 8005f9c:	688a      	ldr	r2, [r1, #8]
 8005f9e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8005fa2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa4:	4936      	ldr	r1, [pc, #216]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 8005fa6:	68a0      	ldr	r0, [r4, #8]
 8005fa8:	688a      	ldr	r2, [r1, #8]
 8005faa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005fae:	4302      	orrs	r2, r0
 8005fb0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fb2:	07df      	lsls	r7, r3, #31
 8005fb4:	d521      	bpl.n	8005ffa <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb6:	6862      	ldr	r2, [r4, #4]
 8005fb8:	2a01      	cmp	r2, #1
 8005fba:	d057      	beq.n	800606c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fbc:	1e93      	subs	r3, r2, #2
 8005fbe:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fc4:	d94d      	bls.n	8006062 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc6:	0799      	lsls	r1, r3, #30
 8005fc8:	d5d8      	bpl.n	8005f7c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fca:	4e2d      	ldr	r6, [pc, #180]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 8005fcc:	68b3      	ldr	r3, [r6, #8]
 8005fce:	f023 0303 	bic.w	r3, r3, #3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005fd6:	f7fd f8f3 	bl	80031c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fda:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005fde:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe0:	e004      	b.n	8005fec <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe2:	f7fd f8ed 	bl	80031c0 <HAL_GetTick>
 8005fe6:	1bc0      	subs	r0, r0, r7
 8005fe8:	4540      	cmp	r0, r8
 8005fea:	d844      	bhi.n	8006076 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fec:	68b3      	ldr	r3, [r6, #8]
 8005fee:	6862      	ldr	r2, [r4, #4]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005ff8:	d1f3      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ffa:	4a20      	ldr	r2, [pc, #128]	@ (800607c <HAL_RCC_ClockConfig+0x128>)
 8005ffc:	6813      	ldr	r3, [r2, #0]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	42ab      	cmp	r3, r5
 8006004:	d906      	bls.n	8006014 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006006:	b2eb      	uxtb	r3, r5
 8006008:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	42ab      	cmp	r3, r5
 8006012:	d1b3      	bne.n	8005f7c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	075a      	lsls	r2, r3, #29
 8006018:	d506      	bpl.n	8006028 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800601a:	4919      	ldr	r1, [pc, #100]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 800601c:	68e0      	ldr	r0, [r4, #12]
 800601e:	688a      	ldr	r2, [r1, #8]
 8006020:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8006024:	4302      	orrs	r2, r0
 8006026:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006028:	071b      	lsls	r3, r3, #28
 800602a:	d507      	bpl.n	800603c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602c:	4a14      	ldr	r2, [pc, #80]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 800602e:	6921      	ldr	r1, [r4, #16]
 8006030:	6893      	ldr	r3, [r2, #8]
 8006032:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006036:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800603a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800603c:	f7ff ff56 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8006040:	4a0f      	ldr	r2, [pc, #60]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 8006042:	4c10      	ldr	r4, [pc, #64]	@ (8006084 <HAL_RCC_ClockConfig+0x130>)
 8006044:	6892      	ldr	r2, [r2, #8]
 8006046:	4910      	ldr	r1, [pc, #64]	@ (8006088 <HAL_RCC_ClockConfig+0x134>)
 8006048:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800604c:	4603      	mov	r3, r0
 800604e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8006050:	480e      	ldr	r0, [pc, #56]	@ (800608c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006052:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8006054:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006056:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8006058:	f7fd f868 	bl	800312c <HAL_InitTick>
  return HAL_OK;
 800605c:	2000      	movs	r0, #0
}
 800605e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006062:	0198      	lsls	r0, r3, #6
 8006064:	d4b1      	bmi.n	8005fca <HAL_RCC_ClockConfig+0x76>
 8006066:	e789      	b.n	8005f7c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006068:	2001      	movs	r0, #1
}
 800606a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606c:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <HAL_RCC_ClockConfig+0x12c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	039e      	lsls	r6, r3, #14
 8006072:	d4aa      	bmi.n	8005fca <HAL_RCC_ClockConfig+0x76>
 8006074:	e782      	b.n	8005f7c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8006076:	2003      	movs	r0, #3
 8006078:	e781      	b.n	8005f7e <HAL_RCC_ClockConfig+0x2a>
 800607a:	bf00      	nop
 800607c:	40023c00 	.word	0x40023c00
 8006080:	40023800 	.word	0x40023800
 8006084:	0800bfc0 	.word	0x0800bfc0
 8006088:	20000004 	.word	0x20000004
 800608c:	2000000c 	.word	0x2000000c

08006090 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006090:	4b04      	ldr	r3, [pc, #16]	@ (80060a4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8006092:	4905      	ldr	r1, [pc, #20]	@ (80060a8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	4a05      	ldr	r2, [pc, #20]	@ (80060ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006098:	6808      	ldr	r0, [r1, #0]
 800609a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800609e:	5cd3      	ldrb	r3, [r2, r3]
}
 80060a0:	40d8      	lsrs	r0, r3
 80060a2:	4770      	bx	lr
 80060a4:	40023800 	.word	0x40023800
 80060a8:	20000004 	.word	0x20000004
 80060ac:	0800bfb8 	.word	0x0800bfb8

080060b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060b0:	4b04      	ldr	r3, [pc, #16]	@ (80060c4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80060b2:	4905      	ldr	r1, [pc, #20]	@ (80060c8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	4a05      	ldr	r2, [pc, #20]	@ (80060cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80060b8:	6808      	ldr	r0, [r1, #0]
 80060ba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80060be:	5cd3      	ldrb	r3, [r2, r3]
}
 80060c0:	40d8      	lsrs	r0, r3
 80060c2:	4770      	bx	lr
 80060c4:	40023800 	.word	0x40023800
 80060c8:	20000004 	.word	0x20000004
 80060cc:	0800bfb8 	.word	0x0800bfb8

080060d0 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop

080060d4 <HAL_RCC_NMI_IRQHandler>:
{
 80060d4:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80060d6:	4c05      	ldr	r4, [pc, #20]	@ (80060ec <HAL_RCC_NMI_IRQHandler+0x18>)
 80060d8:	68e3      	ldr	r3, [r4, #12]
 80060da:	061b      	lsls	r3, r3, #24
 80060dc:	d400      	bmi.n	80060e0 <HAL_RCC_NMI_IRQHandler+0xc>
}
 80060de:	bd10      	pop	{r4, pc}
    HAL_RCC_CSSCallback();
 80060e0:	f7ff fff6 	bl	80060d0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80060e4:	2380      	movs	r3, #128	@ 0x80
 80060e6:	73a3      	strb	r3, [r4, #14]
}
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	bf00      	nop
 80060ec:	40023800 	.word	0x40023800

080060f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060f2:	6803      	ldr	r3, [r0, #0]
 80060f4:	f013 0f05 	tst.w	r3, #5
{
 80060f8:	b083      	sub	sp, #12
 80060fa:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060fc:	d104      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060fe:	0798      	lsls	r0, r3, #30
 8006100:	d43b      	bmi.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006102:	2000      	movs	r0, #0
}
 8006104:	b003      	add	sp, #12
 8006106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8006108:	4b45      	ldr	r3, [pc, #276]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800610a:	4e46      	ldr	r6, [pc, #280]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_DISABLE();
 800610c:	2200      	movs	r2, #0
 800610e:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8006110:	f7fd f856 	bl	80031c0 <HAL_GetTick>
 8006114:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006116:	e004      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x32>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006118:	f7fd f852 	bl	80031c0 <HAL_GetTick>
 800611c:	1b43      	subs	r3, r0, r5
 800611e:	2b02      	cmp	r3, #2
 8006120:	d828      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006122:	6833      	ldr	r3, [r6, #0]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	d4f7      	bmi.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006128:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 800612c:	071b      	lsls	r3, r3, #28
 800612e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8006132:	4a3b      	ldr	r2, [pc, #236]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006134:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006138:	2301      	movs	r3, #1
 800613a:	6693      	str	r3, [r2, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800613c:	f7fd f840 	bl	80031c0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006140:	4e38      	ldr	r6, [pc, #224]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    tickstart = HAL_GetTick();
 8006142:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006144:	e004      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006146:	f7fd f83b 	bl	80031c0 <HAL_GetTick>
 800614a:	1b43      	subs	r3, r0, r5
 800614c:	2b02      	cmp	r3, #2
 800614e:	d811      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	011f      	lsls	r7, r3, #4
 8006154:	d5f7      	bpl.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x56>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	e7d1      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 800615a:	f7fd f831 	bl	80031c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8006162:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006164:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006166:	079b      	lsls	r3, r3, #30
 8006168:	d43c      	bmi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616a:	f7fd f829 	bl	80031c0 <HAL_GetTick>
 800616e:	1b80      	subs	r0, r0, r6
 8006170:	42b8      	cmp	r0, r7
 8006172:	d9f7      	bls.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x74>
        return HAL_TIMEOUT;
 8006174:	2003      	movs	r0, #3
}
 8006176:	b003      	add	sp, #12
 8006178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800617a:	4b2a      	ldr	r3, [pc, #168]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    PWR->CR |= PWR_CR_DBP;
 800617c:	4d2a      	ldr	r5, [pc, #168]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800617e:	2200      	movs	r2, #0
 8006180:	9201      	str	r2, [sp, #4]
 8006182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006184:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006188:	641a      	str	r2, [r3, #64]	@ 0x40
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800619a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800619c:	f7fd f810 	bl	80031c0 <HAL_GetTick>
 80061a0:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061a2:	e004      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061a4:	f7fd f80c 	bl	80031c0 <HAL_GetTick>
 80061a8:	1b83      	subs	r3, r0, r6
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d8e2      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	05d9      	lsls	r1, r3, #23
 80061b2:	d5f7      	bpl.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061b4:	4d1b      	ldr	r5, [pc, #108]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061b6:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061b8:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061ba:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 80061be:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 80061c2:	d012      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80061c4:	428a      	cmp	r2, r1
 80061c6:	d010      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061c8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ca:	4a15      	ldr	r2, [pc, #84]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061cc:	2101      	movs	r1, #1
 80061ce:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d6:	2100      	movs	r1, #0
 80061d8:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 80061dc:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061de:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80061e0:	07da      	lsls	r2, r3, #31
 80061e2:	d4ba      	bmi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061e4:	68e3      	ldr	r3, [r4, #12]
 80061e6:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 80061ea:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 80061ee:	d00b      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80061f0:	490c      	ldr	r1, [pc, #48]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061f2:	688a      	ldr	r2, [r1, #8]
 80061f4:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80061f8:	608a      	str	r2, [r1, #8]
 80061fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061fc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80061fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006202:	430b      	orrs	r3, r1
 8006204:	6713      	str	r3, [r2, #112]	@ 0x70
 8006206:	e77c      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x12>
 8006208:	4806      	ldr	r0, [pc, #24]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800620a:	6882      	ldr	r2, [r0, #8]
 800620c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8006210:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8006214:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006218:	430a      	orrs	r2, r1
 800621a:	6082      	str	r2, [r0, #8]
 800621c:	e7ed      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800621e:	bf00      	nop
 8006220:	42470000 	.word	0x42470000
 8006224:	40023800 	.word	0x40023800
 8006228:	40007000 	.word	0x40007000

0800622c <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800622c:	6803      	ldr	r3, [r0, #0]
{
 800622e:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006230:	6a9c      	ldr	r4, [r3, #40]	@ 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006232:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006234:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006236:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800623a:	e9c1 4001 	strd	r4, r0, [r1, #4]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800623e:	f3c3 4405 	ubfx	r4, r3, #16, #6
 8006242:	2000      	movs	r0, #0
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006244:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006248:	f364 0007 	bfi	r0, r4, #0, #8
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800624c:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006250:	f36e 200f 	bfi	r0, lr, #8, #8
 8006254:	f3c3 4506 	ubfx	r5, r3, #16, #7
 8006258:	f36c 4017 	bfi	r0, ip, #16, #8
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800625c:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006260:	f363 601f 	bfi	r0, r3, #24, #8
 8006264:	6008      	str	r0, [r1, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006266:	b9da      	cbnz	r2, 80062a0 <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint8_t tmp = 0U;
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006268:	ea4f 131e 	mov.w	r3, lr, lsr #4
 800626c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 8006270:	f00e 0e0f 	and.w	lr, lr, #15
 8006274:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006278:	0924      	lsrs	r4, r4, #4
 800627a:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800627e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 8006282:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006286:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 800628a:	f00c 0c0f 	and.w	ip, ip, #15
 800628e:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 8006292:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006296:	700d      	strb	r5, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006298:	f881 e001 	strb.w	lr, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800629c:	f881 c002 	strb.w	ip, [r1, #2]
}
 80062a0:	2000      	movs	r0, #0
 80062a2:	bd30      	pop	{r4, r5, pc}

080062a4 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80062a4:	6803      	ldr	r3, [r0, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
{
 80062a8:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80062aa:	2000      	movs	r0, #0
 80062ac:	f3c3 3e42 	ubfx	lr, r3, #13, #3
 80062b0:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80062b4:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80062b8:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80062bc:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80062c0:	f36e 200f 	bfi	r0, lr, #8, #8
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80062c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80062c8:	f363 4017 	bfi	r0, r3, #16, #8
 80062cc:	f36c 601f 	bfi	r0, ip, #24, #8
 80062d0:	6008      	str	r0, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 80062d2:	b9d2      	cbnz	r2, 800630a <HAL_RTC_GetDate+0x66>
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80062d4:	091a      	lsrs	r2, r3, #4
 80062d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80062e2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80062e6:	708b      	strb	r3, [r1, #2]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80062e8:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80062ec:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 80062f0:	f004 040f 	and.w	r4, r4, #15
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80062f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 80062f8:	f00c 0c0f 	and.w	ip, ip, #15
 80062fc:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 8006300:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006304:	704c      	strb	r4, [r1, #1]
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006306:	f881 c003 	strb.w	ip, [r1, #3]
}
 800630a:	2000      	movs	r0, #0
 800630c:	bd10      	pop	{r4, pc}
 800630e:	bf00      	nop

08006310 <RTC_EnterInitMode>:
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006310:	6803      	ldr	r3, [r0, #0]
{
 8006312:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006314:	68dc      	ldr	r4, [r3, #12]
 8006316:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800631a:	d002      	beq.n	8006322 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800631c:	2400      	movs	r4, #0
}
 800631e:	4620      	mov	r0, r4
 8006320:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006328:	60da      	str	r2, [r3, #12]
 800632a:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 800632c:	f7fc ff48 	bl	80031c0 <HAL_GetTick>
 8006330:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	065b      	lsls	r3, r3, #25
 8006338:	d4f1      	bmi.n	800631e <RTC_EnterInitMode+0xe>
 800633a:	2c00      	cmp	r4, #0
 800633c:	d1ef      	bne.n	800631e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800633e:	f7fc ff3f 	bl	80031c0 <HAL_GetTick>
 8006342:	1b83      	subs	r3, r0, r6
 8006344:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006348:	d9f3      	bls.n	8006332 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800634a:	2304      	movs	r3, #4
 800634c:	776b      	strb	r3, [r5, #29]
        status = HAL_ERROR;
 800634e:	2401      	movs	r4, #1
 8006350:	e7ef      	b.n	8006332 <RTC_EnterInitMode+0x22>
 8006352:	bf00      	nop

08006354 <RTC_ExitInitMode>:
{
 8006354:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006356:	6803      	ldr	r3, [r0, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800635e:	60da      	str	r2, [r3, #12]
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	0692      	lsls	r2, r2, #26
 8006364:	d501      	bpl.n	800636a <RTC_ExitInitMode+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 8006366:	2000      	movs	r0, #0
}
 8006368:	bd38      	pop	{r3, r4, r5, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8006374:	f7fc ff24 	bl	80031c0 <HAL_GetTick>
 8006378:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	069b      	lsls	r3, r3, #26
 8006380:	d4f1      	bmi.n	8006366 <RTC_ExitInitMode+0x12>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006382:	f7fc ff1d 	bl	80031c0 <HAL_GetTick>
 8006386:	1b43      	subs	r3, r0, r5
 8006388:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800638c:	d9f5      	bls.n	800637a <RTC_ExitInitMode+0x26>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800638e:	2304      	movs	r3, #4
 8006390:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8006392:	2001      	movs	r0, #1
}
 8006394:	bd38      	pop	{r3, r4, r5, pc}
 8006396:	bf00      	nop

08006398 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8006398:	2800      	cmp	r0, #0
 800639a:	d040      	beq.n	800641e <HAL_RTC_Init+0x86>
{
 800639c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800639e:	7f43      	ldrb	r3, [r0, #29]
 80063a0:	4604      	mov	r4, r0
 80063a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80063a6:	b173      	cbz	r3, 80063c6 <HAL_RTC_Init+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063a8:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063aa:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063ac:	21ca      	movs	r1, #202	@ 0xca
 80063ae:	2253      	movs	r2, #83	@ 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063b0:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063b2:	6259      	str	r1, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80063b4:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063b6:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80063b8:	f7ff ffaa 	bl	8006310 <RTC_EnterInitMode>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063bc:	6823      	ldr	r3, [r4, #0]
  if (status == HAL_OK)
 80063be:	b130      	cbz	r0, 80063ce <HAL_RTC_Init+0x36>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063c0:	22ff      	movs	r2, #255	@ 0xff
 80063c2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80063c6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80063c8:	f7fc f8a0 	bl	800250c <HAL_RTC_MspInit>
 80063cc:	e7ec      	b.n	80063a8 <HAL_RTC_Init+0x10>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063ce:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063d0:	6862      	ldr	r2, [r4, #4]
 80063d2:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063d4:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80063d8:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80063dc:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063de:	6961      	ldr	r1, [r4, #20]
 80063e0:	6898      	ldr	r0, [r3, #8]
 80063e2:	432a      	orrs	r2, r5
 80063e4:	430a      	orrs	r2, r1
 80063e6:	4302      	orrs	r2, r0
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063e8:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063ea:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063ec:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	68a1      	ldr	r1, [r4, #8]
 80063f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80063f6:	611a      	str	r2, [r3, #16]
    status = RTC_ExitInitMode(hrtc);
 80063f8:	4620      	mov	r0, r4
 80063fa:	f7ff ffab 	bl	8006354 <RTC_ExitInitMode>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80063fe:	6823      	ldr	r3, [r4, #0]
  if (status == HAL_OK)
 8006400:	2800      	cmp	r0, #0
 8006402:	d1dd      	bne.n	80063c0 <HAL_RTC_Init+0x28>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006406:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006408:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800640c:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800640e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006410:	430a      	orrs	r2, r1
    hrtc->State = HAL_RTC_STATE_READY;
 8006412:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006414:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8006416:	7761      	strb	r1, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006418:	22ff      	movs	r2, #255	@ 0xff
 800641a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800641c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800641e:	2001      	movs	r0, #1
}
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop

08006424 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8006424:	7f03      	ldrb	r3, [r0, #28]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d07c      	beq.n	8006524 <HAL_RTC_SetTime+0x100>
{
 800642a:	b570      	push	{r4, r5, r6, lr}
  hrtc->State = HAL_RTC_STATE_BUSY;
 800642c:	2302      	movs	r3, #2
 800642e:	460d      	mov	r5, r1
  __HAL_LOCK(hrtc);
 8006430:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006432:	7743      	strb	r3, [r0, #29]
 8006434:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8006436:	7701      	strb	r1, [r0, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006438:	6800      	ldr	r0, [r0, #0]
 800643a:	6883      	ldr	r3, [r0, #8]
  if (Format == RTC_FORMAT_BIN)
 800643c:	2a00      	cmp	r2, #0
 800643e:	d13b      	bne.n	80064b8 <HAL_RTC_SetTime+0x94>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006440:	f013 0c40 	ands.w	ip, r3, #64	@ 0x40
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006444:	bf18      	it	ne
 8006446:	f895 c003 	ldrbne.w	ip, [r5, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800644a:	782b      	ldrb	r3, [r5, #0]
      sTime->TimeFormat = 0x00U;
 800644c:	bf0c      	ite	eq
 800644e:	f885 c003 	strbeq.w	ip, [r5, #3]
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006452:	ea4f 5c8c 	movne.w	ip, ip, lsl #22
  while (number >= 10U)
 8006456:	2b09      	cmp	r3, #9
 8006458:	d909      	bls.n	800646e <HAL_RTC_SetTime+0x4a>
  uint8_t bcdhigh = 0U;
 800645a:	2200      	movs	r2, #0
    number -= 10U;
 800645c:	3b0a      	subs	r3, #10
 800645e:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8006460:	3201      	adds	r2, #1
  while (number >= 10U)
 8006462:	2b09      	cmp	r3, #9
    bcdhigh++;
 8006464:	b2d2      	uxtb	r2, r2
  while (number >= 10U)
 8006466:	d8f9      	bhi.n	800645c <HAL_RTC_SetTime+0x38>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8006468:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800646c:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800646e:	0419      	lsls	r1, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006470:	786b      	ldrb	r3, [r5, #1]
  while (number >= 10U)
 8006472:	2b09      	cmp	r3, #9
 8006474:	d909      	bls.n	800648a <HAL_RTC_SetTime+0x66>
  uint8_t bcdhigh = 0U;
 8006476:	2200      	movs	r2, #0
    number -= 10U;
 8006478:	3b0a      	subs	r3, #10
 800647a:	b2db      	uxtb	r3, r3
    bcdhigh++;
 800647c:	3201      	adds	r2, #1
  while (number >= 10U)
 800647e:	2b09      	cmp	r3, #9
    bcdhigh++;
 8006480:	b2d2      	uxtb	r2, r2
  while (number >= 10U)
 8006482:	d8f9      	bhi.n	8006478 <HAL_RTC_SetTime+0x54>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8006484:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006488:	b2db      	uxtb	r3, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800648a:	78aa      	ldrb	r2, [r5, #2]
  while (number >= 10U)
 800648c:	2a09      	cmp	r2, #9
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800648e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while (number >= 10U)
 8006492:	d90c      	bls.n	80064ae <HAL_RTC_SetTime+0x8a>
  uint8_t bcdhigh = 0U;
 8006494:	f04f 0e00 	mov.w	lr, #0
    number -= 10U;
 8006498:	3a0a      	subs	r2, #10
 800649a:	b2d2      	uxtb	r2, r2
    bcdhigh++;
 800649c:	f10e 0e01 	add.w	lr, lr, #1
  while (number >= 10U)
 80064a0:	2a09      	cmp	r2, #9
    bcdhigh++;
 80064a2:	fa5f fe8e 	uxtb.w	lr, lr
  while (number >= 10U)
 80064a6:	d8f7      	bhi.n	8006498 <HAL_RTC_SetTime+0x74>
  return ((uint8_t)(bcdhigh << 4U) | number);
 80064a8:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80064ac:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064ae:	ea41 060c 	orr.w	r6, r1, ip
 80064b2:	431e      	orrs	r6, r3
 80064b4:	4316      	orrs	r6, r2
 80064b6:	e00f      	b.n	80064d8 <HAL_RTC_SetTime+0xb4>
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80064b8:	786e      	ldrb	r6, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064ba:	782a      	ldrb	r2, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064bc:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80064c0:	ea4f 2606 	mov.w	r6, r6, lsl #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80064c4:	bf14      	ite	ne
 80064c6:	78eb      	ldrbne	r3, [r5, #3]
      sTime->TimeFormat = 0x00U;
 80064c8:	70eb      	strbeq	r3, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064ca:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 80064ce:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80064d0:	bf18      	it	ne
 80064d2:	059b      	lslne	r3, r3, #22
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80064d4:	4316      	orrs	r6, r2
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064d6:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064d8:	23ca      	movs	r3, #202	@ 0xca
 80064da:	6243      	str	r3, [r0, #36]	@ 0x24
 80064dc:	2353      	movs	r3, #83	@ 0x53
 80064de:	6243      	str	r3, [r0, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff ff15 	bl	8006310 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80064e6:	b128      	cbz	r0, 80064f4 <HAL_RTC_SetTime+0xd0>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	21ff      	movs	r1, #255	@ 0xff
  __HAL_UNLOCK(hrtc);
 80064ec:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ee:	6251      	str	r1, [r2, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80064f0:	7723      	strb	r3, [r4, #28]
}
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80064f4:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80064f6:	6928      	ldr	r0, [r5, #16]
 80064f8:	68ea      	ldr	r2, [r5, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80064fa:	f006 367f 	and.w	r6, r6, #2139062143	@ 0x7f7f7f7f
 80064fe:	f026 46fe 	bic.w	r6, r6, #2130706432	@ 0x7f000000
 8006502:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006504:	6899      	ldr	r1, [r3, #8]
 8006506:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800650a:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800650c:	6899      	ldr	r1, [r3, #8]
 800650e:	4302      	orrs	r2, r0
 8006510:	430a      	orrs	r2, r1
    status = RTC_ExitInitMode(hrtc);
 8006512:	4620      	mov	r0, r4
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006514:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 8006516:	f7ff ff1d 	bl	8006354 <RTC_ExitInitMode>
  if (status == HAL_OK)
 800651a:	2800      	cmp	r0, #0
 800651c:	d1e4      	bne.n	80064e8 <HAL_RTC_SetTime+0xc4>
    hrtc->State = HAL_RTC_STATE_READY;
 800651e:	2301      	movs	r3, #1
 8006520:	7763      	strb	r3, [r4, #29]
 8006522:	e7e1      	b.n	80064e8 <HAL_RTC_SetTime+0xc4>
  __HAL_LOCK(hrtc);
 8006524:	2002      	movs	r0, #2
}
 8006526:	4770      	bx	lr

08006528 <HAL_RTC_SetDate>:
{
 8006528:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hrtc);
 800652a:	7f03      	ldrb	r3, [r0, #28]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d070      	beq.n	8006612 <HAL_RTC_SetDate+0xea>
 8006530:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006532:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8006534:	2001      	movs	r0, #1
 8006536:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006538:	776b      	strb	r3, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800653a:	f891 e000 	ldrb.w	lr, [r1]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800653e:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006540:	7848      	ldrb	r0, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8006542:	f891 c002 	ldrb.w	ip, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006546:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800654a:	b1aa      	cbz	r2, 8006578 <HAL_RTC_SetDate+0x50>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800654c:	ea4e 4403 	orr.w	r4, lr, r3, lsl #16
 8006550:	ea44 040c 	orr.w	r4, r4, ip
 8006554:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	21ca      	movs	r1, #202	@ 0xca
 800655c:	2253      	movs	r2, #83	@ 0x53
 800655e:	6259      	str	r1, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006560:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006562:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006564:	f7ff fed4 	bl	8006310 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006568:	2800      	cmp	r0, #0
 800656a:	d041      	beq.n	80065f0 <HAL_RTC_SetDate+0xc8>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800656c:	682a      	ldr	r2, [r5, #0]
 800656e:	21ff      	movs	r1, #255	@ 0xff
  __HAL_UNLOCK(hrtc);
 8006570:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006572:	6251      	str	r1, [r2, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006574:	772b      	strb	r3, [r5, #28]
}
 8006576:	bd38      	pop	{r3, r4, r5, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006578:	06c2      	lsls	r2, r0, #27
 800657a:	d547      	bpl.n	800660c <HAL_RTC_SetDate+0xe4>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800657c:	f020 0010 	bic.w	r0, r0, #16
 8006580:	300a      	adds	r0, #10
 8006582:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 8006584:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006586:	7048      	strb	r0, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006588:	bf98      	it	ls
 800658a:	041c      	lslls	r4, r3, #16
  while (number >= 10U)
 800658c:	d90d      	bls.n	80065aa <HAL_RTC_SetDate+0x82>
  uint8_t bcdhigh = 0U;
 800658e:	2200      	movs	r2, #0
    number -= 10U;
 8006590:	3b0a      	subs	r3, #10
 8006592:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8006594:	3201      	adds	r2, #1
  while (number >= 10U)
 8006596:	2b09      	cmp	r3, #9
    bcdhigh++;
 8006598:	b2d2      	uxtb	r2, r2
  while (number >= 10U)
 800659a:	d8f9      	bhi.n	8006590 <HAL_RTC_SetDate+0x68>
  return ((uint8_t)(bcdhigh << 4U) | number);
 800659c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80065a0:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80065a2:	2809      	cmp	r0, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80065a4:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (number >= 10U)
 80065a8:	d909      	bls.n	80065be <HAL_RTC_SetDate+0x96>
  uint8_t bcdhigh = 0U;
 80065aa:	2300      	movs	r3, #0
    number -= 10U;
 80065ac:	380a      	subs	r0, #10
 80065ae:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80065b0:	3301      	adds	r3, #1
  while (number >= 10U)
 80065b2:	2809      	cmp	r0, #9
    bcdhigh++;
 80065b4:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80065b6:	d8f9      	bhi.n	80065ac <HAL_RTC_SetDate+0x84>
  return ((uint8_t)(bcdhigh << 4U) | number);
 80065b8:	ea40 1303 	orr.w	r3, r0, r3, lsl #4
 80065bc:	b2d8      	uxtb	r0, r3
  while (number >= 10U)
 80065be:	f1bc 0f09 	cmp.w	ip, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80065c2:	ea4f 2000 	mov.w	r0, r0, lsl #8
  while (number >= 10U)
 80065c6:	d90d      	bls.n	80065e4 <HAL_RTC_SetDate+0xbc>
  uint8_t bcdhigh = 0U;
 80065c8:	2300      	movs	r3, #0
    number -= 10U;
 80065ca:	f1ac 0c0a 	sub.w	ip, ip, #10
 80065ce:	fa5f fc8c 	uxtb.w	ip, ip
    bcdhigh++;
 80065d2:	3301      	adds	r3, #1
  while (number >= 10U)
 80065d4:	f1bc 0f09 	cmp.w	ip, #9
    bcdhigh++;
 80065d8:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80065da:	d8f6      	bhi.n	80065ca <HAL_RTC_SetDate+0xa2>
  return ((uint8_t)(bcdhigh << 4U) | number);
 80065dc:	ea4c 1303 	orr.w	r3, ip, r3, lsl #4
 80065e0:	fa5f fc83 	uxtb.w	ip, r3
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80065e4:	ea44 040e 	orr.w	r4, r4, lr
 80065e8:	4304      	orrs	r4, r0
 80065ea:	ea44 040c 	orr.w	r4, r4, ip
 80065ee:	e7b3      	b.n	8006558 <HAL_RTC_SetDate+0x30>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 80065f6:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 80065fa:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80065fc:	4628      	mov	r0, r5
 80065fe:	f7ff fea9 	bl	8006354 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006602:	2800      	cmp	r0, #0
 8006604:	d1b2      	bne.n	800656c <HAL_RTC_SetDate+0x44>
    hrtc->State = HAL_RTC_STATE_READY;
 8006606:	2301      	movs	r3, #1
 8006608:	776b      	strb	r3, [r5, #29]
 800660a:	e7af      	b.n	800656c <HAL_RTC_SetDate+0x44>
  while (number >= 10U)
 800660c:	2b09      	cmp	r3, #9
 800660e:	d8be      	bhi.n	800658e <HAL_RTC_SetDate+0x66>
 8006610:	e7c7      	b.n	80065a2 <HAL_RTC_SetDate+0x7a>
  __HAL_LOCK(hrtc);
 8006612:	2002      	movs	r0, #2
}
 8006614:	bd38      	pop	{r3, r4, r5, pc}
 8006616:	bf00      	nop

08006618 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006618:	6803      	ldr	r3, [r0, #0]
 800661a:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800661c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006624:	6803      	ldr	r3, [r0, #0]
 8006626:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006628:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop

08006630 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006630:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <HAL_SD_ReadBlocks_DMA>:
{
 8006640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006644:	4604      	mov	r4, r0
 8006646:	b087      	sub	sp, #28
  if(NULL == pData)
 8006648:	2900      	cmp	r1, #0
 800664a:	d07f      	beq.n	800674c <HAL_SD_ReadBlocks_DMA+0x10c>
  if(hsd->State == HAL_SD_STATE_READY)
 800664c:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8006650:	2801      	cmp	r0, #1
 8006652:	fa5f f880 	uxtb.w	r8, r0
 8006656:	d166      	bne.n	8006726 <HAL_SD_ReadBlocks_DMA+0xe6>
 8006658:	461e      	mov	r6, r3
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800665a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800665c:	4617      	mov	r7, r2
 800665e:	4432      	add	r2, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006660:	2500      	movs	r5, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006662:	429a      	cmp	r2, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006664:	63a5      	str	r5, [r4, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006666:	d908      	bls.n	800667a <HAL_SD_ReadBlocks_DMA+0x3a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006668:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800666a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800666e:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8006670:	2501      	movs	r5, #1
}
 8006672:	4628      	mov	r0, r5
 8006674:	b007      	add	sp, #28
 8006676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800667a:	460a      	mov	r2, r1
    hsd->Instance->DCTRL = 0U;
 800667c:	6821      	ldr	r1, [r4, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800667e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006680:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8006770 <HAL_SD_ReadBlocks_DMA+0x130>
    hsd->State = HAL_SD_STATE_BUSY;
 8006684:	2303      	movs	r3, #3
 8006686:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800668a:	62cd      	str	r5, [r1, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800668c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800668e:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8006692:	f043 0302 	orr.w	r3, r3, #2
 8006696:	63cb      	str	r3, [r1, #60]	@ 0x3c
    hsd->hdmarx->XferAbortCallback = NULL;
 8006698:	6505      	str	r5, [r0, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800669a:	6085      	str	r5, [r0, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800669c:	6805      	ldr	r5, [r0, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800669e:	4b31      	ldr	r3, [pc, #196]	@ (8006764 <HAL_SD_ReadBlocks_DMA+0x124>)
 80066a0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80066a2:	682b      	ldr	r3, [r5, #0]
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80066a4:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80066a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80066ac:	ea4f 2946 	mov.w	r9, r6, lsl #9
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80066b0:	602b      	str	r3, [r5, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80066b2:	3180      	adds	r1, #128	@ 0x80
 80066b4:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80066b8:	f7fd fcd6 	bl	8004068 <HAL_DMA_Start_IT>
 80066bc:	4605      	mov	r5, r0
 80066be:	2800      	cmp	r0, #0
 80066c0:	d136      	bne.n	8006730 <HAL_SD_ReadBlocks_DMA+0xf0>
      __HAL_SD_DMA_ENABLE(hsd);
 80066c2:	4b29      	ldr	r3, [pc, #164]	@ (8006768 <HAL_SD_ReadBlocks_DMA+0x128>)
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80066c4:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 80066c6:	f8c3 858c 	str.w	r8, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80066ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80066cc:	f8cd 9004 	str.w	r9, [sp, #4]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80066d0:	2b01      	cmp	r3, #1
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80066d2:	f04f 0290 	mov.w	r2, #144	@ 0x90
 80066d6:	f04f 0302 	mov.w	r3, #2
 80066da:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80066de:	f04f 0100 	mov.w	r1, #0
 80066e2:	f04f 0301 	mov.w	r3, #1
 80066e6:	e9cd 1304 	strd	r1, r3, [sp, #16]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80066ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80066ee:	4669      	mov	r1, sp
        add *= 512U;
 80066f0:	bf18      	it	ne
 80066f2:	027f      	lslne	r7, r7, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80066f4:	9300      	str	r3, [sp, #0]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80066f6:	f001 fcff 	bl	80080f8 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 80066fa:	2e01      	cmp	r6, #1
 80066fc:	d92b      	bls.n	8006756 <HAL_SD_ReadBlocks_DMA+0x116>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80066fe:	2382      	movs	r3, #130	@ 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006700:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006702:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006704:	4639      	mov	r1, r7
 8006706:	f001 fe21 	bl	800834c <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 800670a:	2800      	cmp	r0, #0
 800670c:	d0b1      	beq.n	8006672 <HAL_SD_ReadBlocks_DMA+0x32>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	4a16      	ldr	r2, [pc, #88]	@ (800676c <HAL_SD_ReadBlocks_DMA+0x12c>)
 8006712:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006714:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006716:	2101      	movs	r1, #1
        hsd->ErrorCode |= errorstate;
 8006718:	4303      	orrs	r3, r0
        hsd->Context = SD_CONTEXT_NONE;
 800671a:	2200      	movs	r2, #0
        hsd->ErrorCode |= errorstate;
 800671c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800671e:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006722:	6322      	str	r2, [r4, #48]	@ 0x30
        return HAL_ERROR;
 8006724:	e7a4      	b.n	8006670 <HAL_SD_ReadBlocks_DMA+0x30>
    return HAL_BUSY;
 8006726:	2502      	movs	r5, #2
}
 8006728:	4628      	mov	r0, r5
 800672a:	b007      	add	sp, #28
 800672c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006730:	6823      	ldr	r3, [r4, #0]
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006732:	490e      	ldr	r1, [pc, #56]	@ (800676c <HAL_SD_ReadBlocks_DMA+0x12c>)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006734:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006736:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800673a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800673c:	6399      	str	r1, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800673e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006740:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006744:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006746:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800674a:	e791      	b.n	8006670 <HAL_SD_ReadBlocks_DMA+0x30>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800674c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800674e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006752:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8006754:	e78c      	b.n	8006670 <HAL_SD_ReadBlocks_DMA+0x30>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006756:	2381      	movs	r3, #129	@ 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006758:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800675a:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800675c:	4639      	mov	r1, r7
 800675e:	f001 fde5 	bl	800832c <SDMMC_CmdReadSingleBlock>
 8006762:	e7d2      	b.n	800670a <HAL_SD_ReadBlocks_DMA+0xca>
 8006764:	080068a5 	.word	0x080068a5
 8006768:	42258000 	.word	0x42258000
 800676c:	004005ff 	.word	0x004005ff
 8006770:	08006d19 	.word	0x08006d19

08006774 <HAL_SD_WriteBlocks_DMA>:
{
 8006774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006778:	4604      	mov	r4, r0
 800677a:	b086      	sub	sp, #24
  if(NULL == pData)
 800677c:	2900      	cmp	r1, #0
 800677e:	d06d      	beq.n	800685c <HAL_SD_WriteBlocks_DMA+0xe8>
  if(hsd->State == HAL_SD_STATE_READY)
 8006780:	461d      	mov	r5, r3
 8006782:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8006786:	2b01      	cmp	r3, #1
 8006788:	d130      	bne.n	80067ec <HAL_SD_WriteBlocks_DMA+0x78>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800678a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800678c:	460e      	mov	r6, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800678e:	2100      	movs	r1, #0
 8006790:	6381      	str	r1, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006792:	1950      	adds	r0, r2, r5
 8006794:	4298      	cmp	r0, r3
 8006796:	d82e      	bhi.n	80067f6 <HAL_SD_WriteBlocks_DMA+0x82>
    hsd->Instance->DCTRL = 0U;
 8006798:	6820      	ldr	r0, [r4, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800679a:	4f3d      	ldr	r7, [pc, #244]	@ (8006890 <HAL_SD_WriteBlocks_DMA+0x11c>)
    hsd->State = HAL_SD_STATE_BUSY;
 800679c:	2303      	movs	r3, #3
 800679e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 80067a2:	62c1      	str	r1, [r0, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80067a4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80067a6:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80067aa:	f043 0302 	orr.w	r3, r3, #2
 80067ae:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80067b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    hsd->hdmatx->XferAbortCallback = NULL;
 80067b2:	6519      	str	r1, [r3, #80]	@ 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80067b6:	63df      	str	r7, [r3, #60]	@ 0x3c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067b8:	2901      	cmp	r1, #1
      add *= 512U;
 80067ba:	bf18      	it	ne
 80067bc:	0252      	lslne	r2, r2, #9
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80067be:	4f35      	ldr	r7, [pc, #212]	@ (8006894 <HAL_SD_WriteBlocks_DMA+0x120>)
 80067c0:	64df      	str	r7, [r3, #76]	@ 0x4c
    if(NumberOfBlocks > 1U)
 80067c2:	2d01      	cmp	r5, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80067c4:	4611      	mov	r1, r2
    if(NumberOfBlocks > 1U)
 80067c6:	d94e      	bls.n	8006866 <HAL_SD_WriteBlocks_DMA+0xf2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80067c8:	23a0      	movs	r3, #160	@ 0xa0
 80067ca:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80067cc:	f001 fddc 	bl	8008388 <SDMMC_CmdWriteMultiBlock>
 80067d0:	4607      	mov	r7, r0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067d2:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80067d4:	b1c7      	cbz	r7, 8006808 <HAL_SD_WriteBlocks_DMA+0x94>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067d6:	4b30      	ldr	r3, [pc, #192]	@ (8006898 <HAL_SD_WriteBlocks_DMA+0x124>)
 80067d8:	6393      	str	r3, [r2, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80067da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067dc:	2101      	movs	r1, #1
      hsd->ErrorCode |= errorstate;
 80067de:	433b      	orrs	r3, r7
      hsd->Context = SD_CONTEXT_NONE;
 80067e0:	2200      	movs	r2, #0
      hsd->ErrorCode |= errorstate;
 80067e2:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067e4:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067e8:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 80067ea:	e008      	b.n	80067fe <HAL_SD_WriteBlocks_DMA+0x8a>
    return HAL_BUSY;
 80067ec:	2602      	movs	r6, #2
}
 80067ee:	4630      	mov	r0, r6
 80067f0:	b006      	add	sp, #24
 80067f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80067f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067fc:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80067fe:	2601      	movs	r6, #1
}
 8006800:	4630      	mov	r0, r6
 8006802:	b006      	add	sp, #24
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006808:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 800680a:	4b24      	ldr	r3, [pc, #144]	@ (800689c <HAL_SD_WriteBlocks_DMA+0x128>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800680c:	4631      	mov	r1, r6
    __HAL_SD_DMA_ENABLE(hsd);
 800680e:	f04f 0801 	mov.w	r8, #1
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006812:	6806      	ldr	r6, [r0, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 8006814:	f8c3 858c 	str.w	r8, [r3, #1420]	@ 0x58c
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800681e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006822:	f04f 0c40 	mov.w	ip, #64	@ 0x40
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006826:	026d      	lsls	r5, r5, #9
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006828:	f8c0 c008 	str.w	ip, [r0, #8]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800682c:	3280      	adds	r2, #128	@ 0x80
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800682e:	6033      	str	r3, [r6, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006830:	08ab      	lsrs	r3, r5, #2
 8006832:	f7fd fc19 	bl	8004068 <HAL_DMA_Start_IT>
 8006836:	4606      	mov	r6, r0
 8006838:	b1d8      	cbz	r0, 8006872 <HAL_SD_WriteBlocks_DMA+0xfe>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800683e:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8006842:	f023 0302 	bic.w	r3, r3, #2
 8006846:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006848:	4b13      	ldr	r3, [pc, #76]	@ (8006898 <HAL_SD_WriteBlocks_DMA+0x124>)
 800684a:	6393      	str	r3, [r2, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800684c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800684e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006852:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006854:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006858:	6327      	str	r7, [r4, #48]	@ 0x30
      return HAL_ERROR;
 800685a:	e7d0      	b.n	80067fe <HAL_SD_WriteBlocks_DMA+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800685c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800685e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006862:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8006864:	e7cb      	b.n	80067fe <HAL_SD_WriteBlocks_DMA+0x8a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006866:	2390      	movs	r3, #144	@ 0x90
 8006868:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800686a:	f001 fd7f 	bl	800836c <SDMMC_CmdWriteSingleBlock>
 800686e:	4607      	mov	r7, r0
 8006870:	e7af      	b.n	80067d2 <HAL_SD_WriteBlocks_DMA+0x5e>
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006872:	2390      	movs	r3, #144	@ 0x90
 8006874:	9302      	str	r3, [sp, #8]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006876:	6820      	ldr	r0, [r4, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006878:	9501      	str	r5, [sp, #4]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800687a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800687e:	4669      	mov	r1, sp
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006880:	e9cd 7703 	strd	r7, r7, [sp, #12]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006884:	f8cd 8014 	str.w	r8, [sp, #20]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006888:	9300      	str	r3, [sp, #0]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800688a:	f001 fc35 	bl	80080f8 <SDIO_ConfigData>
      return HAL_OK;
 800688e:	e7ae      	b.n	80067ee <HAL_SD_WriteBlocks_DMA+0x7a>
 8006890:	08006631 	.word	0x08006631
 8006894:	08006d19 	.word	0x08006d19
 8006898:	004005ff 	.word	0x004005ff
 800689c:	42258000 	.word	0x42258000

080068a0 <HAL_SD_ErrorCallback>:
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop

080068a4 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068a4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80068a6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80068a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068aa:	6820      	ldr	r0, [r4, #0]
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80068ac:	2b82      	cmp	r3, #130	@ 0x82
 80068ae:	d00f      	beq.n	80068d0 <SD_DMAReceiveCplt+0x2c>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80068b0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80068b2:	f023 0308 	bic.w	r3, r3, #8
 80068b6:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80068b8:	f240 513a 	movw	r1, #1338	@ 0x53a

  hsd->State = HAL_SD_STATE_READY;
 80068bc:	2201      	movs	r2, #1
  hsd->Context = SD_CONTEXT_NONE;
 80068be:	2300      	movs	r3, #0
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80068c0:	6381      	str	r1, [r0, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 80068c2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80068c6:	4620      	mov	r0, r4
  hsd->Context = SD_CONTEXT_NONE;
 80068c8:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 80068ca:	f001 fed7 	bl	800867c <HAL_SD_RxCpltCallback>
#endif
}
 80068ce:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068d0:	f001 fd6a 	bl	80083a8 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80068d4:	4603      	mov	r3, r0
 80068d6:	b908      	cbnz	r0, 80068dc <SD_DMAReceiveCplt+0x38>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	e7e9      	b.n	80068b0 <SD_DMAReceiveCplt+0xc>
      hsd->ErrorCode |= errorstate;
 80068dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80068de:	4313      	orrs	r3, r2
      HAL_SD_ErrorCallback(hsd);
 80068e0:	4620      	mov	r0, r4
      hsd->ErrorCode |= errorstate;
 80068e2:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 80068e4:	f7ff ffdc 	bl	80068a0 <HAL_SD_ErrorCallback>
 80068e8:	e7f6      	b.n	80068d8 <SD_DMAReceiveCplt+0x34>
 80068ea:	bf00      	nop

080068ec <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068ec:	6e42      	ldr	r2, [r0, #100]	@ 0x64
{
 80068ee:	b410      	push	{r4}
 80068f0:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068f2:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068f4:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068f8:	700c      	strb	r4, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068fa:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068fc:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006900:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006904:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006906:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006908:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800690c:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800690e:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006910:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006912:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006914:	0d14      	lsrs	r4, r2, #20
 8006916:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006918:	f3c2 4403 	ubfx	r4, r2, #16, #4
 800691c:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800691e:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8006922:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006924:	f3c2 3480 	ubfx	r4, r2, #14, #1
 8006928:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800692a:	f3c2 3440 	ubfx	r4, r2, #13, #1
 800692e:	72cc      	strb	r4, [r1, #11]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006930:	2000      	movs	r0, #0
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006932:	f3c2 3400 	ubfx	r4, r2, #12, #1
 8006936:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006938:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800693a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800693c:	2800      	cmp	r0, #0
 800693e:	d16f      	bne.n	8006a20 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006940:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006942:	f640 74fc 	movw	r4, #4092	@ 0xffc
 8006946:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 800694a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800694e:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006952:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006954:	750c      	strb	r4, [r1, #20]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006956:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800695a:	f3c0 6402 	ubfx	r4, r0, #24, #3
 800695e:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006960:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006962:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006966:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800696a:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800696c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800696e:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006970:	7e0a      	ldrb	r2, [r1, #24]
 8006972:	f002 0207 	and.w	r2, r2, #7
 8006976:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006978:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800697a:	4094      	lsls	r4, r2
 800697c:	655c      	str	r4, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800697e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8006982:	2201      	movs	r2, #1
 8006984:	f00c 0c0f 	and.w	ip, ip, #15
 8006988:	fa02 f20c 	lsl.w	r2, r2, ip
 800698c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800698e:	0a52      	lsrs	r2, r2, #9
 8006990:	fb04 f202 	mul.w	r2, r4, r2
 8006994:	65da      	str	r2, [r3, #92]	@ 0x5c
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006996:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800699a:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800699e:	661c      	str	r4, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80069a0:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80069a2:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80069a6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80069aa:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80069ac:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80069ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b0:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80069b2:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80069b6:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80069b8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80069ba:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069be:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80069c2:	778c      	strb	r4, [r1, #30]
  pCSD->Reserved3 = 0;
 80069c4:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069c6:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80069c8:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80069cc:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80069d0:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->Reserved3 = 0;
 80069d4:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80069d8:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80069dc:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80069e0:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80069e4:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80069e8:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80069ec:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069f0:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80069f4:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069f8:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069fc:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a00:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a04:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a08:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a0c:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 8006a10:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a12:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8006a16:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 8006a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a1e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a20:	2801      	cmp	r0, #1
 8006a22:	d10f      	bne.n	8006a44 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a24:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006a26:	0412      	lsls	r2, r2, #16
 8006a28:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8006a2c:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8006a30:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a32:	690a      	ldr	r2, [r1, #16]
 8006a34:	3201      	adds	r2, #1
 8006a36:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 8006a38:	f44f 7400 	mov.w	r4, #512	@ 0x200
 8006a3c:	e9c3 4216 	strd	r4, r2, [r3, #88]	@ 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a40:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a42:	e7a8      	b.n	8006996 <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4906      	ldr	r1, [pc, #24]	@ (8006a60 <HAL_SD_GetCardCSD+0x174>)
 8006a48:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a4c:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006a52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a54:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006a58:	4608      	mov	r0, r1
}
 8006a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	004005ff 	.word	0x004005ff

08006a64 <HAL_SD_InitCard>:
{
 8006a64:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a66:	2200      	movs	r2, #0
{
 8006a68:	b099      	sub	sp, #100	@ 0x64
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a6a:	2376      	movs	r3, #118	@ 0x76
 8006a6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006a70:	2300      	movs	r3, #0
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006a72:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8006a74:	aa09      	add	r2, sp, #36	@ 0x24
{
 8006a76:	4605      	mov	r5, r0
  status = SDIO_Init(hsd->Instance, Init);
 8006a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006a7e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a82:	9308      	str	r3, [sp, #32]
  status = SDIO_Init(hsd->Instance, Init);
 8006a84:	ab06      	add	r3, sp, #24
 8006a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a88:	6828      	ldr	r0, [r5, #0]
 8006a8a:	f001 fb03 	bl	8008094 <SDIO_Init>
  if(status != HAL_OK)
 8006a8e:	b118      	cbz	r0, 8006a98 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8006a90:	2401      	movs	r4, #1
}
 8006a92:	4620      	mov	r0, r4
 8006a94:	b019      	add	sp, #100	@ 0x64
 8006a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_DISABLE(hsd);
 8006a98:	4e79      	ldr	r6, [pc, #484]	@ (8006c80 <HAL_SD_InitCard+0x21c>)
 8006a9a:	4604      	mov	r4, r0
  __HAL_SD_ENABLE(hsd);
 8006a9c:	2701      	movs	r7, #1
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006a9e:	6828      	ldr	r0, [r5, #0]
  __HAL_SD_DISABLE(hsd);
 8006aa0:	f8c6 40a0 	str.w	r4, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006aa4:	f001 fb1c 	bl	80080e0 <SDIO_PowerState_ON>
  HAL_Delay(2);
 8006aa8:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8006aaa:	f8c6 70a0 	str.w	r7, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 8006aae:	f7fc fb8d 	bl	80031cc <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ab2:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t count = 0U;
 8006ab4:	9405      	str	r4, [sp, #20]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ab6:	f001 fb35 	bl	8008124 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aba:	4604      	mov	r4, r0
 8006abc:	b958      	cbnz	r0, 8006ad6 <HAL_SD_InitCard+0x72>
  {
    return errorstate;
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006abe:	6828      	ldr	r0, [r5, #0]
 8006ac0:	f001 fd88 	bl	80085d4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ac4:	b970      	cbnz	r0, 8006ae4 <HAL_SD_InitCard+0x80>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ac6:	64af      	str	r7, [r5, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ac8:	6828      	ldr	r0, [r5, #0]
 8006aca:	2100      	movs	r1, #0
 8006acc:	f001 fc8e 	bl	80083ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ad0:	b190      	cbz	r0, 8006af8 <HAL_SD_InitCard+0x94>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ad2:	f04f 5480 	mov.w	r4, #268435456	@ 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006adc:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006ade:	4323      	orrs	r3, r4
 8006ae0:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8006ae2:	e7d5      	b.n	8006a90 <HAL_SD_InitCard+0x2c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ae4:	6828      	ldr	r0, [r5, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ae6:	64ac      	str	r4, [r5, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ae8:	f001 fb1c 	bl	8008124 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f040 80c2 	bne.w	8006c76 <HAL_SD_InitCard+0x212>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006af2:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d0e7      	beq.n	8006ac8 <HAL_SD_InitCard+0x64>
    }
  }
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006af8:	9b05      	ldr	r3, [sp, #20]
 8006afa:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 8006afe:	42b3      	cmp	r3, r6
 8006b00:	d81d      	bhi.n	8006b3e <HAL_SD_InitCard+0xda>
    {
      return errorstate;
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006b02:	4f60      	ldr	r7, [pc, #384]	@ (8006c84 <HAL_SD_InitCard+0x220>)
 8006b04:	e012      	b.n	8006b2c <HAL_SD_InitCard+0xc8>
 8006b06:	6828      	ldr	r0, [r5, #0]
 8006b08:	f001 fb32 	bl	8008170 <SDMMC_CmdAppOperCommand>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b0c:	4621      	mov	r1, r4
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d1df      	bne.n	8006ad2 <HAL_SD_InitCard+0x6e>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b12:	6828      	ldr	r0, [r5, #0]
 8006b14:	f001 faec 	bl	80080f0 <SDIO_GetResponse>

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);

    count++;
 8006b18:	9b05      	ldr	r3, [sp, #20]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b1e:	9b05      	ldr	r3, [sp, #20]
 8006b20:	42b3      	cmp	r3, r6
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b22:	4604      	mov	r4, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b24:	ea4f 72d0 	mov.w	r2, r0, lsr #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b28:	d809      	bhi.n	8006b3e <HAL_SD_InitCard+0xda>
 8006b2a:	b942      	cbnz	r2, 8006b3e <HAL_SD_InitCard+0xda>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	6828      	ldr	r0, [r5, #0]
 8006b30:	f001 fc5c 	bl	80083ec <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006b34:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b36:	4604      	mov	r4, r0
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d0e4      	beq.n	8006b06 <HAL_SD_InitCard+0xa2>
 8006b3c:	e7cb      	b.n	8006ad6 <HAL_SD_InitCard+0x72>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b3e:	9a05      	ldr	r2, [sp, #20]
 8006b40:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006b44:	429a      	cmp	r2, r3
 8006b46:	f200 8098 	bhi.w	8006c7a <HAL_SD_InitCard+0x216>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b4a:	f3c4 7480 	ubfx	r4, r4, #30, #1
  uint16_t sd_rca = 1U;
 8006b4e:	2301      	movs	r3, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006b50:	6828      	ldr	r0, [r5, #0]
 8006b52:	646c      	str	r4, [r5, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 8006b54:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006b58:	f001 fac6 	bl	80080e8 <SDIO_GetPowerState>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f000 8084 	beq.w	8006c6a <HAL_SD_InitCard+0x206>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b62:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006b64:	6828      	ldr	r0, [r5, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d12f      	bne.n	8006bca <HAL_SD_InitCard+0x166>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006b6a:	2104      	movs	r1, #4
 8006b6c:	f001 fac0 	bl	80080f0 <SDIO_GetResponse>
 8006b70:	0d00      	lsrs	r0, r0, #20
 8006b72:	64e8      	str	r0, [r5, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006b74:	a90d      	add	r1, sp, #52	@ 0x34
 8006b76:	4628      	mov	r0, r5
 8006b78:	f7ff feb8 	bl	80068ec <HAL_SD_GetCardCSD>
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d176      	bne.n	8006c70 <HAL_SD_InitCard+0x20c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006b82:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 8006b84:	6828      	ldr	r0, [r5, #0]
 8006b86:	0412      	lsls	r2, r2, #16
 8006b88:	4623      	mov	r3, r4
 8006b8a:	f001 fc1f 	bl	80083cc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b8e:	b9f8      	cbnz	r0, 8006bd0 <HAL_SD_InitCard+0x16c>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006b90:	462a      	mov	r2, r5
 8006b92:	1d2b      	adds	r3, r5, #4
 8006b94:	f852 6b10 	ldr.w	r6, [r2], #16
 8006b98:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b9a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ba2:	f001 fa77 	bl	8008094 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ba6:	6828      	ldr	r0, [r5, #0]
 8006ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006bac:	f001 fbb0 	bl	8008310 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	f43f af6e 	beq.w	8006a92 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bb6:	682b      	ldr	r3, [r5, #0]
 8006bb8:	4a33      	ldr	r2, [pc, #204]	@ (8006c88 <HAL_SD_InitCard+0x224>)
 8006bba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006bbc:	6bab      	ldr	r3, [r5, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006bbe:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 8006bc0:	4303      	orrs	r3, r0
 8006bc2:	63ab      	str	r3, [r5, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006bc4:	f885 2034 	strb.w	r2, [r5, #52]	@ 0x34
    return HAL_ERROR;
 8006bc8:	e762      	b.n	8006a90 <HAL_SD_InitCard+0x2c>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006bca:	f001 fc5b 	bl	8008484 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bce:	b130      	cbz	r0, 8006bde <HAL_SD_InitCard+0x17a>
    hsd->State = HAL_SD_STATE_READY;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006bd6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006bd8:	4303      	orrs	r3, r0
 8006bda:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8006bdc:	e758      	b.n	8006a90 <HAL_SD_InitCard+0x2c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006bde:	4601      	mov	r1, r0
 8006be0:	6828      	ldr	r0, [r5, #0]
 8006be2:	f001 fa85 	bl	80080f0 <SDIO_GetResponse>
 8006be6:	4603      	mov	r3, r0
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006be8:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006bea:	676b      	str	r3, [r5, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006bec:	6828      	ldr	r0, [r5, #0]
 8006bee:	f001 fa7f 	bl	80080f0 <SDIO_GetResponse>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	67ab      	str	r3, [r5, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006bf6:	2108      	movs	r1, #8
 8006bf8:	6828      	ldr	r0, [r5, #0]
 8006bfa:	f001 fa79 	bl	80080f0 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006bfe:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c00:	67e8      	str	r0, [r5, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c02:	6828      	ldr	r0, [r5, #0]
 8006c04:	f001 fa74 	bl	80080f0 <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c08:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c0a:	f8c5 0080 	str.w	r0, [r5, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c0e:	2b03      	cmp	r3, #3
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c10:	6828      	ldr	r0, [r5, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c12:	d0aa      	beq.n	8006b6a <HAL_SD_InitCard+0x106>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c14:	f10d 0112 	add.w	r1, sp, #18
 8006c18:	f001 fc9a 	bl	8008550 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d1d7      	bne.n	8006bd0 <HAL_SD_InitCard+0x16c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c20:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c22:	6828      	ldr	r0, [r5, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d0a0      	beq.n	8006b6a <HAL_SD_InitCard+0x106>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c28:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8006c2c:	6529      	str	r1, [r5, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c2e:	0409      	lsls	r1, r1, #16
 8006c30:	f001 fc36 	bl	80084a0 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d1cb      	bne.n	8006bd0 <HAL_SD_InitCard+0x16c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c38:	4601      	mov	r1, r0
 8006c3a:	6828      	ldr	r0, [r5, #0]
 8006c3c:	f001 fa58 	bl	80080f0 <SDIO_GetResponse>
 8006c40:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006c42:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c44:	666b      	str	r3, [r5, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006c46:	6828      	ldr	r0, [r5, #0]
 8006c48:	f001 fa52 	bl	80080f0 <SDIO_GetResponse>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	66ab      	str	r3, [r5, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c50:	2108      	movs	r1, #8
 8006c52:	6828      	ldr	r0, [r5, #0]
 8006c54:	f001 fa4c 	bl	80080f0 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c58:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c5a:	66e8      	str	r0, [r5, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c5c:	6828      	ldr	r0, [r5, #0]
 8006c5e:	f001 fa47 	bl	80080f0 <SDIO_GetResponse>
 8006c62:	4603      	mov	r3, r0
 8006c64:	672b      	str	r3, [r5, #112]	@ 0x70
 8006c66:	6828      	ldr	r0, [r5, #0]
 8006c68:	e77f      	b.n	8006b6a <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c6a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8006c6e:	e7af      	b.n	8006bd0 <HAL_SD_InitCard+0x16c>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c70:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8006c74:	e7ac      	b.n	8006bd0 <HAL_SD_InitCard+0x16c>
      return errorstate;
 8006c76:	4604      	mov	r4, r0
 8006c78:	e72d      	b.n	8006ad6 <HAL_SD_InitCard+0x72>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c7a:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8006c7e:	e72a      	b.n	8006ad6 <HAL_SD_InitCard+0x72>
 8006c80:	42258000 	.word	0x42258000
 8006c84:	c1100000 	.word	0xc1100000
 8006c88:	004005ff 	.word	0x004005ff

08006c8c <HAL_SD_Init>:
  if(hsd == NULL)
 8006c8c:	b1c8      	cbz	r0, 8006cc2 <HAL_SD_Init+0x36>
{
 8006c8e:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8006c90:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8006c94:	4604      	mov	r4, r0
 8006c96:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006c9a:	b173      	cbz	r3, 8006cba <HAL_SD_Init+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7ff fede 	bl	8006a64 <HAL_SD_InitCard>
 8006ca8:	b928      	cbnz	r0, 8006cb6 <HAL_SD_Init+0x2a>
  hsd->State = HAL_SD_STATE_READY;
 8006caa:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006cac:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006cae:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006cb0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8006cb4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006cb6:	2001      	movs	r0, #1
}
 8006cb8:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8006cba:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8006cbc:	f7fb fcb2 	bl	8002624 <HAL_SD_MspInit>
 8006cc0:	e7ec      	b.n	8006c9c <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8006cc2:	2001      	movs	r0, #1
}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop

08006cc8 <HAL_SD_GetCardInfo>:
{
 8006cc8:	b4f0      	push	{r4, r5, r6, r7}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006cca:	e9d0 c711 	ldrd	ip, r7, [r0, #68]	@ 0x44
 8006cce:	e9d0 6513 	ldrd	r6, r5, [r0, #76]	@ 0x4c
 8006cd2:	e9d0 4215 	ldrd	r4, r2, [r0, #84]	@ 0x54
 8006cd6:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	@ 0x5c
 8006cda:	e9c1 c700 	strd	ip, r7, [r1]
 8006cde:	e9c1 6502 	strd	r6, r5, [r1, #8]
 8006ce2:	e9c1 4204 	strd	r4, r2, [r1, #16]
 8006ce6:	61c8      	str	r0, [r1, #28]
}
 8006ce8:	bcf0      	pop	{r4, r5, r6, r7}
 8006cea:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006cec:	618b      	str	r3, [r1, #24]
}
 8006cee:	4770      	bx	lr

08006cf0 <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cf0:	6d01      	ldr	r1, [r0, #80]	@ 0x50
{
 8006cf2:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cf4:	0409      	lsls	r1, r1, #16
{
 8006cf6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cf8:	6800      	ldr	r0, [r0, #0]
 8006cfa:	f001 fb87 	bl	800840c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cfe:	4601      	mov	r1, r0
 8006d00:	b120      	cbz	r0, 8006d0c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8006d02:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d04:	430b      	orrs	r3, r1
 8006d06:	2000      	movs	r0, #0
 8006d08:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8006d0a:	bd10      	pop	{r4, pc}
  {
    return errorstate;
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	f001 f9ef 	bl	80080f0 <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006d12:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8006d16:	bd10      	pop	{r4, pc}

08006d18 <SD_DMAError>:
{
 8006d18:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d1a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006d1c:	f7fd fb16 	bl	800434c <HAL_DMA_GetError>
 8006d20:	2802      	cmp	r0, #2
 8006d22:	d00a      	beq.n	8006d3a <SD_DMAError+0x22>
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006d24:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006d2a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d005      	beq.n	8006d3c <SD_DMAError+0x24>
 8006d30:	2a01      	cmp	r2, #1
 8006d32:	d003      	beq.n	8006d3c <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8006d34:	4620      	mov	r0, r4
 8006d36:	f7ff fdb3 	bl	80068a0 <HAL_SD_ErrorCallback>
}
 8006d3a:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	4a10      	ldr	r2, [pc, #64]	@ (8006d80 <SD_DMAError+0x68>)
 8006d40:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d44:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006d48:	63da      	str	r2, [r3, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
      CardState = HAL_SD_GetCardState(hsd);
 8006d50:	4620      	mov	r0, r4
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d52:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006d54:	f7ff ffcc 	bl	8006cf0 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d58:	3805      	subs	r0, #5
 8006d5a:	2801      	cmp	r0, #1
 8006d5c:	d908      	bls.n	8006d70 <SD_DMAError+0x58>
      hsd->State= HAL_SD_STATE_READY;
 8006d5e:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006d60:	2300      	movs	r3, #0
      hsd->State= HAL_SD_STATE_READY;
 8006d62:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    HAL_SD_ErrorCallback(hsd);
 8006d66:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8006d68:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_SD_ErrorCallback(hsd);
 8006d6a:	f7ff fd99 	bl	80068a0 <HAL_SD_ErrorCallback>
 8006d6e:	e7e4      	b.n	8006d3a <SD_DMAError+0x22>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	f001 fb19 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8006d76:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d78:	4303      	orrs	r3, r0
 8006d7a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006d7c:	e7ef      	b.n	8006d5e <SD_DMAError+0x46>
 8006d7e:	bf00      	nop
 8006d80:	004005ff 	.word	0x004005ff

08006d84 <SD_DMATxAbort>:
{
 8006d84:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d86:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7ff ffad 	bl	8006cf0 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8006d96:	2201      	movs	r2, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d98:	3805      	subs	r0, #5
  hsd->Context = SD_CONTEXT_NONE;
 8006d9a:	2300      	movs	r3, #0
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d9c:	4290      	cmp	r0, r2
  hsd->State = HAL_SD_STATE_READY;
 8006d9e:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006da2:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006da4:	d908      	bls.n	8006db8 <SD_DMATxAbort+0x34>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006da6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    HAL_SD_AbortCallback(hsd);
 8006da8:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006daa:	b913      	cbnz	r3, 8006db2 <SD_DMATxAbort+0x2e>
    HAL_SD_AbortCallback(hsd);
 8006dac:	f001 fc5e 	bl	800866c <HAL_SD_AbortCallback>
}
 8006db0:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8006db2:	f7ff fd75 	bl	80068a0 <HAL_SD_ErrorCallback>
}
 8006db6:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	f001 faf5 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8006dbe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006dc0:	4303      	orrs	r3, r0
 8006dc2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006dc4:	e7ef      	b.n	8006da6 <SD_DMATxAbort+0x22>
 8006dc6:	bf00      	nop

08006dc8 <HAL_SD_IRQHandler>:
{
 8006dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dcc:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006dce:	6800      	ldr	r0, [r0, #0]
  uint32_t context = hsd->Context;
 8006dd0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006dd2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006dd4:	041a      	lsls	r2, r3, #16
{
 8006dd6:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006dd8:	d51d      	bpl.n	8006e16 <HAL_SD_IRQHandler+0x4e>
 8006dda:	072b      	lsls	r3, r5, #28
 8006ddc:	f100 80c0 	bmi.w	8006f60 <HAL_SD_IRQHandler+0x198>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006de0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006de2:	05db      	lsls	r3, r3, #23
 8006de4:	d56b      	bpl.n	8006ebe <HAL_SD_IRQHandler+0xf6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006dea:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006dec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006dee:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006df2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006df6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006df8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	62c3      	str	r3, [r0, #44]	@ 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006e00:	0629      	lsls	r1, r5, #24
 8006e02:	d505      	bpl.n	8006e10 <HAL_SD_IRQHandler+0x48>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006e04:	06aa      	lsls	r2, r5, #26
 8006e06:	f100 80ec 	bmi.w	8006fe2 <HAL_SD_IRQHandler+0x21a>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006e0a:	07ab      	lsls	r3, r5, #30
 8006e0c:	f000 80bb 	beq.w	8006f86 <HAL_SD_IRQHandler+0x1be>
}
 8006e10:	b002      	add	sp, #8
 8006e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006e16:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006e18:	05df      	lsls	r7, r3, #23
 8006e1a:	d523      	bpl.n	8006e64 <HAL_SD_IRQHandler+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006e1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e20:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006e22:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006e24:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006e28:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006e2c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006e2e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8006e30:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	62c3      	str	r3, [r0, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8006e38:	d5e2      	bpl.n	8006e00 <HAL_SD_IRQHandler+0x38>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006e3a:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8006e3e:	f040 80b0 	bne.w	8006fa2 <HAL_SD_IRQHandler+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e42:	f240 533a 	movw	r3, #1338	@ 0x53a
 8006e46:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e48:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006e4a:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8006e4c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        HAL_SD_RxCpltCallback(hsd);
 8006e50:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8006e52:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006e54:	07ac      	lsls	r4, r5, #30
 8006e56:	f000 809f 	beq.w	8006f98 <HAL_SD_IRQHandler+0x1d0>
        HAL_SD_RxCpltCallback(hsd);
 8006e5a:	f001 fc0f 	bl	800867c <HAL_SD_RxCpltCallback>
}
 8006e5e:	b002      	add	sp, #8
 8006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e64:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006e66:	045f      	lsls	r7, r3, #17
 8006e68:	d52a      	bpl.n	8006ec0 <HAL_SD_IRQHandler+0xf8>
 8006e6a:	072e      	lsls	r6, r5, #28
 8006e6c:	d528      	bpl.n	8006ec0 <HAL_SD_IRQHandler+0xf8>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8006e6e:	6a66      	ldr	r6, [r4, #36]	@ 0x24

  if (dataremaining > 0U)
 8006e70:	2e00      	cmp	r6, #0
 8006e72:	d0cd      	beq.n	8006e10 <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pTxBuffPtr;
 8006e74:	6a27      	ldr	r7, [r4, #32]
 8006e76:	f107 0804 	add.w	r8, r7, #4
 8006e7a:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8006e7e:	e000      	b.n	8006e82 <HAL_SD_IRQHandler+0xba>
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006e80:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 8006e82:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 8006e86:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8006e88:	f818 2c03 	ldrb.w	r2, [r8, #-3]
 8006e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e90:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8006e92:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 8006e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e9a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8006e9c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006ea0:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 8006ea2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    for(count = 0U; count < 8U; count++)
 8006ea6:	f108 0804 	add.w	r8, r8, #4
      data |= ((uint32_t)(*tmp) << 24U);
 8006eaa:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006eac:	f001 f912 	bl	80080d4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006eb0:	45a8      	cmp	r8, r5
 8006eb2:	d1e5      	bne.n	8006e80 <HAL_SD_IRQHandler+0xb8>
      tmp++;
 8006eb4:	3720      	adds	r7, #32
      dataremaining--;
 8006eb6:	3e20      	subs	r6, #32
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
 8006eb8:	e9c4 7608 	strd	r7, r6, [r4, #32]
  }
}
 8006ebc:	e7a8      	b.n	8006e10 <HAL_SD_IRQHandler+0x48>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ebe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006ec0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8006ec2:	f240 233a 	movw	r3, #570	@ 0x23a
 8006ec6:	421a      	tst	r2, r3
 8006ec8:	d0a2      	beq.n	8006e10 <HAL_SD_IRQHandler+0x48>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006eca:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006ecc:	0799      	lsls	r1, r3, #30
 8006ece:	d503      	bpl.n	8006ed8 <HAL_SD_IRQHandler+0x110>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ed0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ed2:	f043 0302 	orr.w	r3, r3, #2
 8006ed6:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006ed8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006eda:	071a      	lsls	r2, r3, #28
 8006edc:	d503      	bpl.n	8006ee6 <HAL_SD_IRQHandler+0x11e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ede:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ee0:	f043 0308 	orr.w	r3, r3, #8
 8006ee4:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006ee6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006ee8:	069b      	lsls	r3, r3, #26
 8006eea:	d503      	bpl.n	8006ef4 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006eec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006eee:	f043 0320 	orr.w	r3, r3, #32
 8006ef2:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006ef4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006ef6:	06df      	lsls	r7, r3, #27
 8006ef8:	d503      	bpl.n	8006f02 <HAL_SD_IRQHandler+0x13a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006efa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006efc:	f043 0310 	orr.w	r3, r3, #16
 8006f00:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006f02:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006f04:	059e      	lsls	r6, r3, #22
 8006f06:	d503      	bpl.n	8006f10 <HAL_SD_IRQHandler+0x148>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f0a:	f043 0308 	orr.w	r3, r3, #8
 8006f0e:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006f10:	f240 733a 	movw	r3, #1850	@ 0x73a
 8006f14:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006f16:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006f18:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8006f1c:	f023 0302 	bic.w	r3, r3, #2
 8006f20:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f22:	f001 fa41 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8006f26:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006f28:	0729      	lsls	r1, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f2a:	ea43 0300 	orr.w	r3, r3, r0
 8006f2e:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006f30:	d43d      	bmi.n	8006fae <HAL_SD_IRQHandler+0x1e6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f32:	062a      	lsls	r2, r5, #24
 8006f34:	f57f af6c 	bpl.w	8006e10 <HAL_SD_IRQHandler+0x48>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f38:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8006f3c:	d147      	bne.n	8006fce <HAL_SD_IRQHandler+0x206>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f3e:	f015 0503 	ands.w	r5, r5, #3
 8006f42:	d05b      	beq.n	8006ffc <HAL_SD_IRQHandler+0x234>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f44:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006f46:	4b32      	ldr	r3, [pc, #200]	@ (8007010 <HAL_SD_IRQHandler+0x248>)
 8006f48:	6503      	str	r3, [r0, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f4a:	f7fd f913 	bl	8004174 <HAL_DMA_Abort_IT>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f43f af5e 	beq.w	8006e10 <HAL_SD_IRQHandler+0x48>
          SD_DMARxAbort(hsd->hdmarx);
 8006f54:	6c20      	ldr	r0, [r4, #64]	@ 0x40
}
 8006f56:	b002      	add	sp, #8
 8006f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8006f5c:	f7ff bf12 	b.w	8006d84 <SD_DMATxAbort>
  tmp = hsd->pRxBuffPtr;
 8006f60:	e9d4 570a 	ldrd	r5, r7, [r4, #40]	@ 0x28
  if (dataremaining > 0U)
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	f43f af53 	beq.w	8006e10 <HAL_SD_IRQHandler+0x48>
 8006f6a:	f105 0620 	add.w	r6, r5, #32
 8006f6e:	e000      	b.n	8006f72 <HAL_SD_IRQHandler+0x1aa>
      data = SDIO_ReadFIFO(hsd->Instance);
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	f001 f8ab 	bl	80080cc <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8006f76:	f845 0b04 	str.w	r0, [r5], #4
    for(count = 0U; count < 8U; count++)
 8006f7a:	42b5      	cmp	r5, r6
 8006f7c:	d1f8      	bne.n	8006f70 <HAL_SD_IRQHandler+0x1a8>
      dataremaining--;
 8006f7e:	3f20      	subs	r7, #32
    hsd->RxXferSize = dataremaining;
 8006f80:	e9c4 570a 	strd	r5, r7, [r4, #40]	@ 0x28
 8006f84:	e744      	b.n	8006e10 <HAL_SD_IRQHandler+0x48>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006f86:	6822      	ldr	r2, [r4, #0]
 8006f88:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006f8a:	2101      	movs	r1, #1
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006f8c:	f023 0308 	bic.w	r3, r3, #8
 8006f90:	62d3      	str	r3, [r2, #44]	@ 0x2c
        HAL_SD_TxCpltCallback(hsd);
 8006f92:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8006f94:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006f98:	f001 fb6c 	bl	8008674 <HAL_SD_TxCpltCallback>
}
 8006f9c:	b002      	add	sp, #8
 8006f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fa2:	f001 fa01 	bl	80083a8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	b950      	cbnz	r0, 8006fc0 <HAL_SD_IRQHandler+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006faa:	6820      	ldr	r0, [r4, #0]
 8006fac:	e749      	b.n	8006e42 <HAL_SD_IRQHandler+0x7a>
      hsd->State = HAL_SD_STATE_READY;
 8006fae:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006fb0:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8006fb2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      HAL_SD_ErrorCallback(hsd);
 8006fb6:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8006fb8:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8006fba:	f7ff fc71 	bl	80068a0 <HAL_SD_ErrorCallback>
 8006fbe:	e727      	b.n	8006e10 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8006fc0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006fc2:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 8006fc4:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8006fc6:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006fc8:	f7ff fc6a 	bl	80068a0 <HAL_SD_ErrorCallback>
 8006fcc:	e7ed      	b.n	8006faa <HAL_SD_IRQHandler+0x1e2>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006fce:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006fd0:	4b10      	ldr	r3, [pc, #64]	@ (8007014 <HAL_SD_IRQHandler+0x24c>)
 8006fd2:	6503      	str	r3, [r0, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006fd4:	f7fd f8ce 	bl	8004174 <HAL_DMA_Abort_IT>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	f43f af19 	beq.w	8006e10 <HAL_SD_IRQHandler+0x48>
          SD_DMATxAbort(hsd->hdmatx);
 8006fde:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006fe0:	e7b9      	b.n	8006f56 <HAL_SD_IRQHandler+0x18e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fe2:	f001 f9e1 	bl	80083a8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f43f af0e 	beq.w	8006e0a <HAL_SD_IRQHandler+0x42>
          hsd->ErrorCode |= errorstate;
 8006fee:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006ff0:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 8006ff2:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8006ff4:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006ff6:	f7ff fc53 	bl	80068a0 <HAL_SD_ErrorCallback>
 8006ffa:	e706      	b.n	8006e0a <HAL_SD_IRQHandler+0x42>
        hsd->State = HAL_SD_STATE_READY;
 8006ffc:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ffe:	63a5      	str	r5, [r4, #56]	@ 0x38
        HAL_SD_AbortCallback(hsd);
 8007000:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8007002:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007006:	6325      	str	r5, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007008:	f001 fb30 	bl	800866c <HAL_SD_AbortCallback>
}
 800700c:	e700      	b.n	8006e10 <HAL_SD_IRQHandler+0x48>
 800700e:	bf00      	nop
 8007010:	08007019 	.word	0x08007019
 8007014:	08006d85 	.word	0x08006d85

08007018 <SD_DMARxAbort>:
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
 8007018:	f7ff beb4 	b.w	8006d84 <SD_DMATxAbort>

0800701c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800701c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007020:	2b01      	cmp	r3, #1
 8007022:	d12f      	bne.n	8007084 <HAL_TIM_Base_Start_IT+0x68>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007024:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007026:	4918      	ldr	r1, [pc, #96]	@ (8007088 <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	2202      	movs	r2, #2
 800702a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800702e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007030:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007038:	d019      	beq.n	800706e <HAL_TIM_Base_Start_IT+0x52>
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703e:	d016      	beq.n	800706e <HAL_TIM_Base_Start_IT+0x52>
 8007040:	4a12      	ldr	r2, [pc, #72]	@ (800708c <HAL_TIM_Base_Start_IT+0x70>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d013      	beq.n	800706e <HAL_TIM_Base_Start_IT+0x52>
 8007046:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800704a:	4293      	cmp	r3, r2
 800704c:	d00f      	beq.n	800706e <HAL_TIM_Base_Start_IT+0x52>
 800704e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007052:	4293      	cmp	r3, r2
 8007054:	d00b      	beq.n	800706e <HAL_TIM_Base_Start_IT+0x52>
 8007056:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800705a:	4293      	cmp	r3, r2
 800705c:	d007      	beq.n	800706e <HAL_TIM_Base_Start_IT+0x52>
 800705e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <HAL_TIM_Base_Start_IT+0x52>
 8007066:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800706a:	4293      	cmp	r3, r2
 800706c:	d104      	bne.n	8007078 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007074:	2a06      	cmp	r2, #6
 8007076:	d003      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007080:	2000      	movs	r0, #0
 8007082:	4770      	bx	lr
    return HAL_ERROR;
 8007084:	2001      	movs	r0, #1
}
 8007086:	4770      	bx	lr
 8007088:	40010000 	.word	0x40010000
 800708c:	40000400 	.word	0x40000400

08007090 <HAL_TIM_IC_MspInit>:
/**
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop

08007094 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007094:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d071      	beq.n	8007180 <HAL_TIM_ConfigClockSource+0xec>
 800709c:	4602      	mov	r2, r0
{
 800709e:	b430      	push	{r4, r5}

  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	2302      	movs	r3, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070a2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80070a4:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80070a8:	2001      	movs	r0, #1
 80070aa:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80070ae:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070b4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80070b8:	60a3      	str	r3, [r4, #8]

  switch (sClockSourceConfig->ClockSource)
 80070ba:	680b      	ldr	r3, [r1, #0]
 80070bc:	2b60      	cmp	r3, #96	@ 0x60
 80070be:	d061      	beq.n	8007184 <HAL_TIM_ConfigClockSource+0xf0>
 80070c0:	d824      	bhi.n	800710c <HAL_TIM_ConfigClockSource+0x78>
 80070c2:	2b40      	cmp	r3, #64	@ 0x40
 80070c4:	d077      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x122>
 80070c6:	d94a      	bls.n	800715e <HAL_TIM_ConfigClockSource+0xca>
 80070c8:	2b50      	cmp	r3, #80	@ 0x50
 80070ca:	d117      	bne.n	80070fc <HAL_TIM_ConfigClockSource+0x68>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070cc:	684b      	ldr	r3, [r1, #4]
 80070ce:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d0:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070d2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80070d6:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d8:	6a23      	ldr	r3, [r4, #32]
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e0:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070e6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ea:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80070ec:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070ee:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070f4:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070f8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80070fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80070fc:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80070fe:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007100:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007104:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8007108:	bc30      	pop	{r4, r5}
 800710a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007110:	d0f3      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x66>
 8007112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007116:	d110      	bne.n	800713a <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007118:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800711c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800711e:	432b      	orrs	r3, r5
 8007120:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007122:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007126:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800712a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800712e:	68a3      	ldr	r3, [r4, #8]
 8007130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007134:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007136:	2000      	movs	r0, #0
 8007138:	e7e0      	b.n	80070fc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800713a:	2b70      	cmp	r3, #112	@ 0x70
 800713c:	d1de      	bne.n	80070fc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800713e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007142:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007144:	432b      	orrs	r3, r5
 8007146:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007148:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800714c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007150:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007152:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007154:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007156:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800715a:	60a3      	str	r3, [r4, #8]
      break;
 800715c:	e7cd      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800715e:	2b20      	cmp	r3, #32
 8007160:	d002      	beq.n	8007168 <HAL_TIM_ConfigClockSource+0xd4>
 8007162:	d909      	bls.n	8007178 <HAL_TIM_ConfigClockSource+0xe4>
 8007164:	2b30      	cmp	r3, #48	@ 0x30
 8007166:	d1c9      	bne.n	80070fc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8007168:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800716a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800716e:	430b      	orrs	r3, r1
 8007170:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8007174:	60a3      	str	r3, [r4, #8]
}
 8007176:	e7c0      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007178:	f033 0110 	bics.w	r1, r3, #16
 800717c:	d1be      	bne.n	80070fc <HAL_TIM_ConfigClockSource+0x68>
 800717e:	e7f3      	b.n	8007168 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8007180:	2002      	movs	r0, #2
}
 8007182:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007184:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007186:	6848      	ldr	r0, [r1, #4]
 8007188:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007190:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8007192:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007194:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007198:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800719c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071a0:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80071a4:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80071a6:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80071a8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80071aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071ae:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80071b2:	60a3      	str	r3, [r4, #8]
}
 80071b4:	e7a1      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b6:	684b      	ldr	r3, [r1, #4]
 80071b8:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80071ba:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071bc:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80071c0:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071c2:	6a23      	ldr	r3, [r4, #32]
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ca:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071d0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80071d4:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80071d6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80071d8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80071da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071de:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80071e2:	60a3      	str	r3, [r4, #8]
}
 80071e4:	e789      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x66>
 80071e6:	bf00      	nop

080071e8 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop

080071ec <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop

080071f4 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop

080071f8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071f8:	6803      	ldr	r3, [r0, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	0791      	lsls	r1, r2, #30
{
 80071fe:	b510      	push	{r4, lr}
 8007200:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007202:	d502      	bpl.n	800720a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	0792      	lsls	r2, r2, #30
 8007208:	d45f      	bmi.n	80072ca <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	0750      	lsls	r0, r2, #29
 800720e:	d502      	bpl.n	8007216 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	0751      	lsls	r1, r2, #29
 8007214:	d446      	bmi.n	80072a4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	0712      	lsls	r2, r2, #28
 800721a:	d502      	bpl.n	8007222 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	0710      	lsls	r0, r2, #28
 8007220:	d42e      	bmi.n	8007280 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	06d2      	lsls	r2, r2, #27
 8007226:	d502      	bpl.n	800722e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	06d0      	lsls	r0, r2, #27
 800722c:	d418      	bmi.n	8007260 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	07d1      	lsls	r1, r2, #31
 8007232:	d502      	bpl.n	800723a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	07d2      	lsls	r2, r2, #31
 8007238:	d45d      	bmi.n	80072f6 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	0610      	lsls	r0, r2, #24
 800723e:	d502      	bpl.n	8007246 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	0611      	lsls	r1, r2, #24
 8007244:	d45f      	bmi.n	8007306 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	0652      	lsls	r2, r2, #25
 800724a:	d502      	bpl.n	8007252 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	0650      	lsls	r0, r2, #25
 8007250:	d461      	bmi.n	8007316 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	0691      	lsls	r1, r2, #26
 8007256:	d502      	bpl.n	800725e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	0692      	lsls	r2, r2, #26
 800725c:	d443      	bmi.n	80072e6 <HAL_TIM_IRQHandler+0xee>
}
 800725e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007260:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007264:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007266:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007268:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007270:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007272:	d064      	beq.n	800733e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007274:	f7ff ffba 	bl	80071ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007278:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800727a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727c:	7722      	strb	r2, [r4, #28]
 800727e:	e7d6      	b.n	800722e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007280:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007284:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007286:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007288:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800728e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007290:	d152      	bne.n	8007338 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007292:	f7ff ffa9 	bl	80071e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007296:	4620      	mov	r0, r4
 8007298:	f7ff ffaa 	bl	80071f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800729e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a0:	7722      	strb	r2, [r4, #28]
 80072a2:	e7be      	b.n	8007222 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072a4:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072a8:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072aa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80072b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072b6:	d13c      	bne.n	8007332 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b8:	f7ff ff96 	bl	80071e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	4620      	mov	r0, r4
 80072be:	f7ff ff97 	bl	80071f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072c4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c6:	7722      	strb	r2, [r4, #28]
 80072c8:	e7a5      	b.n	8007216 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072ca:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ce:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072d0:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072d2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	079b      	lsls	r3, r3, #30
 80072d8:	d025      	beq.n	8007326 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80072da:	f7ff ff87 	bl	80071ec <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072e0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e2:	7722      	strb	r2, [r4, #28]
 80072e4:	e791      	b.n	800720a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072e6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80072ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072ec:	611a      	str	r2, [r3, #16]
}
 80072ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80072f2:	f000 ba0f 	b.w	8007714 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072f6:	f06f 0201 	mvn.w	r2, #1
 80072fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80072fc:	4620      	mov	r0, r4
 80072fe:	f7fb fb5b 	bl	80029b8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	e799      	b.n	800723a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007306:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800730a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800730c:	4620      	mov	r0, r4
 800730e:	f000 fa03 	bl	8007718 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	e797      	b.n	8007246 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007316:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800731a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800731c:	4620      	mov	r0, r4
 800731e:	f7ff ff69 	bl	80071f4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	e795      	b.n	8007252 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	f7ff ff5f 	bl	80071e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732a:	4620      	mov	r0, r4
 800732c:	f7ff ff60 	bl	80071f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8007330:	e7d5      	b.n	80072de <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	f7ff ff5b 	bl	80071ec <HAL_TIM_IC_CaptureCallback>
 8007336:	e7c4      	b.n	80072c2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8007338:	f7ff ff58 	bl	80071ec <HAL_TIM_IC_CaptureCallback>
 800733c:	e7ae      	b.n	800729c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733e:	f7ff ff53 	bl	80071e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007342:	4620      	mov	r0, r4
 8007344:	f7ff ff54 	bl	80071f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8007348:	e796      	b.n	8007278 <HAL_TIM_IRQHandler+0x80>
 800734a:	bf00      	nop

0800734c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800734c:	4a35      	ldr	r2, [pc, #212]	@ (8007424 <TIM_Base_SetConfig+0xd8>)
  tmpcr1 = TIMx->CR1;
 800734e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007350:	4290      	cmp	r0, r2
{
 8007352:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007354:	d04d      	beq.n	80073f2 <TIM_Base_SetConfig+0xa6>
 8007356:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800735a:	d034      	beq.n	80073c6 <TIM_Base_SetConfig+0x7a>
 800735c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007360:	4290      	cmp	r0, r2
 8007362:	d030      	beq.n	80073c6 <TIM_Base_SetConfig+0x7a>
 8007364:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007368:	4290      	cmp	r0, r2
 800736a:	d02c      	beq.n	80073c6 <TIM_Base_SetConfig+0x7a>
 800736c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007370:	4290      	cmp	r0, r2
 8007372:	d028      	beq.n	80073c6 <TIM_Base_SetConfig+0x7a>
 8007374:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007378:	4290      	cmp	r0, r2
 800737a:	d03a      	beq.n	80073f2 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800737c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007380:	4290      	cmp	r0, r2
 8007382:	d024      	beq.n	80073ce <TIM_Base_SetConfig+0x82>
 8007384:	4a28      	ldr	r2, [pc, #160]	@ (8007428 <TIM_Base_SetConfig+0xdc>)
 8007386:	4290      	cmp	r0, r2
 8007388:	d021      	beq.n	80073ce <TIM_Base_SetConfig+0x82>
 800738a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800738e:	4290      	cmp	r0, r2
 8007390:	d01d      	beq.n	80073ce <TIM_Base_SetConfig+0x82>
 8007392:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8007396:	4290      	cmp	r0, r2
 8007398:	d019      	beq.n	80073ce <TIM_Base_SetConfig+0x82>
 800739a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800739e:	4290      	cmp	r0, r2
 80073a0:	d015      	beq.n	80073ce <TIM_Base_SetConfig+0x82>
 80073a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073a6:	4290      	cmp	r0, r2
 80073a8:	d011      	beq.n	80073ce <TIM_Base_SetConfig+0x82>
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073aa:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80073ac:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073ae:	6949      	ldr	r1, [r1, #20]
 80073b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80073b6:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80073b8:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073ba:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80073bc:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80073be:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 80073c2:	6143      	str	r3, [r0, #20]
}
 80073c4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80073c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80073cc:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ce:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d0:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80073d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073d6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073dc:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073de:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80073e0:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80073e2:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80073e4:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e6:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80073e8:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80073ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 80073ee:	6143      	str	r3, [r0, #20]
}
 80073f0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80073f2:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073f4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80073fa:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80073fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007400:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007402:	694a      	ldr	r2, [r1, #20]
}
 8007404:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800740c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800740e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007410:	688b      	ldr	r3, [r1, #8]
 8007412:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007414:	680b      	ldr	r3, [r1, #0]
 8007416:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007418:	690b      	ldr	r3, [r1, #16]
 800741a:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800741c:	2301      	movs	r3, #1
 800741e:	6143      	str	r3, [r0, #20]
}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40010000 	.word	0x40010000
 8007428:	40014400 	.word	0x40014400

0800742c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800742c:	b350      	cbz	r0, 8007484 <HAL_TIM_Base_Init+0x58>
{
 800742e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007430:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007434:	4604      	mov	r4, r0
 8007436:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800743a:	b1f3      	cbz	r3, 800747a <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800743c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800743e:	2302      	movs	r3, #2
 8007440:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007444:	f851 0b04 	ldr.w	r0, [r1], #4
 8007448:	f7ff ff80 	bl	800734c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800744c:	2301      	movs	r3, #1
 800744e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007452:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007456:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800745a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800745e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007462:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800746a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800746e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007472:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007476:	2000      	movs	r0, #0
}
 8007478:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800747a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800747e:	f7fb fb6b 	bl	8002b58 <HAL_TIM_Base_MspInit>
 8007482:	e7db      	b.n	800743c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8007484:	2001      	movs	r0, #1
}
 8007486:	4770      	bx	lr

08007488 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8007488:	b350      	cbz	r0, 80074e0 <HAL_TIM_IC_Init+0x58>
{
 800748a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800748c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007490:	4604      	mov	r4, r0
 8007492:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007496:	b1f3      	cbz	r3, 80074d6 <HAL_TIM_IC_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007498:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800749a:	2302      	movs	r3, #2
 800749c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a0:	f851 0b04 	ldr.w	r0, [r1], #4
 80074a4:	f7ff ff52 	bl	800734c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a8:	2301      	movs	r3, #1
 80074aa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80074b2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80074b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80074ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80074ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80074ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80074d2:	2000      	movs	r0, #0
}
 80074d4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80074d6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 80074da:	f7ff fdd9 	bl	8007090 <HAL_TIM_IC_MspInit>
 80074de:	e7db      	b.n	8007498 <HAL_TIM_IC_Init+0x10>
    return HAL_ERROR;
 80074e0:	2001      	movs	r0, #1
}
 80074e2:	4770      	bx	lr

080074e4 <TIM_TI1_SetConfig>:
{
 80074e4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074e6:	6a04      	ldr	r4, [r0, #32]
 80074e8:	f024 0401 	bic.w	r4, r4, #1
 80074ec:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074ee:	4c1b      	ldr	r4, [pc, #108]	@ (800755c <TIM_TI1_SetConfig+0x78>)
  tmpccmr1 = TIMx->CCMR1;
 80074f0:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80074f2:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074f4:	42a0      	cmp	r0, r4
{
 80074f6:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074f8:	d01c      	beq.n	8007534 <TIM_TI1_SetConfig+0x50>
 80074fa:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80074fe:	d019      	beq.n	8007534 <TIM_TI1_SetConfig+0x50>
 8007500:	4a17      	ldr	r2, [pc, #92]	@ (8007560 <TIM_TI1_SetConfig+0x7c>)
 8007502:	4290      	cmp	r0, r2
 8007504:	d016      	beq.n	8007534 <TIM_TI1_SetConfig+0x50>
 8007506:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800750a:	4290      	cmp	r0, r2
 800750c:	d012      	beq.n	8007534 <TIM_TI1_SetConfig+0x50>
 800750e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007512:	4290      	cmp	r0, r2
 8007514:	d00e      	beq.n	8007534 <TIM_TI1_SetConfig+0x50>
 8007516:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800751a:	4290      	cmp	r0, r2
 800751c:	d00a      	beq.n	8007534 <TIM_TI1_SetConfig+0x50>
 800751e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007522:	4290      	cmp	r0, r2
 8007524:	d006      	beq.n	8007534 <TIM_TI1_SetConfig+0x50>
 8007526:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800752a:	4290      	cmp	r0, r2
 800752c:	d002      	beq.n	8007534 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800752e:	f045 0201 	orr.w	r2, r5, #1
 8007532:	e003      	b.n	800753c <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007534:	f025 0203 	bic.w	r2, r5, #3
    tmpccmr1 |= TIM_ICSelection;
 8007538:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800753c:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800753e:	f026 0c0a 	bic.w	ip, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007542:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007546:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007548:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800754c:	4313      	orrs	r3, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800754e:	ea41 010c 	orr.w	r1, r1, ip
  TIMx->CCMR1 = tmpccmr1;
 8007552:	6183      	str	r3, [r0, #24]
}
 8007554:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8007556:	6201      	str	r1, [r0, #32]
}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40010000 	.word	0x40010000
 8007560:	40000400 	.word	0x40000400

08007564 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8007564:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007568:	2b01      	cmp	r3, #1
 800756a:	d048      	beq.n	80075fe <HAL_TIM_IC_ConfigChannel+0x9a>
{
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007570:	2001      	movs	r0, #1
 8007572:	460d      	mov	r5, r1
 8007574:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8007578:	b14a      	cbz	r2, 800758e <HAL_TIM_IC_ConfigChannel+0x2a>
  else if (Channel == TIM_CHANNEL_2)
 800757a:	2a04      	cmp	r2, #4
 800757c:	d01a      	beq.n	80075b4 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 800757e:	2a08      	cmp	r2, #8
 8007580:	d03f      	beq.n	8007602 <HAL_TIM_IC_ConfigChannel+0x9e>
  else if (Channel == TIM_CHANNEL_4)
 8007582:	2a0c      	cmp	r2, #12
 8007584:	d060      	beq.n	8007648 <HAL_TIM_IC_ConfigChannel+0xe4>
  __HAL_UNLOCK(htim);
 8007586:	2300      	movs	r3, #0
 8007588:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800758c:	bd70      	pop	{r4, r5, r6, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800758e:	6820      	ldr	r0, [r4, #0]
 8007590:	68cb      	ldr	r3, [r1, #12]
 8007592:	e9d1 1200 	ldrd	r1, r2, [r1]
 8007596:	f7ff ffa5 	bl	80074e4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800759a:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800759c:	68aa      	ldr	r2, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800759e:	f023 030c 	bic.w	r3, r3, #12
 80075a2:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80075a4:	6983      	ldr	r3, [r0, #24]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80075aa:	2300      	movs	r3, #0
 80075ac:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80075b0:	2000      	movs	r0, #0
}
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
    TIM_TI2_SetConfig(htim->Instance,
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	e9d1 2600 	ldrd	r2, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ba:	6a19      	ldr	r1, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075bc:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075be:	f021 0110 	bic.w	r1, r1, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075c2:	f002 00a0 	and.w	r0, r2, #160	@ 0xa0
    TIM_TI2_SetConfig(htim->Instance,
 80075c6:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c8:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ca:	6999      	ldr	r1, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80075cc:	68ad      	ldr	r5, [r5, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075ce:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075d2:	0312      	lsls	r2, r2, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075d4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075d8:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075dc:	b292      	uxth	r2, r2
 80075de:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80075e0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80075e2:	619a      	str	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075e4:	f021 02a0 	bic.w	r2, r1, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075e8:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80075ea:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80075f2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80075fa:	619a      	str	r2, [r3, #24]
 80075fc:	e7d5      	b.n	80075aa <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 80075fe:	2002      	movs	r0, #2
}
 8007600:	4770      	bx	lr
    TIM_TI3_SetConfig(htim->Instance,
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	e9d1 2100 	ldrd	r2, r1, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007608:	6a1e      	ldr	r6, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800760a:	0212      	lsls	r2, r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800760c:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007610:	f402 6020 	and.w	r0, r2, #2560	@ 0xa00
    TIM_TI3_SetConfig(htim->Instance,
 8007614:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007616:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007618:	69de      	ldr	r6, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800761a:	68ad      	ldr	r5, [r5, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800761c:	f026 0603 	bic.w	r6, r6, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007620:	0112      	lsls	r2, r2, #4
  tmpccmr2 |= TIM_ICSelection;
 8007622:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007624:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 800762c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 800762e:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007630:	f421 6220 	bic.w	r2, r1, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007634:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8007636:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	f022 020c 	bic.w	r2, r2, #12
 800763e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007640:	69da      	ldr	r2, [r3, #28]
 8007642:	432a      	orrs	r2, r5
 8007644:	61da      	str	r2, [r3, #28]
 8007646:	e7b0      	b.n	80075aa <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI4_SetConfig(htim->Instance,
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	e9d1 2600 	ldrd	r2, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800764e:	6a19      	ldr	r1, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007650:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007652:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007656:	f402 4020 	and.w	r0, r2, #40960	@ 0xa000
    TIM_TI4_SetConfig(htim->Instance,
 800765a:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800765c:	6219      	str	r1, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800765e:	69d9      	ldr	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007660:	68ad      	ldr	r5, [r5, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007662:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007666:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007668:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800766c:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007670:	b292      	uxth	r2, r2
 8007672:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8007674:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 8007676:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007678:	f421 4220 	bic.w	r2, r1, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800767c:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer ;
 800767e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007686:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007688:	69da      	ldr	r2, [r3, #28]
 800768a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800768e:	61da      	str	r2, [r3, #28]
 8007690:	e78b      	b.n	80075aa <HAL_TIM_IC_ConfigChannel+0x46>
 8007692:	bf00      	nop

08007694 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007694:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8007698:	2a01      	cmp	r2, #1
 800769a:	d037      	beq.n	800770c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800769c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800769e:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	2002      	movs	r0, #2
{
 80076a2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80076a8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076aa:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80076ac:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ae:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076b2:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076b4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b6:	4816      	ldr	r0, [pc, #88]	@ (8007710 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80076b8:	4282      	cmp	r2, r0
 80076ba:	d01a      	beq.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80076bc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80076c0:	d017      	beq.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80076c2:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80076c6:	4282      	cmp	r2, r0
 80076c8:	d013      	beq.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80076ca:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80076ce:	4282      	cmp	r2, r0
 80076d0:	d00f      	beq.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80076d2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80076d6:	4282      	cmp	r2, r0
 80076d8:	d00b      	beq.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80076da:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80076de:	4282      	cmp	r2, r0
 80076e0:	d007      	beq.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80076e2:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80076e6:	4282      	cmp	r2, r0
 80076e8:	d003      	beq.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80076ea:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80076ee:	4282      	cmp	r2, r0
 80076f0:	d104      	bne.n	80076fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076f2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076f4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076f8:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076fa:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80076fc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007704:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8007708:	bc30      	pop	{r4, r5}
 800770a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800770c:	2002      	movs	r0, #2
}
 800770e:	4770      	bx	lr
 8007710:	40010000 	.word	0x40010000

08007714 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop

08007718 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop

0800771c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800771c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	f102 030c 	add.w	r3, r2, #12
 8007722:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007726:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	f102 0c0c 	add.w	ip, r2, #12
 800772e:	e84c 3100 	strex	r1, r3, [ip]
 8007732:	2900      	cmp	r1, #0
 8007734:	d1f3      	bne.n	800771e <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	f102 0314 	add.w	r3, r2, #20
 800773a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	f102 0c14 	add.w	ip, r2, #20
 8007746:	e84c 3100 	strex	r1, r3, [ip]
 800774a:	2900      	cmp	r1, #0
 800774c:	d1f3      	bne.n	8007736 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007750:	2b01      	cmp	r3, #1
 8007752:	d005      	beq.n	8007760 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007754:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007756:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007758:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800775e:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	f102 030c 	add.w	r3, r2, #12
 8007764:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	f102 0c0c 	add.w	ip, r2, #12
 8007770:	e84c 3100 	strex	r1, r3, [ip]
 8007774:	2900      	cmp	r1, #0
 8007776:	d1f3      	bne.n	8007760 <UART_EndRxTransfer+0x44>
 8007778:	e7ec      	b.n	8007754 <UART_EndRxTransfer+0x38>
 800777a:	bf00      	nop

0800777c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800777c:	6802      	ldr	r2, [r0, #0]
 800777e:	6911      	ldr	r1, [r2, #16]
{
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007784:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007786:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007788:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800778c:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800778e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007790:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007792:	4303      	orrs	r3, r0
 8007794:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007796:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007798:	4303      	orrs	r3, r0
 800779a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800779c:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 80077a0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077a4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80077a6:	430b      	orrs	r3, r1
 80077a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077aa:	6953      	ldr	r3, [r2, #20]
 80077ac:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077ae:	4923      	ldr	r1, [pc, #140]	@ (800783c <UART_SetConfig+0xc0>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b4:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077b6:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077ba:	d005      	beq.n	80077c8 <UART_SetConfig+0x4c>
 80077bc:	4b20      	ldr	r3, [pc, #128]	@ (8007840 <UART_SetConfig+0xc4>)
 80077be:	429a      	cmp	r2, r3
 80077c0:	d002      	beq.n	80077c8 <UART_SetConfig+0x4c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077c2:	f7fe fc65 	bl	8006090 <HAL_RCC_GetPCLK1Freq>
 80077c6:	e001      	b.n	80077cc <UART_SetConfig+0x50>
      pclk = HAL_RCC_GetPCLK2Freq();
 80077c8:	f7fe fc72 	bl	80060b0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077cc:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077ce:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077d0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077d4:	e9d4 5300 	ldrd	r5, r3, [r4]
 80077d8:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077dc:	d013      	beq.n	8007806 <UART_SetConfig+0x8a>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077de:	009a      	lsls	r2, r3, #2
 80077e0:	0f9b      	lsrs	r3, r3, #30
 80077e2:	f7f9 f9e3 	bl	8000bac <__aeabi_uldivmod>
 80077e6:	4a17      	ldr	r2, [pc, #92]	@ (8007844 <UART_SetConfig+0xc8>)
 80077e8:	fba2 1300 	umull	r1, r3, r2, r0
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	2164      	movs	r1, #100	@ 0x64
 80077f0:	fb01 0013 	mls	r0, r1, r3, r0
 80077f4:	0100      	lsls	r0, r0, #4
 80077f6:	3032      	adds	r0, #50	@ 0x32
 80077f8:	fba2 2000 	umull	r2, r0, r2, r0
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8007802:	60ab      	str	r3, [r5, #8]
  }
}
 8007804:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007806:	18da      	adds	r2, r3, r3
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	415b      	adcs	r3, r3
 800780e:	f7f9 f9cd 	bl	8000bac <__aeabi_uldivmod>
 8007812:	4a0c      	ldr	r2, [pc, #48]	@ (8007844 <UART_SetConfig+0xc8>)
 8007814:	fba2 3100 	umull	r3, r1, r2, r0
 8007818:	0949      	lsrs	r1, r1, #5
 800781a:	2364      	movs	r3, #100	@ 0x64
 800781c:	fb03 0311 	mls	r3, r3, r1, r0
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	3332      	adds	r3, #50	@ 0x32
 8007824:	fba2 2303 	umull	r2, r3, r2, r3
 8007828:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007832:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007836:	4413      	add	r3, r2
 8007838:	60ab      	str	r3, [r5, #8]
}
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	40011000 	.word	0x40011000
 8007840:	40011400 	.word	0x40011400
 8007844:	51eb851f 	.word	0x51eb851f

08007848 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	4680      	mov	r8, r0
 800784e:	460f      	mov	r7, r1
 8007850:	4691      	mov	r9, r2
 8007852:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007854:	f8d8 5000 	ldr.w	r5, [r8]
 8007858:	e001      	b.n	800785e <UART_WaitOnFlagUntilTimeout.constprop.0+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800785a:	1c73      	adds	r3, r6, #1
 800785c:	d106      	bne.n	800786c <UART_WaitOnFlagUntilTimeout.constprop.0+0x24>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785e:	682c      	ldr	r4, [r5, #0]
 8007860:	ea37 0404 	bics.w	r4, r7, r4
 8007864:	d1f9      	bne.n	800785a <UART_WaitOnFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 8007866:	2000      	movs	r0, #0
}
 8007868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800786c:	b13e      	cbz	r6, 800787e <UART_WaitOnFlagUntilTimeout.constprop.0+0x36>
 800786e:	f7fb fca7 	bl	80031c0 <HAL_GetTick>
 8007872:	eba0 0009 	sub.w	r0, r0, r9
 8007876:	4286      	cmp	r6, r0
 8007878:	d2ec      	bcs.n	8007854 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800787a:	f8d8 5000 	ldr.w	r5, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	f105 030c 	add.w	r3, r5, #12
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	f105 010c 	add.w	r1, r5, #12
 800788e:	e841 3200 	strex	r2, r3, [r1]
 8007892:	2a00      	cmp	r2, #0
 8007894:	d1f3      	bne.n	800787e <UART_WaitOnFlagUntilTimeout.constprop.0+0x36>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	f105 0314 	add.w	r3, r5, #20
 800789a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	f105 0114 	add.w	r1, r5, #20
 80078a6:	e841 3200 	strex	r2, r3, [r1]
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	d1f3      	bne.n	8007896 <UART_WaitOnFlagUntilTimeout.constprop.0+0x4e>
        huart->gState  = HAL_UART_STATE_READY;
 80078ae:	2320      	movs	r3, #32
 80078b0:	f888 303d 	strb.w	r3, [r8, #61]	@ 0x3d
        __HAL_UNLOCK(huart);
 80078b4:	f888 203c 	strb.w	r2, [r8, #60]	@ 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80078b8:	f888 303e 	strb.w	r3, [r8, #62]	@ 0x3e
        __HAL_UNLOCK(huart);
 80078bc:	2003      	movs	r0, #3
 80078be:	e7d3      	b.n	8007868 <UART_WaitOnFlagUntilTimeout.constprop.0+0x20>

080078c0 <HAL_UART_Init>:
  if (huart == NULL)
 80078c0:	b360      	cbz	r0, 800791c <HAL_UART_Init+0x5c>
{
 80078c2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80078c4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80078c8:	4604      	mov	r4, r0
 80078ca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80078ce:	b303      	cbz	r3, 8007912 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80078d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80078d2:	2324      	movs	r3, #36	@ 0x24
 80078d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 80078d8:	68d3      	ldr	r3, [r2, #12]
 80078da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  UART_SetConfig(huart);
 80078de:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80078e0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80078e2:	f7ff ff4b 	bl	800777c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f0:	695a      	ldr	r2, [r3, #20]
 80078f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078f6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80078f8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fa:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80078fc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80078fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007902:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007904:	6425      	str	r5, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007906:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800790a:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  return HAL_OK;
 800790e:	4628      	mov	r0, r5
}
 8007910:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8007912:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8007916:	f7fb fa77 	bl	8002e08 <HAL_UART_MspInit>
 800791a:	e7d9      	b.n	80078d0 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800791c:	2001      	movs	r0, #1
}
 800791e:	4770      	bx	lr

08007920 <HAL_UART_Transmit>:
{
 8007920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007924:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007926:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 800792a:	2820      	cmp	r0, #32
 800792c:	d145      	bne.n	80079ba <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 800792e:	460d      	mov	r5, r1
 8007930:	2900      	cmp	r1, #0
 8007932:	d03f      	beq.n	80079b4 <HAL_UART_Transmit+0x94>
 8007934:	4617      	mov	r7, r2
 8007936:	2a00      	cmp	r2, #0
 8007938:	d03c      	beq.n	80079b4 <HAL_UART_Transmit+0x94>
 800793a:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800793c:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d03a      	beq.n	80079ba <HAL_UART_Transmit+0x9a>
 8007944:	2301      	movs	r3, #1
 8007946:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794a:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800794e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007954:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    tickstart = HAL_GetTick();
 8007958:	f7fb fc32 	bl	80031c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800795c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800795e:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8007964:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 8007966:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007968:	d02a      	beq.n	80079c0 <HAL_UART_Transmit+0xa0>
    while (huart->TxXferCount > 0U)
 800796a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
    __HAL_UNLOCK(huart);
 800796c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800796e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8007970:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    while (huart->TxXferCount > 0U)
 8007974:	b973      	cbnz	r3, 8007994 <HAL_UART_Transmit+0x74>
 8007976:	e02c      	b.n	80079d2 <HAL_UART_Transmit+0xb2>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007978:	f815 2b01 	ldrb.w	r2, [r5], #1
 800797c:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 800797e:	f8b4 c026 	ldrh.w	ip, [r4, #38]	@ 0x26
 8007982:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007986:	fa1f fc8c 	uxth.w	ip, ip
 800798a:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800798e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007990:	b29b      	uxth	r3, r3
 8007992:	b1f3      	cbz	r3, 80079d2 <HAL_UART_Transmit+0xb2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007994:	4633      	mov	r3, r6
 8007996:	463a      	mov	r2, r7
 8007998:	2180      	movs	r1, #128	@ 0x80
 800799a:	4620      	mov	r0, r4
 800799c:	f7ff ff54 	bl	8007848 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80079a0:	b9a0      	cbnz	r0, 80079cc <HAL_UART_Transmit+0xac>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079a2:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80079a4:	2d00      	cmp	r5, #0
 80079a6:	d1e7      	bne.n	8007978 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079a8:	f838 2b02 	ldrh.w	r2, [r8], #2
 80079ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079b2:	e7e4      	b.n	800797e <HAL_UART_Transmit+0x5e>
      return  HAL_ERROR;
 80079b4:	2001      	movs	r0, #1
}
 80079b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(huart);
 80079ba:	2002      	movs	r0, #2
}
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1d1      	bne.n	800796a <HAL_UART_Transmit+0x4a>
 80079c6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80079c8:	461d      	mov	r5, r3
 80079ca:	e7ce      	b.n	800796a <HAL_UART_Transmit+0x4a>
        return HAL_TIMEOUT;
 80079cc:	2003      	movs	r0, #3
}
 80079ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079d2:	4633      	mov	r3, r6
 80079d4:	463a      	mov	r2, r7
 80079d6:	2140      	movs	r1, #64	@ 0x40
 80079d8:	4620      	mov	r0, r4
 80079da:	f7ff ff35 	bl	8007848 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d1f4      	bne.n	80079cc <HAL_UART_Transmit+0xac>
    huart->gState = HAL_UART_STATE_READY;
 80079e2:	2320      	movs	r3, #32
 80079e4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_OK;
 80079e8:	e7e5      	b.n	80079b6 <HAL_UART_Transmit+0x96>
 80079ea:	bf00      	nop

080079ec <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80079ec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d11b      	bne.n	8007a2c <HAL_UART_Transmit_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 80079f4:	b1c1      	cbz	r1, 8007a28 <HAL_UART_Transmit_IT+0x3c>
 80079f6:	b1ba      	cbz	r2, 8007a28 <HAL_UART_Transmit_IT+0x3c>
    __HAL_LOCK(huart);
 80079f8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d015      	beq.n	8007a2c <HAL_UART_Transmit_IT+0x40>
{
 8007a00:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a02:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a04:	2421      	movs	r4, #33	@ 0x21
    huart->TxXferCount = Size;
 8007a06:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a08:	6403      	str	r3, [r0, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a0a:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007a0e:	6804      	ldr	r4, [r0, #0]
    __HAL_UNLOCK(huart);
 8007a10:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->TxXferSize = Size;
 8007a14:	8482      	strh	r2, [r0, #36]	@ 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007a16:	68e2      	ldr	r2, [r4, #12]
    huart->pTxBuffPtr = pData;
 8007a18:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007a1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
    return HAL_OK;
 8007a1e:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007a20:	60e2      	str	r2, [r4, #12]
}
 8007a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a26:	4770      	bx	lr
      return HAL_ERROR;
 8007a28:	2001      	movs	r0, #1
 8007a2a:	4770      	bx	lr
    __HAL_LOCK(huart);
 8007a2c:	2002      	movs	r0, #2
}
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a30:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d126      	bne.n	8007a86 <HAL_UART_Receive_IT+0x56>
    if ((pData == NULL) || (Size == 0U))
 8007a38:	b319      	cbz	r1, 8007a82 <HAL_UART_Receive_IT+0x52>
 8007a3a:	b312      	cbz	r2, 8007a82 <HAL_UART_Receive_IT+0x52>
    __HAL_LOCK(huart);
 8007a3c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d020      	beq.n	8007a86 <HAL_UART_Receive_IT+0x56>
{
 8007a44:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a46:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 8007a48:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a4c:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4e:	6303      	str	r3, [r0, #48]	@ 0x30
  __HAL_UNLOCK(huart);
 8007a50:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  huart->RxXferCount = Size;
 8007a54:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->RxXferSize = Size;
 8007a56:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a58:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a5a:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a5c:	f880 103e 	strb.w	r1, [r0, #62]	@ 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a60:	b11c      	cbz	r4, 8007a6a <HAL_UART_Receive_IT+0x3a>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a68:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a6a:	695a      	ldr	r2, [r3, #20]
}
 8007a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a7c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a7e:	60da      	str	r2, [r3, #12]
}
 8007a80:	4770      	bx	lr
      return HAL_ERROR;
 8007a82:	2001      	movs	r0, #1
 8007a84:	4770      	bx	lr
    __HAL_LOCK(huart);
 8007a86:	2002      	movs	r0, #2
}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop

08007a8c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop

08007a90 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop

08007a98 <UART_DMAError>:
{
 8007a98:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a9c:	6802      	ldr	r2, [r0, #0]
 8007a9e:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007aa0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007aa4:	2b21      	cmp	r3, #33	@ 0x21
 8007aa6:	d00b      	beq.n	8007ac0 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa8:	6952      	ldr	r2, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007aaa:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007aae:	2b22      	cmp	r3, #34	@ 0x22
 8007ab0:	d01e      	beq.n	8007af0 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ab2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007ab4:	f043 0310 	orr.w	r3, r3, #16
 8007ab8:	6403      	str	r3, [r0, #64]	@ 0x40
  HAL_UART_ErrorCallback(huart);
 8007aba:	f7ff ffeb 	bl	8007a94 <HAL_UART_ErrorCallback>
}
 8007abe:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ac0:	0609      	lsls	r1, r1, #24
 8007ac2:	d5f1      	bpl.n	8007aa8 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	84c3      	strh	r3, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	f102 030c 	add.w	r3, r2, #12
 8007acc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ad0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	f102 0c0c 	add.w	ip, r2, #12
 8007ad8:	e84c 3100 	strex	r1, r3, [ip]
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d1f3      	bne.n	8007ac8 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae6:	6952      	ldr	r2, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ae8:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007aec:	2b22      	cmp	r3, #34	@ 0x22
 8007aee:	d1e0      	bne.n	8007ab2 <UART_DMAError+0x1a>
 8007af0:	0653      	lsls	r3, r2, #25
 8007af2:	d5de      	bpl.n	8007ab2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007af8:	f7ff fe10 	bl	800771c <UART_EndRxTransfer>
 8007afc:	e7d9      	b.n	8007ab2 <UART_DMAError+0x1a>
 8007afe:	bf00      	nop

08007b00 <UART_DMAAbortOnError>:
{
 8007b00:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b02:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007b08:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8007b0a:	f7ff ffc3 	bl	8007a94 <HAL_UART_ErrorCallback>
}
 8007b0e:	bd08      	pop	{r3, pc}

08007b10 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b10:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8007b12:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d002      	beq.n	8007b20 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b1a:	f7ff ffb9 	bl	8007a90 <HAL_UART_RxHalfCpltCallback>
}
 8007b1e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b20:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8007b22:	0849      	lsrs	r1, r1, #1
 8007b24:	f7fb fa00 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
}
 8007b28:	bd08      	pop	{r3, pc}
 8007b2a:	bf00      	nop

08007b2c <UART_DMAReceiveCplt>:
{
 8007b2c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b2e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b30:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8007b38:	d12b      	bne.n	8007b92 <UART_DMAReceiveCplt+0x66>
    huart->RxXferCount = 0U;
 8007b3a:	6803      	ldr	r3, [r0, #0]
 8007b3c:	85c2      	strh	r2, [r0, #46]	@ 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	f103 020c 	add.w	r2, r3, #12
 8007b42:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	f103 0c0c 	add.w	ip, r3, #12
 8007b4e:	e84c 2100 	strex	r1, r2, [ip]
 8007b52:	2900      	cmp	r1, #0
 8007b54:	d1f3      	bne.n	8007b3e <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	f103 0214 	add.w	r2, r3, #20
 8007b5a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	f103 0c14 	add.w	ip, r3, #20
 8007b66:	e84c 2100 	strex	r1, r2, [ip]
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	d1f3      	bne.n	8007b56 <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	f103 0214 	add.w	r2, r3, #20
 8007b72:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	f103 0c14 	add.w	ip, r3, #20
 8007b7e:	e84c 2100 	strex	r1, r2, [ip]
 8007b82:	2900      	cmp	r1, #0
 8007b84:	d1f3      	bne.n	8007b6e <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 8007b86:	2220      	movs	r2, #32
 8007b88:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b8c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8007b8e:	2a01      	cmp	r2, #1
 8007b90:	d005      	beq.n	8007b9e <UART_DMAReceiveCplt+0x72>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d00f      	beq.n	8007bb8 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8007b98:	f7fb f8c2 	bl	8002d20 <HAL_UART_RxCpltCallback>
}
 8007b9c:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	f103 020c 	add.w	r2, r3, #12
 8007ba2:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	f103 0c0c 	add.w	ip, r3, #12
 8007bae:	e84c 2100 	strex	r1, r2, [ip]
 8007bb2:	2900      	cmp	r1, #0
 8007bb4:	d1f3      	bne.n	8007b9e <UART_DMAReceiveCplt+0x72>
 8007bb6:	e7ec      	b.n	8007b92 <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bb8:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8007bba:	f7fb f9b5 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
}
 8007bbe:	bd08      	pop	{r3, pc}

08007bc0 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc0:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007bc4:	2b22      	cmp	r3, #34	@ 0x22
 8007bc6:	d156      	bne.n	8007c76 <UART_Receive_IT.isra.0+0xb6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc8:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bca:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bcc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd2:	d043      	beq.n	8007c5c <UART_Receive_IT.isra.0+0x9c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d14a      	bne.n	8007c6e <UART_Receive_IT.isra.0+0xae>
 8007bd8:	6903      	ldr	r3, [r0, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d147      	bne.n	8007c6e <UART_Receive_IT.isra.0+0xae>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bde:	684b      	ldr	r3, [r1, #4]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007be4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8007be6:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8007be8:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8007bea:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d13f      	bne.n	8007c76 <UART_Receive_IT.isra.0+0xb6>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bf6:	6802      	ldr	r2, [r0, #0]
 8007bf8:	68d1      	ldr	r1, [r2, #12]
 8007bfa:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007bfe:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c00:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c02:	68d1      	ldr	r1, [r2, #12]
 8007c04:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8007c08:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c0a:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c10:	f021 0101 	bic.w	r1, r1, #1
 8007c14:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007c16:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007c1c:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007c1e:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c20:	d12a      	bne.n	8007c78 <UART_Receive_IT.isra.0+0xb8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c22:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	f102 030c 	add.w	r3, r2, #12
 8007c28:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	f102 0c0c 	add.w	ip, r2, #12
 8007c34:	e84c 3100 	strex	r1, r3, [ip]
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d1f3      	bne.n	8007c24 <UART_Receive_IT.isra.0+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c3c:	6813      	ldr	r3, [r2, #0]
 8007c3e:	06db      	lsls	r3, r3, #27
 8007c40:	d506      	bpl.n	8007c50 <UART_Receive_IT.isra.0+0x90>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c42:	2300      	movs	r3, #0
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	6813      	ldr	r3, [r2, #0]
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	6853      	ldr	r3, [r2, #4]
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c50:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8007c52:	f7fb f969 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
}
 8007c56:	b003      	add	sp, #12
 8007c58:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c5c:	6903      	ldr	r3, [r0, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1bd      	bne.n	8007bde <UART_Receive_IT.isra.0+0x1e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c62:	684b      	ldr	r3, [r1, #4]
 8007c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c68:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8007c6c:	e7bc      	b.n	8007be8 <UART_Receive_IT.isra.0+0x28>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c6e:	684b      	ldr	r3, [r1, #4]
 8007c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c74:	e7b5      	b.n	8007be2 <UART_Receive_IT.isra.0+0x22>
 8007c76:	4770      	bx	lr
        HAL_UART_RxCpltCallback(huart);
 8007c78:	f7fb f852 	bl	8002d20 <HAL_UART_RxCpltCallback>
}
 8007c7c:	b003      	add	sp, #12
 8007c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c82:	bf00      	nop

08007c84 <HAL_UART_IRQHandler>:
{
 8007c84:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c86:	6805      	ldr	r5, [r0, #0]
 8007c88:	682b      	ldr	r3, [r5, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c8a:	68ee      	ldr	r6, [r5, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c8c:	6969      	ldr	r1, [r5, #20]
  if (errorflags == RESET)
 8007c8e:	f013 0f0f 	tst.w	r3, #15
{
 8007c92:	b082      	sub	sp, #8
 8007c94:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c96:	462a      	mov	r2, r5
  if (errorflags == RESET)
 8007c98:	d16e      	bne.n	8007d78 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c9a:	0699      	lsls	r1, r3, #26
 8007c9c:	d502      	bpl.n	8007ca4 <HAL_UART_IRQHandler+0x20>
 8007c9e:	06b5      	lsls	r5, r6, #26
 8007ca0:	f100 80c2 	bmi.w	8007e28 <HAL_UART_IRQHandler+0x1a4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007ca6:	2901      	cmp	r1, #1
 8007ca8:	d00b      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007caa:	0618      	lsls	r0, r3, #24
 8007cac:	d502      	bpl.n	8007cb4 <HAL_UART_IRQHandler+0x30>
 8007cae:	0631      	lsls	r1, r6, #24
 8007cb0:	f100 8090 	bmi.w	8007dd4 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cb4:	065b      	lsls	r3, r3, #25
 8007cb6:	d502      	bpl.n	8007cbe <HAL_UART_IRQHandler+0x3a>
 8007cb8:	0675      	lsls	r5, r6, #25
 8007cba:	f100 80aa 	bmi.w	8007e12 <HAL_UART_IRQHandler+0x18e>
}
 8007cbe:	b002      	add	sp, #8
 8007cc0:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cc2:	06d8      	lsls	r0, r3, #27
 8007cc4:	d5f1      	bpl.n	8007caa <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cc6:	06f1      	lsls	r1, r6, #27
 8007cc8:	d5ef      	bpl.n	8007caa <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cca:	2300      	movs	r3, #0
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	6813      	ldr	r3, [r2, #0]
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	6853      	ldr	r3, [r2, #4]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	6953      	ldr	r3, [r2, #20]
 8007cda:	065d      	lsls	r5, r3, #25
 8007cdc:	f140 8105 	bpl.w	8007eea <HAL_UART_IRQHandler+0x266>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ce0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007ce2:	6803      	ldr	r3, [r0, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0e8      	beq.n	8007cbe <HAL_UART_IRQHandler+0x3a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cec:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8007cee:	4299      	cmp	r1, r3
 8007cf0:	d9e5      	bls.n	8007cbe <HAL_UART_IRQHandler+0x3a>
        huart->RxXferCount = nb_remaining_rx_data;
 8007cf2:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cf4:	69c3      	ldr	r3, [r0, #28]
 8007cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cfa:	d036      	beq.n	8007d6a <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	f102 030c 	add.w	r3, r2, #12
 8007d00:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	f102 050c 	add.w	r5, r2, #12
 8007d0c:	e845 3100 	strex	r1, r3, [r5]
 8007d10:	2900      	cmp	r1, #0
 8007d12:	d1f3      	bne.n	8007cfc <HAL_UART_IRQHandler+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	f102 0314 	add.w	r3, r2, #20
 8007d18:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	f102 0514 	add.w	r5, r2, #20
 8007d24:	e845 3100 	strex	r1, r3, [r5]
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	d1f3      	bne.n	8007d14 <HAL_UART_IRQHandler+0x90>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	f102 0314 	add.w	r3, r2, #20
 8007d30:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	f102 0514 	add.w	r5, r2, #20
 8007d3c:	e845 3100 	strex	r1, r3, [r5]
 8007d40:	2900      	cmp	r1, #0
 8007d42:	d1f3      	bne.n	8007d2c <HAL_UART_IRQHandler+0xa8>
          huart->RxState = HAL_UART_STATE_READY;
 8007d44:	2320      	movs	r3, #32
 8007d46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	f102 030c 	add.w	r3, r2, #12
 8007d50:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d54:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	f102 050c 	add.w	r5, r2, #12
 8007d5c:	e845 3100 	strex	r1, r3, [r5]
 8007d60:	2900      	cmp	r1, #0
 8007d62:	d1f3      	bne.n	8007d4c <HAL_UART_IRQHandler+0xc8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d64:	f7fc f9bc 	bl	80040e0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d68:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8007d6a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8007d6c:	1ac9      	subs	r1, r1, r3
 8007d6e:	4620      	mov	r0, r4
 8007d70:	b289      	uxth	r1, r1
 8007d72:	f7fb f8d9 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
 8007d76:	e7a2      	b.n	8007cbe <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d78:	f011 0101 	ands.w	r1, r1, #1
 8007d7c:	d16c      	bne.n	8007e58 <HAL_UART_IRQHandler+0x1d4>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d7e:	f416 7f90 	tst.w	r6, #288	@ 0x120
 8007d82:	d08f      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d84:	07da      	lsls	r2, r3, #31
 8007d86:	d50a      	bpl.n	8007d9e <HAL_UART_IRQHandler+0x11a>
 8007d88:	05f0      	lsls	r0, r6, #23
 8007d8a:	f140 80e7 	bpl.w	8007f5c <HAL_UART_IRQHandler+0x2d8>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d8e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d90:	0758      	lsls	r0, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d98:	d54f      	bpl.n	8007e3a <HAL_UART_IRQHandler+0x1b6>
 8007d9a:	2900      	cmp	r1, #0
 8007d9c:	d160      	bne.n	8007e60 <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d9e:	0798      	lsls	r0, r3, #30
 8007da0:	d564      	bpl.n	8007e6c <HAL_UART_IRQHandler+0x1e8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007da2:	0719      	lsls	r1, r3, #28
 8007da4:	f100 809e 	bmi.w	8007ee4 <HAL_UART_IRQHandler+0x260>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007da8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	d087      	beq.n	8007cbe <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dae:	069a      	lsls	r2, r3, #26
 8007db0:	d502      	bpl.n	8007db8 <HAL_UART_IRQHandler+0x134>
 8007db2:	06b3      	lsls	r3, r6, #26
 8007db4:	f100 80d6 	bmi.w	8007f64 <HAL_UART_IRQHandler+0x2e0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007db8:	696b      	ldr	r3, [r5, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dc0:	f002 0208 	and.w	r2, r2, #8
 8007dc4:	ea53 0602 	orrs.w	r6, r3, r2
        UART_EndRxTransfer(huart);
 8007dc8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dca:	d156      	bne.n	8007e7a <HAL_UART_IRQHandler+0x1f6>
        HAL_UART_ErrorCallback(huart);
 8007dcc:	f7ff fe62 	bl	8007a94 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd0:	6426      	str	r6, [r4, #64]	@ 0x40
 8007dd2:	e774      	b.n	8007cbe <HAL_UART_IRQHandler+0x3a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dd4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8007dd8:	2b21      	cmp	r3, #33	@ 0x21
 8007dda:	f47f af70 	bne.w	8007cbe <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dde:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007de0:	6a23      	ldr	r3, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007de6:	f000 80c2 	beq.w	8007f6e <HAL_UART_IRQHandler+0x2ea>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dea:	1c59      	adds	r1, r3, #1
 8007dec:	6221      	str	r1, [r4, #32]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8007df2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f47f af5f 	bne.w	8007cbe <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e00:	68d3      	ldr	r3, [r2, #12]
 8007e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e06:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e08:	68d3      	ldr	r3, [r2, #12]
 8007e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e0e:	60d3      	str	r3, [r2, #12]
 8007e10:	e755      	b.n	8007cbe <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e12:	68d3      	ldr	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007e14:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e1a:	60d3      	str	r3, [r2, #12]
  HAL_UART_TxCpltCallback(huart);
 8007e1c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8007e1e:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  HAL_UART_TxCpltCallback(huart);
 8007e22:	f7ff fe33 	bl	8007a8c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8007e26:	e74a      	b.n	8007cbe <HAL_UART_IRQHandler+0x3a>
}
 8007e28:	b002      	add	sp, #8
 8007e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8007e2e:	f7ff bec7 	b.w	8007bc0 <UART_Receive_IT.isra.0>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e32:	05f0      	lsls	r0, r6, #23
 8007e34:	d4ab      	bmi.n	8007d8e <HAL_UART_IRQHandler+0x10a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e36:	075a      	lsls	r2, r3, #29
 8007e38:	d412      	bmi.n	8007e60 <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e3a:	0798      	lsls	r0, r3, #30
 8007e3c:	d516      	bpl.n	8007e6c <HAL_UART_IRQHandler+0x1e8>
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	d0af      	beq.n	8007da2 <HAL_UART_IRQHandler+0x11e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007e44:	f042 0204 	orr.w	r2, r2, #4
 8007e48:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e4a:	071a      	lsls	r2, r3, #28
 8007e4c:	d5ac      	bpl.n	8007da8 <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e4e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007e50:	f042 0208 	orr.w	r2, r2, #8
 8007e54:	6422      	str	r2, [r4, #64]	@ 0x40
 8007e56:	e7a7      	b.n	8007da8 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e58:	07d8      	lsls	r0, r3, #31
 8007e5a:	d4ea      	bmi.n	8007e32 <HAL_UART_IRQHandler+0x1ae>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e5c:	075a      	lsls	r2, r3, #29
 8007e5e:	d53c      	bpl.n	8007eda <HAL_UART_IRQHandler+0x256>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e60:	6c22      	ldr	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e62:	0798      	lsls	r0, r3, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e64:	f042 0202 	orr.w	r2, r2, #2
 8007e68:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e6a:	d4ea      	bmi.n	8007e42 <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e6c:	0718      	lsls	r0, r3, #28
 8007e6e:	d59b      	bpl.n	8007da8 <HAL_UART_IRQHandler+0x124>
 8007e70:	f006 0220 	and.w	r2, r6, #32
 8007e74:	430a      	orrs	r2, r1
 8007e76:	d097      	beq.n	8007da8 <HAL_UART_IRQHandler+0x124>
 8007e78:	e7e9      	b.n	8007e4e <HAL_UART_IRQHandler+0x1ca>
        UART_EndRxTransfer(huart);
 8007e7a:	f7ff fc4f 	bl	800771c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7e:	696b      	ldr	r3, [r5, #20]
 8007e80:	065e      	lsls	r6, r3, #25
 8007e82:	d526      	bpl.n	8007ed2 <HAL_UART_IRQHandler+0x24e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	f105 0314 	add.w	r3, r5, #20
 8007e88:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	f105 0114 	add.w	r1, r5, #20
 8007e94:	e841 3200 	strex	r2, r3, [r1]
 8007e98:	b162      	cbz	r2, 8007eb4 <HAL_UART_IRQHandler+0x230>
 8007e9a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	f102 0314 	add.w	r3, r2, #20
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	f102 0014 	add.w	r0, r2, #20
 8007eac:	e840 3100 	strex	r1, r3, [r0]
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	d1f3      	bne.n	8007e9c <HAL_UART_IRQHandler+0x218>
          if (huart->hdmarx != NULL)
 8007eb4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007eb6:	b160      	cbz	r0, 8007ed2 <HAL_UART_IRQHandler+0x24e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eb8:	4b32      	ldr	r3, [pc, #200]	@ (8007f84 <HAL_UART_IRQHandler+0x300>)
 8007eba:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ebc:	f7fc f95a 	bl	8004174 <HAL_DMA_Abort_IT>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f43f aefc 	beq.w	8007cbe <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ec6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007ec8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8007eca:	b002      	add	sp, #8
 8007ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ed0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff fdde 	bl	8007a94 <HAL_UART_ErrorCallback>
 8007ed8:	e6f1      	b.n	8007cbe <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eda:	0799      	lsls	r1, r3, #30
 8007edc:	d4b1      	bmi.n	8007e42 <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ede:	071a      	lsls	r2, r3, #28
 8007ee0:	d4b5      	bmi.n	8007e4e <HAL_UART_IRQHandler+0x1ca>
 8007ee2:	e761      	b.n	8007da8 <HAL_UART_IRQHandler+0x124>
 8007ee4:	06b2      	lsls	r2, r6, #26
 8007ee6:	d4b2      	bmi.n	8007e4e <HAL_UART_IRQHandler+0x1ca>
 8007ee8:	e75e      	b.n	8007da8 <HAL_UART_IRQHandler+0x124>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eea:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8007eec:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eee:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8007ef0:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ef2:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f43f aee2 	beq.w	8007cbe <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007efa:	1a41      	subs	r1, r0, r1
 8007efc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007efe:	2900      	cmp	r1, #0
 8007f00:	f43f aedd 	beq.w	8007cbe <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	f102 030c 	add.w	r3, r2, #12
 8007f08:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	f102 050c 	add.w	r5, r2, #12
 8007f14:	e845 3000 	strex	r0, r3, [r5]
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d1f3      	bne.n	8007f04 <HAL_UART_IRQHandler+0x280>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	f102 0314 	add.w	r3, r2, #20
 8007f20:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	f102 0514 	add.w	r5, r2, #20
 8007f2c:	e845 3000 	strex	r0, r3, [r5]
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d1f3      	bne.n	8007f1c <HAL_UART_IRQHandler+0x298>
        huart->RxState = HAL_UART_STATE_READY;
 8007f34:	2320      	movs	r3, #32
 8007f36:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3a:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	f102 030c 	add.w	r3, r2, #12
 8007f40:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f44:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	f102 050c 	add.w	r5, r2, #12
 8007f4c:	e845 3000 	strex	r0, r3, [r5]
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d1f3      	bne.n	8007f3c <HAL_UART_IRQHandler+0x2b8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f54:	4620      	mov	r0, r4
 8007f56:	f7fa ffe7 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
 8007f5a:	e6b0      	b.n	8007cbe <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f5c:	075a      	lsls	r2, r3, #29
 8007f5e:	f53f af1e 	bmi.w	8007d9e <HAL_UART_IRQHandler+0x11a>
 8007f62:	e76a      	b.n	8007e3a <HAL_UART_IRQHandler+0x1b6>
        UART_Receive_IT(huart);
 8007f64:	4620      	mov	r0, r4
 8007f66:	f7ff fe2b 	bl	8007bc0 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f6a:	6825      	ldr	r5, [r4, #0]
 8007f6c:	e724      	b.n	8007db8 <HAL_UART_IRQHandler+0x134>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f6e:	6921      	ldr	r1, [r4, #16]
 8007f70:	2900      	cmp	r1, #0
 8007f72:	f47f af3a 	bne.w	8007dea <HAL_UART_IRQHandler+0x166>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f76:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007f7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007f7e:	6051      	str	r1, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8007f80:	6223      	str	r3, [r4, #32]
 8007f82:	e736      	b.n	8007df2 <HAL_UART_IRQHandler+0x16e>
 8007f84:	08007b01 	.word	0x08007b01

08007f88 <UART_Start_Receive_DMA>:
{
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	4613      	mov	r3, r2
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8c:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f8e:	2222      	movs	r2, #34	@ 0x22
{
 8007f90:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f92:	6405      	str	r5, [r0, #64]	@ 0x40
  huart->pRxBuffPtr = pData;
 8007f94:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f96:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
  huart->RxXferSize = Size;
 8007f9a:	8583      	strh	r3, [r0, #44]	@ 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f9c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8007f9e:	4e1f      	ldr	r6, [pc, #124]	@ (800801c <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8007fa0:	6505      	str	r5, [r0, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fa6:	63c6      	str	r6, [r0, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fa8:	4e1d      	ldr	r6, [pc, #116]	@ (8008020 <UART_Start_Receive_DMA+0x98>)
 8007faa:	6406      	str	r6, [r0, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fac:	4e1d      	ldr	r6, [pc, #116]	@ (8008024 <UART_Start_Receive_DMA+0x9c>)
 8007fae:	64c6      	str	r6, [r0, #76]	@ 0x4c
{
 8007fb0:	b082      	sub	sp, #8
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007fb2:	3104      	adds	r1, #4
 8007fb4:	f7fc f858 	bl	8004068 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	9501      	str	r5, [sp, #4]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	9201      	str	r2, [sp, #4]
 8007fc0:	6859      	ldr	r1, [r3, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fc2:	6922      	ldr	r2, [r4, #16]
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007fc4:	9101      	str	r1, [sp, #4]
 8007fc6:	9901      	ldr	r1, [sp, #4]
  __HAL_UNLOCK(huart);
 8007fc8:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fcc:	b15a      	cbz	r2, 8007fe6 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	f103 020c 	add.w	r2, r3, #12
 8007fd2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	f103 000c 	add.w	r0, r3, #12
 8007fde:	e840 2100 	strex	r1, r2, [r0]
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	d1f3      	bne.n	8007fce <UART_Start_Receive_DMA+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	f103 0214 	add.w	r2, r3, #20
 8007fea:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fee:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	f103 0014 	add.w	r0, r3, #20
 8007ff6:	e840 2100 	strex	r1, r2, [r0]
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	d1f3      	bne.n	8007fe6 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	f103 0214 	add.w	r2, r3, #20
 8008002:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008006:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	f103 0114 	add.w	r1, r3, #20
 800800e:	e841 2000 	strex	r0, r2, [r1]
 8008012:	2800      	cmp	r0, #0
 8008014:	d1f3      	bne.n	8007ffe <UART_Start_Receive_DMA+0x76>
}
 8008016:	b002      	add	sp, #8
 8008018:	bd70      	pop	{r4, r5, r6, pc}
 800801a:	bf00      	nop
 800801c:	08007b2d 	.word	0x08007b2d
 8008020:	08007b11 	.word	0x08007b11
 8008024:	08007a99 	.word	0x08007a99

08008028 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008028:	f890 c03e 	ldrb.w	ip, [r0, #62]	@ 0x3e
 800802c:	f1bc 0f20 	cmp.w	ip, #32
 8008030:	d115      	bne.n	800805e <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
    if ((pData == NULL) || (Size == 0U))
 8008032:	b1c9      	cbz	r1, 8008068 <HAL_UARTEx_ReceiveToIdle_DMA+0x40>
{
 8008034:	b530      	push	{r4, r5, lr}
 8008036:	b083      	sub	sp, #12
    if ((pData == NULL) || (Size == 0U))
 8008038:	b172      	cbz	r2, 8008058 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
    __HAL_LOCK(huart);
 800803a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800803e:	2b01      	cmp	r3, #1
 8008040:	4604      	mov	r4, r0
 8008042:	d00e      	beq.n	8008062 <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
 8008044:	2301      	movs	r3, #1
 8008046:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800804a:	6303      	str	r3, [r0, #48]	@ 0x30
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800804c:	f7ff ff9c 	bl	8007f88 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8008050:	b918      	cbnz	r0, 800805a <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008052:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008054:	2b01      	cmp	r3, #1
 8008056:	d009      	beq.n	800806c <HAL_UARTEx_ReceiveToIdle_DMA+0x44>
      return HAL_ERROR;
 8008058:	2001      	movs	r0, #1
}
 800805a:	b003      	add	sp, #12
 800805c:	bd30      	pop	{r4, r5, pc}
    __HAL_LOCK(huart);
 800805e:	2002      	movs	r0, #2
 8008060:	4770      	bx	lr
 8008062:	2002      	movs	r0, #2
}
 8008064:	b003      	add	sp, #12
 8008066:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8008068:	2001      	movs	r0, #1
}
 800806a:	4770      	bx	lr
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800806c:	6822      	ldr	r2, [r4, #0]
 800806e:	9001      	str	r0, [sp, #4]
 8008070:	6813      	ldr	r3, [r2, #0]
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	6853      	ldr	r3, [r2, #4]
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	f102 030c 	add.w	r3, r2, #12
 800807e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008082:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	f102 040c 	add.w	r4, r2, #12
 800808a:	e844 3100 	strex	r1, r3, [r4]
 800808e:	2900      	cmp	r1, #0
 8008090:	d1f3      	bne.n	800807a <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
 8008092:	e7e2      	b.n	800805a <HAL_UARTEx_ReceiveToIdle_DMA+0x32>

08008094 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008094:	b084      	sub	sp, #16
 8008096:	b410      	push	{r4}
 8008098:	f10d 0c08 	add.w	ip, sp, #8
 800809c:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80080a0:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 80080a2:	9904      	ldr	r1, [sp, #16]
  tmpreg |= (Init.ClockEdge           |\
 80080a4:	4313      	orrs	r3, r2
             Init.ClockBypass         |\
 80080a6:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80080a8:	e9dd 4105 	ldrd	r4, r1, [sp, #20]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080ac:	6842      	ldr	r2, [r0, #4]
             Init.ClockPowerSave      |\
 80080ae:	4323      	orrs	r3, r4
             Init.BusWide             |\
 80080b0:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80080b2:	9907      	ldr	r1, [sp, #28]

  return HAL_OK;
}
 80080b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080b8:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
             Init.HardwareFlowControl |\
 80080bc:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080be:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80080c2:	4313      	orrs	r3, r2
 80080c4:	6043      	str	r3, [r0, #4]
}
 80080c6:	b004      	add	sp, #16
 80080c8:	2000      	movs	r0, #0
 80080ca:	4770      	bx	lr

080080cc <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80080cc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop

080080d4 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80080d4:	680b      	ldr	r3, [r1, #0]
 80080d6:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 80080da:	2000      	movs	r0, #0
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 80080e4:	2000      	movs	r0, #0
 80080e6:	4770      	bx	lr

080080e8 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80080e8:	6800      	ldr	r0, [r0, #0]
}
 80080ea:	f000 0003 	and.w	r0, r0, #3
 80080ee:	4770      	bx	lr

080080f0 <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80080f0:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 80080f2:	5840      	ldr	r0, [r0, r1]
}  
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop

080080f8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80080f8:	b410      	push	{r4}

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80080fa:	e9d1 4200 	ldrd	r4, r2, [r1]

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080fe:	688b      	ldr	r3, [r1, #8]
  SDIOx->DTIMER = Data->DataTimeOut;
 8008100:	6244      	str	r4, [r0, #36]	@ 0x24
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008102:	68cc      	ldr	r4, [r1, #12]
  SDIOx->DLEN = Data->DataLength;
 8008104:	6282      	str	r2, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008106:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
                       Data->TransferMode  |\
 8008108:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800810c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
                       Data->TransferDir   |\
 800810e:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008110:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
                       Data->TransferMode  |\
 8008114:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008116:	4313      	orrs	r3, r2
 8008118:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 800811a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811e:	2000      	movs	r0, #0
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop

08008124 <SDMMC_CmdGoIdleState>:
  SDIOx->ARG = Command->Argument;
 8008124:	2300      	movs	r3, #0
 8008126:	6083      	str	r3, [r0, #8]
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008128:	4b0f      	ldr	r3, [pc, #60]	@ (8008168 <SDMMC_CmdGoIdleState+0x44>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800812a:	68c2      	ldr	r2, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800812c:	490f      	ldr	r1, [pc, #60]	@ (800816c <SDMMC_CmdGoIdleState+0x48>)
 800812e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008130:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008134:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008138:	f022 020f 	bic.w	r2, r2, #15
 800813c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008140:	0a5b      	lsrs	r3, r3, #9
 8008142:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008146:	60c2      	str	r2, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	e002      	b.n	8008154 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800814e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008150:	0612      	lsls	r2, r2, #24
 8008152:	d404      	bmi.n	800815e <SDMMC_CmdGoIdleState+0x3a>
    if (count-- == 0U)
 8008154:	3b01      	subs	r3, #1
 8008156:	d2fa      	bcs.n	800814e <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8008158:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800815c:	4770      	bx	lr
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800815e:	23c5      	movs	r3, #197	@ 0xc5
 8008160:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008162:	2000      	movs	r0, #0
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	20000004 	.word	0x20000004
 800816c:	10624dd3 	.word	0x10624dd3

08008170 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008170:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8008174:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
  SDIOx->ARG = Command->Argument;
 8008178:	6081      	str	r1, [r0, #8]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800817a:	4a18      	ldr	r2, [pc, #96]	@ (80081dc <SDMMC_CmdAppOperCommand+0x6c>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800817c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800817e:	4918      	ldr	r1, [pc, #96]	@ (80081e0 <SDMMC_CmdAppOperCommand+0x70>)
 8008180:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008182:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008186:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800818a:	f023 030f 	bic.w	r3, r3, #15
 800818e:	f443 638d 	orr.w	r3, r3, #1128	@ 0x468
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008192:	0a52      	lsrs	r2, r2, #9
 8008194:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008198:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800819c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80081a0:	60c3      	str	r3, [r0, #12]
{
 80081a2:	4684      	mov	ip, r0
    if (count-- == 0U)
 80081a4:	1e53      	subs	r3, r2, #1
 80081a6:	b152      	cbz	r2, 80081be <SDMMC_CmdAppOperCommand+0x4e>
    sta_reg = SDIOx->STA;
 80081a8:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081ac:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 80081b0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081b4:	d001      	beq.n	80081ba <SDMMC_CmdAppOperCommand+0x4a>
 80081b6:	0512      	lsls	r2, r2, #20
 80081b8:	d504      	bpl.n	80081c4 <SDMMC_CmdAppOperCommand+0x54>
    if (count-- == 0U)
 80081ba:	1c59      	adds	r1, r3, #1
 80081bc:	d1f4      	bne.n	80081a8 <SDMMC_CmdAppOperCommand+0x38>
      return SDMMC_ERROR_TIMEOUT;
 80081be:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80081c2:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081c4:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 80081c8:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80081cc:	bf15      	itete	ne
 80081ce:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081d0:	23c5      	moveq	r3, #197	@ 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80081d2:	f8cc 0038 	strne.w	r0, [ip, #56]	@ 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081d6:	f8cc 3038 	streq.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80081da:	4770      	bx	lr
 80081dc:	20000004 	.word	0x20000004
 80081e0:	10624dd3 	.word	0x10624dd3

080081e4 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80081e4:	4b47      	ldr	r3, [pc, #284]	@ (8008304 <SDMMC_GetCmdResp1+0x120>)
{
 80081e6:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4c47      	ldr	r4, [pc, #284]	@ (8008308 <SDMMC_GetCmdResp1+0x124>)
 80081ec:	fba4 4303 	umull	r4, r3, r4, r3
 80081f0:	0a5b      	lsrs	r3, r3, #9
 80081f2:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80081f6:	1e53      	subs	r3, r2, #1
 80081f8:	b14a      	cbz	r2, 800820e <SDMMC_GetCmdResp1+0x2a>
    sta_reg = SDIOx->STA;
 80081fa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081fc:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8008200:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008204:	d001      	beq.n	800820a <SDMMC_GetCmdResp1+0x26>
 8008206:	0512      	lsls	r2, r2, #20
 8008208:	d506      	bpl.n	8008218 <SDMMC_GetCmdResp1+0x34>
    if (count-- == 0U)
 800820a:	1c5c      	adds	r4, r3, #1
 800820c:	d1f5      	bne.n	80081fa <SDMMC_GetCmdResp1+0x16>
      return SDMMC_ERROR_TIMEOUT;
 800820e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8008212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008216:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008218:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800821a:	075b      	lsls	r3, r3, #29
 800821c:	d43c      	bmi.n	8008298 <SDMMC_GetCmdResp1+0xb4>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800821e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008220:	07dc      	lsls	r4, r3, #31
 8008222:	d407      	bmi.n	8008234 <SDMMC_GetCmdResp1+0x50>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008224:	23c5      	movs	r3, #197	@ 0xc5
 8008226:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8008228:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800822a:	b2db      	uxtb	r3, r3
 800822c:	4299      	cmp	r1, r3
 800822e:	d004      	beq.n	800823a <SDMMC_GetCmdResp1+0x56>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008230:	2001      	movs	r0, #1
 8008232:	e7ee      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008234:	2301      	movs	r3, #1
 8008236:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008238:	e7fa      	b.n	8008230 <SDMMC_GetCmdResp1+0x4c>
  return (*(__IO uint32_t *) tmp);
 800823a:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800823c:	4833      	ldr	r0, [pc, #204]	@ (800830c <SDMMC_GetCmdResp1+0x128>)
 800823e:	4018      	ands	r0, r3
 8008240:	2800      	cmp	r0, #0
 8008242:	d0e6      	beq.n	8008212 <SDMMC_GetCmdResp1+0x2e>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008244:	2b00      	cmp	r3, #0
 8008246:	db2b      	blt.n	80082a0 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008248:	005a      	lsls	r2, r3, #1
 800824a:	d42c      	bmi.n	80082a6 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800824c:	009c      	lsls	r4, r3, #2
 800824e:	d42c      	bmi.n	80082aa <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008250:	00d9      	lsls	r1, r3, #3
 8008252:	d42c      	bmi.n	80082ae <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008254:	011a      	lsls	r2, r3, #4
 8008256:	d42d      	bmi.n	80082b4 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008258:	015c      	lsls	r4, r3, #5
 800825a:	d42e      	bmi.n	80082ba <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800825c:	01d9      	lsls	r1, r3, #7
 800825e:	d42f      	bmi.n	80082c0 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008260:	021a      	lsls	r2, r3, #8
 8008262:	d430      	bmi.n	80082c6 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008264:	025c      	lsls	r4, r3, #9
 8008266:	d431      	bmi.n	80082cc <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008268:	0299      	lsls	r1, r3, #10
 800826a:	d43b      	bmi.n	80082e4 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800826c:	02da      	lsls	r2, r3, #11
 800826e:	d436      	bmi.n	80082de <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008270:	035c      	lsls	r4, r3, #13
 8008272:	d431      	bmi.n	80082d8 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008274:	0399      	lsls	r1, r3, #14
 8008276:	d42c      	bmi.n	80082d2 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008278:	03da      	lsls	r2, r3, #15
 800827a:	d43f      	bmi.n	80082fc <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800827c:	041c      	lsls	r4, r3, #16
 800827e:	d43a      	bmi.n	80082f6 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008280:	0459      	lsls	r1, r3, #17
 8008282:	d435      	bmi.n	80082f0 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008284:	049a      	lsls	r2, r3, #18
 8008286:	d430      	bmi.n	80082ea <SDMMC_GetCmdResp1+0x106>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008288:	f013 0f08 	tst.w	r3, #8
 800828c:	bf0c      	ite	eq
 800828e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8008292:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8008296:	e7bc      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008298:	2304      	movs	r3, #4
 800829a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800829c:	4618      	mov	r0, r3
 800829e:	e7b8      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80082a0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80082a4:	e7b5      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80082a6:	2040      	movs	r0, #64	@ 0x40
 80082a8:	e7b3      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80082aa:	2080      	movs	r0, #128	@ 0x80
 80082ac:	e7b1      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80082ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80082b2:	e7ae      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80082b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80082b8:	e7ab      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80082ba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80082be:	e7a8      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80082c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80082c4:	e7a5      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80082c6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80082ca:	e7a2      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80082cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80082d0:	e79f      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80082d2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80082d6:	e79c      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80082d8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80082dc:	e799      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_CC_ERR;
 80082de:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80082e2:	e796      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80082e4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80082e8:	e793      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_ERASE_RESET;
 80082ea:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80082ee:	e790      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80082f0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80082f4:	e78d      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80082f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80082fa:	e78a      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80082fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008300:	e787      	b.n	8008212 <SDMMC_GetCmdResp1+0x2e>
 8008302:	bf00      	nop
 8008304:	20000004 	.word	0x20000004
 8008308:	10624dd3 	.word	0x10624dd3
 800830c:	fdffe008 	.word	0xfdffe008

08008310 <SDMMC_CmdBlockLength>:
  SDIOx->ARG = Command->Argument;
 8008310:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008312:	68c3      	ldr	r3, [r0, #12]
 8008314:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008318:	f023 030f 	bic.w	r3, r3, #15
 800831c:	f443 638a 	orr.w	r3, r3, #1104	@ 0x450
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008320:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008324:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008326:	2110      	movs	r1, #16
 8008328:	f7ff bf5c 	b.w	80081e4 <SDMMC_GetCmdResp1>

0800832c <SDMMC_CmdReadSingleBlock>:
  SDIOx->ARG = Command->Argument;
 800832c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800832e:	68c3      	ldr	r3, [r0, #12]
 8008330:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008334:	f023 030f 	bic.w	r3, r3, #15
 8008338:	f443 638a 	orr.w	r3, r3, #1104	@ 0x450
 800833c:	f043 0301 	orr.w	r3, r3, #1
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008340:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008344:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008346:	2111      	movs	r1, #17
 8008348:	f7ff bf4c 	b.w	80081e4 <SDMMC_GetCmdResp1>

0800834c <SDMMC_CmdReadMultiBlock>:
  SDIOx->ARG = Command->Argument;
 800834c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800834e:	68c3      	ldr	r3, [r0, #12]
 8008350:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008354:	f023 030f 	bic.w	r3, r3, #15
 8008358:	f443 638a 	orr.w	r3, r3, #1104	@ 0x450
 800835c:	f043 0302 	orr.w	r3, r3, #2
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008360:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008364:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008366:	2112      	movs	r1, #18
 8008368:	f7ff bf3c 	b.w	80081e4 <SDMMC_GetCmdResp1>

0800836c <SDMMC_CmdWriteSingleBlock>:
  SDIOx->ARG = Command->Argument;
 800836c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800836e:	68c3      	ldr	r3, [r0, #12]
 8008370:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008374:	f023 030f 	bic.w	r3, r3, #15
 8008378:	f443 638b 	orr.w	r3, r3, #1112	@ 0x458
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800837c:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008380:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008382:	2118      	movs	r1, #24
 8008384:	f7ff bf2e 	b.w	80081e4 <SDMMC_GetCmdResp1>

08008388 <SDMMC_CmdWriteMultiBlock>:
  SDIOx->ARG = Command->Argument;
 8008388:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800838a:	68c3      	ldr	r3, [r0, #12]
 800838c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008390:	f023 030f 	bic.w	r3, r3, #15
 8008394:	f443 638b 	orr.w	r3, r3, #1112	@ 0x458
 8008398:	f043 0301 	orr.w	r3, r3, #1
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800839c:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083a0:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80083a2:	2119      	movs	r1, #25
 80083a4:	f7ff bf1e 	b.w	80081e4 <SDMMC_GetCmdResp1>

080083a8 <SDMMC_CmdStopTransfer>:
  SDIOx->ARG = Command->Argument;
 80083a8:	2300      	movs	r3, #0
 80083aa:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083ac:	68c3      	ldr	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80083ae:	4a06      	ldr	r2, [pc, #24]	@ (80083c8 <SDMMC_CmdStopTransfer+0x20>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083b0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80083b4:	f023 030f 	bic.w	r3, r3, #15
 80083b8:	f443 6389 	orr.w	r3, r3, #1096	@ 0x448
 80083bc:	f043 0304 	orr.w	r3, r3, #4
 80083c0:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80083c2:	210c      	movs	r1, #12
 80083c4:	f7ff bf0e 	b.w	80081e4 <SDMMC_GetCmdResp1>
 80083c8:	05f5e100 	.word	0x05f5e100

080083cc <SDMMC_CmdSelDesel>:
  SDIOx->ARG = Command->Argument;
 80083cc:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083ce:	68c3      	ldr	r3, [r0, #12]
 80083d0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80083d4:	f023 030f 	bic.w	r3, r3, #15
 80083d8:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 80083dc:	f043 0307 	orr.w	r3, r3, #7
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80083e0:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083e4:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80083e6:	2107      	movs	r1, #7
 80083e8:	f7ff befc 	b.w	80081e4 <SDMMC_GetCmdResp1>

080083ec <SDMMC_CmdAppCommand>:
  SDIOx->ARG = Command->Argument;
 80083ec:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083ee:	68c3      	ldr	r3, [r0, #12]
 80083f0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80083f4:	f023 030f 	bic.w	r3, r3, #15
 80083f8:	f443 638e 	orr.w	r3, r3, #1136	@ 0x470
 80083fc:	f043 0307 	orr.w	r3, r3, #7
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008400:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008404:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008406:	2137      	movs	r1, #55	@ 0x37
 8008408:	f7ff beec 	b.w	80081e4 <SDMMC_GetCmdResp1>

0800840c <SDMMC_CmdSendStatus>:
  SDIOx->ARG = Command->Argument;
 800840c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800840e:	68c3      	ldr	r3, [r0, #12]
 8008410:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008414:	f023 030f 	bic.w	r3, r3, #15
 8008418:	f443 6389 	orr.w	r3, r3, #1096	@ 0x448
 800841c:	f043 0305 	orr.w	r3, r3, #5
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008420:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008424:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008426:	210d      	movs	r1, #13
 8008428:	f7ff bedc 	b.w	80081e4 <SDMMC_GetCmdResp1>

0800842c <SDMMC_GetCmdResp2>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800842c:	4a13      	ldr	r2, [pc, #76]	@ (800847c <SDMMC_GetCmdResp2+0x50>)
 800842e:	4b14      	ldr	r3, [pc, #80]	@ (8008480 <SDMMC_GetCmdResp2+0x54>)
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	fba3 3202 	umull	r3, r2, r3, r2
 8008436:	f241 3188 	movw	r1, #5000	@ 0x1388
 800843a:	0a52      	lsrs	r2, r2, #9
 800843c:	fb01 f202 	mul.w	r2, r1, r2
    if (count-- == 0U)
 8008440:	1e53      	subs	r3, r2, #1
{
 8008442:	4601      	mov	r1, r0
    if (count-- == 0U)
 8008444:	b14a      	cbz	r2, 800845a <SDMMC_GetCmdResp2+0x2e>
    sta_reg = SDIOx->STA;
 8008446:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008448:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800844c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008450:	d001      	beq.n	8008456 <SDMMC_GetCmdResp2+0x2a>
 8008452:	0512      	lsls	r2, r2, #20
 8008454:	d504      	bpl.n	8008460 <SDMMC_GetCmdResp2+0x34>
    if (count-- == 0U)
 8008456:	1c58      	adds	r0, r3, #1
 8008458:	d1f5      	bne.n	8008446 <SDMMC_GetCmdResp2+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 800845a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800845e:	4770      	bx	lr
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008460:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008462:	075b      	lsls	r3, r3, #29
 8008464:	d407      	bmi.n	8008476 <SDMMC_GetCmdResp2+0x4a>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008466:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8008468:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800846c:	bf14      	ite	ne
 800846e:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008470:	23c5      	moveq	r3, #197	@ 0xc5
 8008472:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8008474:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008476:	2004      	movs	r0, #4
 8008478:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800847a:	4770      	bx	lr
 800847c:	20000004 	.word	0x20000004
 8008480:	10624dd3 	.word	0x10624dd3

08008484 <SDMMC_CmdSendCID>:
  SDIOx->ARG = Command->Argument;
 8008484:	2300      	movs	r3, #0
 8008486:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008488:	68c3      	ldr	r3, [r0, #12]
 800848a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800848e:	f023 030f 	bic.w	r3, r3, #15
 8008492:	f443 6398 	orr.w	r3, r3, #1216	@ 0x4c0
 8008496:	f043 0302 	orr.w	r3, r3, #2
 800849a:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800849c:	f7ff bfc6 	b.w	800842c <SDMMC_GetCmdResp2>

080084a0 <SDMMC_CmdSendCSD>:
  SDIOx->ARG = Command->Argument;
 80084a0:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80084a2:	68c3      	ldr	r3, [r0, #12]
 80084a4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80084a8:	f023 030f 	bic.w	r3, r3, #15
 80084ac:	f443 6399 	orr.w	r3, r3, #1224	@ 0x4c8
 80084b0:	f043 0301 	orr.w	r3, r3, #1
 80084b4:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80084b6:	f7ff bfb9 	b.w	800842c <SDMMC_GetCmdResp2>
 80084ba:	bf00      	nop

080084bc <SDMMC_GetCmdResp6>:
{
 80084bc:	b410      	push	{r4}
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084be:	4c22      	ldr	r4, [pc, #136]	@ (8008548 <SDMMC_GetCmdResp6+0x8c>)
 80084c0:	4b22      	ldr	r3, [pc, #136]	@ (800854c <SDMMC_GetCmdResp6+0x90>)
 80084c2:	6824      	ldr	r4, [r4, #0]
 80084c4:	fba3 3404 	umull	r3, r4, r3, r4
 80084c8:	0a64      	lsrs	r4, r4, #9
 80084ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80084ce:	fb03 f404 	mul.w	r4, r3, r4
    if (count-- == 0U)
 80084d2:	1e63      	subs	r3, r4, #1
 80084d4:	b14c      	cbz	r4, 80084ea <SDMMC_GetCmdResp6+0x2e>
    sta_reg = SDIOx->STA;
 80084d6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084d8:	f014 0f45 	tst.w	r4, #69	@ 0x45
    if (count-- == 0U)
 80084dc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084e0:	d001      	beq.n	80084e6 <SDMMC_GetCmdResp6+0x2a>
 80084e2:	0524      	lsls	r4, r4, #20
 80084e4:	d506      	bpl.n	80084f4 <SDMMC_GetCmdResp6+0x38>
    if (count-- == 0U)
 80084e6:	1c5c      	adds	r4, r3, #1
 80084e8:	d1f5      	bne.n	80084d6 <SDMMC_GetCmdResp6+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 80084ea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80084ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084f2:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80084f4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80084f6:	075b      	lsls	r3, r3, #29
 80084f8:	d41b      	bmi.n	8008532 <SDMMC_GetCmdResp6+0x76>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80084fa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80084fc:	07dc      	lsls	r4, r3, #31
 80084fe:	d405      	bmi.n	800850c <SDMMC_GetCmdResp6+0x50>
  return (uint8_t)(SDIOx->RESPCMD);
 8008500:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008502:	b2db      	uxtb	r3, r3
 8008504:	4299      	cmp	r1, r3
 8008506:	d004      	beq.n	8008512 <SDMMC_GetCmdResp6+0x56>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008508:	2001      	movs	r0, #1
 800850a:	e7f0      	b.n	80084ee <SDMMC_GetCmdResp6+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800850c:	2301      	movs	r3, #1
 800850e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008510:	e7fa      	b.n	8008508 <SDMMC_GetCmdResp6+0x4c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008512:	23c5      	movs	r3, #197	@ 0xc5
 8008514:	6383      	str	r3, [r0, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8008516:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008518:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800851c:	d010      	beq.n	8008540 <SDMMC_GetCmdResp6+0x84>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800851e:	045a      	lsls	r2, r3, #17
 8008520:	d40b      	bmi.n	800853a <SDMMC_GetCmdResp6+0x7e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008522:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008526:	bf0c      	ite	eq
 8008528:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800852c:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 8008530:	e7dd      	b.n	80084ee <SDMMC_GetCmdResp6+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008532:	2304      	movs	r3, #4
 8008534:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008536:	4618      	mov	r0, r3
 8008538:	e7d9      	b.n	80084ee <SDMMC_GetCmdResp6+0x32>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800853a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800853e:	e7d6      	b.n	80084ee <SDMMC_GetCmdResp6+0x32>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008540:	0c1b      	lsrs	r3, r3, #16
 8008542:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8008544:	e7d3      	b.n	80084ee <SDMMC_GetCmdResp6+0x32>
 8008546:	bf00      	nop
 8008548:	20000004 	.word	0x20000004
 800854c:	10624dd3 	.word	0x10624dd3

08008550 <SDMMC_CmdSetRelAdd>:
  SDIOx->ARG = Command->Argument;
 8008550:	2300      	movs	r3, #0
 8008552:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008554:	68c3      	ldr	r3, [r0, #12]
 8008556:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800855a:	f023 030f 	bic.w	r3, r3, #15
 800855e:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 8008562:	f043 0303 	orr.w	r3, r3, #3
{
 8008566:	460a      	mov	r2, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008568:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800856a:	2103      	movs	r1, #3
 800856c:	f7ff bfa6 	b.w	80084bc <SDMMC_GetCmdResp6>

08008570 <SDMMC_GetCmdResp7>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008570:	4a16      	ldr	r2, [pc, #88]	@ (80085cc <SDMMC_GetCmdResp7+0x5c>)
 8008572:	4b17      	ldr	r3, [pc, #92]	@ (80085d0 <SDMMC_GetCmdResp7+0x60>)
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	fba3 3202 	umull	r3, r2, r3, r2
 800857a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800857e:	0a52      	lsrs	r2, r2, #9
 8008580:	fb01 f202 	mul.w	r2, r1, r2
    if (count-- == 0U)
 8008584:	1e53      	subs	r3, r2, #1
{
 8008586:	4601      	mov	r1, r0
    if (count-- == 0U)
 8008588:	b14a      	cbz	r2, 800859e <SDMMC_GetCmdResp7+0x2e>
    sta_reg = SDIOx->STA;
 800858a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800858c:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8008590:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008594:	d001      	beq.n	800859a <SDMMC_GetCmdResp7+0x2a>
 8008596:	0510      	lsls	r0, r2, #20
 8008598:	d504      	bpl.n	80085a4 <SDMMC_GetCmdResp7+0x34>
    if (count-- == 0U)
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	d1f5      	bne.n	800858a <SDMMC_GetCmdResp7+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 800859e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80085a2:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80085a4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80085a6:	075a      	lsls	r2, r3, #29
 80085a8:	d40c      	bmi.n	80085c4 <SDMMC_GetCmdResp7+0x54>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80085aa:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80085ac:	f010 0001 	ands.w	r0, r0, #1
 80085b0:	d105      	bne.n	80085be <SDMMC_GetCmdResp7+0x4e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80085b2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80085b4:	065b      	lsls	r3, r3, #25
 80085b6:	d5f4      	bpl.n	80085a2 <SDMMC_GetCmdResp7+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80085b8:	2340      	movs	r3, #64	@ 0x40
 80085ba:	638b      	str	r3, [r1, #56]	@ 0x38
 80085bc:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085be:	2301      	movs	r3, #1
 80085c0:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085c2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80085c4:	2004      	movs	r0, #4
 80085c6:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	20000004 	.word	0x20000004
 80085d0:	10624dd3 	.word	0x10624dd3

080085d4 <SDMMC_CmdOperCond>:
  SDIOx->ARG = Command->Argument;
 80085d4:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80085d8:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80085da:	68c3      	ldr	r3, [r0, #12]
 80085dc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80085e0:	f023 030f 	bic.w	r3, r3, #15
 80085e4:	f443 6389 	orr.w	r3, r3, #1096	@ 0x448
 80085e8:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80085ea:	f7ff bfc1 	b.w	8008570 <SDMMC_GetCmdResp7>
 80085ee:	bf00      	nop

080085f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80085f0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80085f2:	4903      	ldr	r1, [pc, #12]	@ (8008600 <MX_FATFS_Init+0x10>)
 80085f4:	4803      	ldr	r0, [pc, #12]	@ (8008604 <MX_FATFS_Init+0x14>)
 80085f6:	f000 fd91 	bl	800911c <FATFS_LinkDriver>
 80085fa:	4b03      	ldr	r3, [pc, #12]	@ (8008608 <MX_FATFS_Init+0x18>)
 80085fc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80085fe:	bd08      	pop	{r3, pc}
 8008600:	20009b20 	.word	0x20009b20
 8008604:	0800bfdc 	.word	0x0800bfdc
 8008608:	20009b24 	.word	0x20009b24

0800860c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800860c:	2000      	movs	r0, #0
 800860e:	4770      	bx	lr

08008610 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008610:	4684      	mov	ip, r0
 8008612:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008614:	4804      	ldr	r0, [pc, #16]	@ (8008628 <BSP_SD_ReadBlocks_DMA+0x18>)
{
 8008616:	4613      	mov	r3, r2
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008618:	460a      	mov	r2, r1
 800861a:	4661      	mov	r1, ip
 800861c:	f7fe f810 	bl	8006640 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8008620:	3800      	subs	r0, #0
 8008622:	bf18      	it	ne
 8008624:	2001      	movne	r0, #1
 8008626:	bd08      	pop	{r3, pc}
 8008628:	20009780 	.word	0x20009780

0800862c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800862c:	4684      	mov	ip, r0
 800862e:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008630:	4804      	ldr	r0, [pc, #16]	@ (8008644 <BSP_SD_WriteBlocks_DMA+0x18>)
{
 8008632:	4613      	mov	r3, r2
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008634:	460a      	mov	r2, r1
 8008636:	4661      	mov	r1, ip
 8008638:	f7fe f89c 	bl	8006774 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800863c:	3800      	subs	r0, #0
 800863e:	bf18      	it	ne
 8008640:	2001      	movne	r0, #1
 8008642:	bd08      	pop	{r3, pc}
 8008644:	20009780 	.word	0x20009780

08008648 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008648:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800864a:	4803      	ldr	r0, [pc, #12]	@ (8008658 <BSP_SD_GetCardState+0x10>)
 800864c:	f7fe fb50 	bl	8006cf0 <HAL_SD_GetCardState>
}
 8008650:	3804      	subs	r0, #4
 8008652:	bf18      	it	ne
 8008654:	2001      	movne	r0, #1
 8008656:	bd08      	pop	{r3, pc}
 8008658:	20009780 	.word	0x20009780

0800865c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800865c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800865e:	4801      	ldr	r0, [pc, #4]	@ (8008664 <BSP_SD_GetCardInfo+0x8>)
 8008660:	f7fe bb32 	b.w	8006cc8 <HAL_SD_GetCardInfo>
 8008664:	20009780 	.word	0x20009780

08008668 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop

0800866c <HAL_SD_AbortCallback>:
{
 800866c:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800866e:	f7ff fffb 	bl	8008668 <BSP_SD_AbortCallback>
}
 8008672:	bd08      	pop	{r3, pc}

08008674 <HAL_SD_TxCpltCallback>:
{
 8008674:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8008676:	f000 f911 	bl	800889c <BSP_SD_WriteCpltCallback>
}
 800867a:	bd08      	pop	{r3, pc}

0800867c <HAL_SD_RxCpltCallback>:
{
 800867c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800867e:	f000 f913 	bl	80088a8 <BSP_SD_ReadCpltCallback>
}
 8008682:	bd08      	pop	{r3, pc}

08008684 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008684:	b500      	push	{lr}
 8008686:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8008688:	2301      	movs	r3, #1
 800868a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800868e:	f000 f817 	bl	80086c0 <BSP_PlatformIsDetected>
 8008692:	b908      	cbnz	r0, 8008698 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 8008694:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8008698:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800869c:	b003      	add	sp, #12
 800869e:	f85d fb04 	ldr.w	pc, [sp], #4
 80086a2:	bf00      	nop

080086a4 <BSP_SD_Init>:
{
 80086a4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80086a6:	f7ff ffed 	bl	8008684 <BSP_SD_IsDetected>
 80086aa:	2801      	cmp	r0, #1
 80086ac:	d001      	beq.n	80086b2 <BSP_SD_Init+0xe>
}
 80086ae:	2001      	movs	r0, #1
 80086b0:	bd08      	pop	{r3, pc}
 80086b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sd_state = HAL_SD_Init(&hsd);
 80086b6:	4801      	ldr	r0, [pc, #4]	@ (80086bc <BSP_SD_Init+0x18>)
 80086b8:	f7fe bae8 	b.w	8006c8c <HAL_SD_Init>
 80086bc:	20009780 	.word	0x20009780

080086c0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80086c0:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80086c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80086c6:	4803      	ldr	r0, [pc, #12]	@ (80086d4 <BSP_PlatformIsDetected+0x14>)
 80086c8:	f7fb ff60 	bl	800458c <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80086cc:	fab0 f080 	clz	r0, r0
 80086d0:	0940      	lsrs	r0, r0, #5
 80086d2:	bd08      	pop	{r3, pc}
 80086d4:	40020400 	.word	0x40020400

080086d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80086d8:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80086da:	4b16      	ldr	r3, [pc, #88]	@ (8008734 <SD_ioctl+0x5c>)
 80086dc:	7818      	ldrb	r0, [r3, #0]
 80086de:	f010 0401 	ands.w	r4, r0, #1
{
 80086e2:	b089      	sub	sp, #36	@ 0x24
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80086e4:	d106      	bne.n	80086f4 <SD_ioctl+0x1c>
 80086e6:	4615      	mov	r5, r2

  switch (cmd)
 80086e8:	2903      	cmp	r1, #3
 80086ea:	d820      	bhi.n	800872e <SD_ioctl+0x56>
 80086ec:	e8df f001 	tbb	[pc, r1]
 80086f0:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80086f4:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 80086f6:	4620      	mov	r0, r4
 80086f8:	b009      	add	sp, #36	@ 0x24
 80086fa:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80086fc:	4668      	mov	r0, sp
 80086fe:	f7ff ffad 	bl	800865c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008702:	9b07      	ldr	r3, [sp, #28]
}
 8008704:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008706:	0a5b      	lsrs	r3, r3, #9
 8008708:	602b      	str	r3, [r5, #0]
}
 800870a:	b009      	add	sp, #36	@ 0x24
 800870c:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800870e:	4668      	mov	r0, sp
 8008710:	f7ff ffa4 	bl	800865c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008714:	9b06      	ldr	r3, [sp, #24]
 8008716:	602b      	str	r3, [r5, #0]
}
 8008718:	4620      	mov	r0, r4
 800871a:	b009      	add	sp, #36	@ 0x24
 800871c:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800871e:	4668      	mov	r0, sp
 8008720:	f7ff ff9c 	bl	800865c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008724:	9b07      	ldr	r3, [sp, #28]
 8008726:	802b      	strh	r3, [r5, #0]
}
 8008728:	4620      	mov	r0, r4
 800872a:	b009      	add	sp, #36	@ 0x24
 800872c:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800872e:	2404      	movs	r4, #4
 8008730:	e7e1      	b.n	80086f6 <SD_ioctl+0x1e>
 8008732:	bf00      	nop
 8008734:	20000010 	.word	0x20000010

08008738 <SD_initialize>:
{
 8008738:	b510      	push	{r4, lr}
  if(BSP_SD_Init() == MSD_OK)
 800873a:	f7ff ffb3 	bl	80086a4 <BSP_SD_Init>
  Stat = STA_NOINIT;
 800873e:	4c09      	ldr	r4, [pc, #36]	@ (8008764 <SD_initialize+0x2c>)
  if(BSP_SD_Init() == MSD_OK)
 8008740:	b108      	cbz	r0, 8008746 <SD_initialize+0xe>
  return Stat;
 8008742:	7820      	ldrb	r0, [r4, #0]
}
 8008744:	bd10      	pop	{r4, pc}
  Stat = STA_NOINIT;
 8008746:	2301      	movs	r3, #1
 8008748:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800874a:	f7ff ff7d 	bl	8008648 <BSP_SD_GetCardState>
 800874e:	b918      	cbnz	r0, 8008758 <SD_initialize+0x20>
    Stat &= ~STA_NOINIT;
 8008750:	7823      	ldrb	r3, [r4, #0]
 8008752:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008756:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008758:	7823      	ldrb	r3, [r4, #0]
 800875a:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800875c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800875e:	7820      	ldrb	r0, [r4, #0]
}
 8008760:	bd10      	pop	{r4, pc}
 8008762:	bf00      	nop
 8008764:	20000010 	.word	0x20000010

08008768 <SD_write>:
{
 8008768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   WriteStatus = 0;
 800876c:	4e20      	ldr	r6, [pc, #128]	@ (80087f0 <SD_write+0x88>)
 800876e:	2000      	movs	r0, #0
{
 8008770:	460f      	mov	r7, r1
 8008772:	4690      	mov	r8, r2
 8008774:	4699      	mov	r9, r3
   WriteStatus = 0;
 8008776:	6030      	str	r0, [r6, #0]
  uint32_t timer = HAL_GetTick();
 8008778:	f7fa fd22 	bl	80031c0 <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 800877c:	f247 552f 	movw	r5, #29999	@ 0x752f
  uint32_t timer = HAL_GetTick();
 8008780:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 8008782:	e002      	b.n	800878a <SD_write+0x22>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008784:	f7ff ff60 	bl	8008648 <BSP_SD_GetCardState>
 8008788:	b138      	cbz	r0, 800879a <SD_write+0x32>
  while(HAL_GetTick() - timer < timeout)
 800878a:	f7fa fd19 	bl	80031c0 <HAL_GetTick>
 800878e:	1b00      	subs	r0, r0, r4
 8008790:	42a8      	cmp	r0, r5
 8008792:	d9f7      	bls.n	8008784 <SD_write+0x1c>
    return res;
 8008794:	2001      	movs	r0, #1
}
 8008796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800879a:	464a      	mov	r2, r9
 800879c:	4641      	mov	r1, r8
 800879e:	4638      	mov	r0, r7
 80087a0:	f7ff ff44 	bl	800862c <BSP_SD_WriteBlocks_DMA>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d1f5      	bne.n	8008794 <SD_write+0x2c>
      timeout = HAL_GetTick();
 80087a8:	f7fa fd0a 	bl	80031c0 <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80087ac:	f247 552f 	movw	r5, #29999	@ 0x752f
      timeout = HAL_GetTick();
 80087b0:	4604      	mov	r4, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80087b2:	e004      	b.n	80087be <SD_write+0x56>
 80087b4:	f7fa fd04 	bl	80031c0 <HAL_GetTick>
 80087b8:	1b00      	subs	r0, r0, r4
 80087ba:	42a8      	cmp	r0, r5
 80087bc:	d802      	bhi.n	80087c4 <SD_write+0x5c>
 80087be:	6833      	ldr	r3, [r6, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f7      	beq.n	80087b4 <SD_write+0x4c>
      if (WriteStatus == 0)
 80087c4:	6833      	ldr	r3, [r6, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0e4      	beq.n	8008794 <SD_write+0x2c>
        WriteStatus = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	6033      	str	r3, [r6, #0]
        timeout = HAL_GetTick();
 80087ce:	f7fa fcf7 	bl	80031c0 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80087d2:	f247 552f 	movw	r5, #29999	@ 0x752f
        timeout = HAL_GetTick();
 80087d6:	4604      	mov	r4, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80087d8:	e003      	b.n	80087e2 <SD_write+0x7a>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80087da:	f7ff ff35 	bl	8008648 <BSP_SD_GetCardState>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d0d9      	beq.n	8008796 <SD_write+0x2e>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80087e2:	f7fa fced 	bl	80031c0 <HAL_GetTick>
 80087e6:	1b00      	subs	r0, r0, r4
 80087e8:	42a8      	cmp	r0, r5
 80087ea:	d9f6      	bls.n	80087da <SD_write+0x72>
 80087ec:	e7d2      	b.n	8008794 <SD_write+0x2c>
 80087ee:	bf00      	nop
 80087f0:	20009b2c 	.word	0x20009b2c

080087f4 <SD_status>:
{
 80087f4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80087f6:	4c06      	ldr	r4, [pc, #24]	@ (8008810 <SD_status+0x1c>)
 80087f8:	2301      	movs	r3, #1
 80087fa:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80087fc:	f7ff ff24 	bl	8008648 <BSP_SD_GetCardState>
 8008800:	b918      	cbnz	r0, 800880a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8008802:	7823      	ldrb	r3, [r4, #0]
 8008804:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008808:	7023      	strb	r3, [r4, #0]
  return Stat;
 800880a:	7820      	ldrb	r0, [r4, #0]
}
 800880c:	bd10      	pop	{r4, pc}
 800880e:	bf00      	nop
 8008810:	20000010 	.word	0x20000010

08008814 <SD_read>:
{
 8008814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008818:	460d      	mov	r5, r1
 800881a:	4616      	mov	r6, r2
 800881c:	461f      	mov	r7, r3
  uint32_t timer = HAL_GetTick();
 800881e:	f7fa fccf 	bl	80031c0 <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 8008822:	f247 582f 	movw	r8, #29999	@ 0x752f
  uint32_t timer = HAL_GetTick();
 8008826:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 8008828:	e002      	b.n	8008830 <SD_read+0x1c>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800882a:	f7ff ff0d 	bl	8008648 <BSP_SD_GetCardState>
 800882e:	b138      	cbz	r0, 8008840 <SD_read+0x2c>
  while(HAL_GetTick() - timer < timeout)
 8008830:	f7fa fcc6 	bl	80031c0 <HAL_GetTick>
 8008834:	1b00      	subs	r0, r0, r4
 8008836:	4540      	cmp	r0, r8
 8008838:	d9f7      	bls.n	800882a <SD_read+0x16>
    return res;
 800883a:	2001      	movs	r0, #1
}
 800883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008840:	463a      	mov	r2, r7
 8008842:	4631      	mov	r1, r6
 8008844:	4628      	mov	r0, r5
 8008846:	f7ff fee3 	bl	8008610 <BSP_SD_ReadBlocks_DMA>
 800884a:	2800      	cmp	r0, #0
 800884c:	d1f5      	bne.n	800883a <SD_read+0x26>
      ReadStatus = 0;
 800884e:	4c12      	ldr	r4, [pc, #72]	@ (8008898 <SD_read+0x84>)
 8008850:	6020      	str	r0, [r4, #0]
      timeout = HAL_GetTick();
 8008852:	f7fa fcb5 	bl	80031c0 <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008856:	f247 562f 	movw	r6, #29999	@ 0x752f
      timeout = HAL_GetTick();
 800885a:	4605      	mov	r5, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800885c:	e004      	b.n	8008868 <SD_read+0x54>
 800885e:	f7fa fcaf 	bl	80031c0 <HAL_GetTick>
 8008862:	1b40      	subs	r0, r0, r5
 8008864:	42b0      	cmp	r0, r6
 8008866:	d802      	bhi.n	800886e <SD_read+0x5a>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0f7      	beq.n	800885e <SD_read+0x4a>
      if (ReadStatus == 0)
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d0e2      	beq.n	800883a <SD_read+0x26>
        ReadStatus = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8008878:	f7fa fca2 	bl	80031c0 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800887c:	f247 552f 	movw	r5, #29999	@ 0x752f
        timeout = HAL_GetTick();
 8008880:	4604      	mov	r4, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008882:	e003      	b.n	800888c <SD_read+0x78>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008884:	f7ff fee0 	bl	8008648 <BSP_SD_GetCardState>
 8008888:	2800      	cmp	r0, #0
 800888a:	d0d7      	beq.n	800883c <SD_read+0x28>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800888c:	f7fa fc98 	bl	80031c0 <HAL_GetTick>
 8008890:	1b00      	subs	r0, r0, r4
 8008892:	42a8      	cmp	r0, r5
 8008894:	d9f6      	bls.n	8008884 <SD_read+0x70>
 8008896:	e7d0      	b.n	800883a <SD_read+0x26>
 8008898:	20009b28 	.word	0x20009b28

0800889c <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 800889c:	4b01      	ldr	r3, [pc, #4]	@ (80088a4 <BSP_SD_WriteCpltCallback+0x8>)
 800889e:	2201      	movs	r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
}
 80088a2:	4770      	bx	lr
 80088a4:	20009b2c 	.word	0x20009b2c

080088a8 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 80088a8:	4b01      	ldr	r3, [pc, #4]	@ (80088b0 <BSP_SD_ReadCpltCallback+0x8>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
}
 80088ae:	4770      	bx	lr
 80088b0:	20009b28 	.word	0x20009b28

080088b4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80088b4:	4b03      	ldr	r3, [pc, #12]	@ (80088c4 <disk_status+0x10>)
 80088b6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80088ba:	4403      	add	r3, r0
 80088bc:	6852      	ldr	r2, [r2, #4]
 80088be:	7a18      	ldrb	r0, [r3, #8]
 80088c0:	6853      	ldr	r3, [r2, #4]
 80088c2:	4718      	bx	r3
 80088c4:	20009b30 	.word	0x20009b30

080088c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80088c8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80088ca:	4c05      	ldr	r4, [pc, #20]	@ (80088e0 <disk_read+0x18>)
 80088cc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80088d0:	4404      	add	r4, r0
 80088d2:	686d      	ldr	r5, [r5, #4]
 80088d4:	7a20      	ldrb	r0, [r4, #8]
 80088d6:	68ac      	ldr	r4, [r5, #8]
 80088d8:	46a4      	mov	ip, r4
  return res;
}
 80088da:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80088dc:	4760      	bx	ip
 80088de:	bf00      	nop
 80088e0:	20009b30 	.word	0x20009b30

080088e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80088e4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80088e6:	4c05      	ldr	r4, [pc, #20]	@ (80088fc <disk_write+0x18>)
 80088e8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80088ec:	4404      	add	r4, r0
 80088ee:	686d      	ldr	r5, [r5, #4]
 80088f0:	7a20      	ldrb	r0, [r4, #8]
 80088f2:	68ec      	ldr	r4, [r5, #12]
 80088f4:	46a4      	mov	ip, r4
  return res;
}
 80088f6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80088f8:	4760      	bx	ip
 80088fa:	bf00      	nop
 80088fc:	20009b30 	.word	0x20009b30

08008900 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008900:	4b04      	ldr	r3, [pc, #16]	@ (8008914 <disk_ioctl+0x14>)
 8008902:	eb03 0c00 	add.w	ip, r3, r0
 8008906:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800890a:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	4718      	bx	r3
 8008914:	20009b30 	.word	0x20009b30

08008918 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800891c:	b140      	cbz	r0, 8008930 <validate+0x18>
 800891e:	6803      	ldr	r3, [r0, #0]
 8008920:	4604      	mov	r4, r0
 8008922:	b12b      	cbz	r3, 8008930 <validate+0x18>
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	b11a      	cbz	r2, 8008930 <validate+0x18>
 8008928:	8881      	ldrh	r1, [r0, #4]
 800892a:	88da      	ldrh	r2, [r3, #6]
 800892c:	4291      	cmp	r1, r2
 800892e:	d003      	beq.n	8008938 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8008930:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008932:	2300      	movs	r3, #0
 8008934:	602b      	str	r3, [r5, #0]
	return res;
}
 8008936:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008938:	7858      	ldrb	r0, [r3, #1]
 800893a:	f7ff ffbb 	bl	80088b4 <disk_status>
 800893e:	f010 0001 	ands.w	r0, r0, #1
 8008942:	d1f5      	bne.n	8008930 <validate+0x18>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	e7f5      	b.n	8008934 <validate+0x1c>

08008948 <sync_window>:
{
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800894a:	78c3      	ldrb	r3, [r0, #3]
 800894c:	b90b      	cbnz	r3, 8008952 <sync_window+0xa>
	FRESULT res = FR_OK;
 800894e:	2000      	movs	r0, #0
}
 8008950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8008952:	6b45      	ldr	r5, [r0, #52]	@ 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008954:	f100 0738 	add.w	r7, r0, #56	@ 0x38
 8008958:	4604      	mov	r4, r0
 800895a:	2301      	movs	r3, #1
 800895c:	7840      	ldrb	r0, [r0, #1]
 800895e:	462a      	mov	r2, r5
 8008960:	4639      	mov	r1, r7
 8008962:	f7ff ffbf 	bl	80088e4 <disk_write>
 8008966:	b9a8      	cbnz	r0, 8008994 <sync_window+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008968:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800896a:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 800896c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800896e:	1aaa      	subs	r2, r5, r2
 8008970:	429a      	cmp	r2, r3
 8008972:	d2ec      	bcs.n	800894e <sync_window+0x6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008974:	78a6      	ldrb	r6, [r4, #2]
 8008976:	2e01      	cmp	r6, #1
 8008978:	d801      	bhi.n	800897e <sync_window+0x36>
 800897a:	e7e8      	b.n	800894e <sync_window+0x6>
					wsect += fs->fsize;
 800897c:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 800897e:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8008980:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008982:	462a      	mov	r2, r5
 8008984:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008986:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8008988:	4639      	mov	r1, r7
 800898a:	f7ff ffab 	bl	80088e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800898e:	2e01      	cmp	r6, #1
 8008990:	d1f4      	bne.n	800897c <sync_window+0x34>
 8008992:	e7dc      	b.n	800894e <sync_window+0x6>
			res = FR_DISK_ERR;
 8008994:	2001      	movs	r0, #1
}
 8008996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008998 <sync_fs>:
{
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	4605      	mov	r5, r0
	res = sync_window(fs);
 800899c:	f7ff ffd4 	bl	8008948 <sync_window>
	if (res == FR_OK) {
 80089a0:	b950      	cbnz	r0, 80089b8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089a2:	782b      	ldrb	r3, [r5, #0]
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d008      	beq.n	80089ba <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80089a8:	2200      	movs	r2, #0
 80089aa:	7868      	ldrb	r0, [r5, #1]
 80089ac:	4611      	mov	r1, r2
 80089ae:	f7ff ffa7 	bl	8008900 <disk_ioctl>
 80089b2:	3800      	subs	r0, #0
 80089b4:	bf18      	it	ne
 80089b6:	2001      	movne	r0, #1
}
 80089b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089ba:	792e      	ldrb	r6, [r5, #4]
 80089bc:	2e01      	cmp	r6, #1
 80089be:	d1f3      	bne.n	80089a8 <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 80089c0:	f105 0738 	add.w	r7, r5, #56	@ 0x38
		*d++ = (BYTE)val;
 80089c4:	4601      	mov	r1, r0
 80089c6:	89aa      	ldrh	r2, [r5, #12]
 80089c8:	4604      	mov	r4, r0
 80089ca:	4638      	mov	r0, r7
 80089cc:	f001 fb88 	bl	800a0e0 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 80089d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80089d4:	f8a5 3236 	strh.w	r3, [r5, #566]	@ 0x236
	*ptr++ = (BYTE)val; val >>= 8;
 80089d8:	4b0c      	ldr	r3, [pc, #48]	@ (8008a0c <sync_fs+0x74>)
 80089da:	63ab      	str	r3, [r5, #56]	@ 0x38
 80089dc:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
			fs->winsect = fs->volbase + 1;
 80089e0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 80089e2:	69a8      	ldr	r0, [r5, #24]
 80089e4:	f8c5 0220 	str.w	r0, [r5, #544]	@ 0x220
 80089e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80089ec:	3320      	adds	r3, #32
 80089ee:	f8c5 321c 	str.w	r3, [r5, #540]	@ 0x21c
			fs->winsect = fs->volbase + 1;
 80089f2:	3201      	adds	r2, #1
 80089f4:	696b      	ldr	r3, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80089f6:	f8c5 3224 	str.w	r3, [r5, #548]	@ 0x224
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80089fa:	7868      	ldrb	r0, [r5, #1]
			fs->winsect = fs->volbase + 1;
 80089fc:	636a      	str	r2, [r5, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80089fe:	4633      	mov	r3, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7ff ff6f 	bl	80088e4 <disk_write>
			fs->fsi_flag = 0;
 8008a06:	712c      	strb	r4, [r5, #4]
 8008a08:	e7ce      	b.n	80089a8 <sync_fs+0x10>
 8008a0a:	bf00      	nop
 8008a0c:	41615252 	.word	0x41615252

08008a10 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8008a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 8008a14:	7807      	ldrb	r7, [r0, #0]
 8008a16:	2f02      	cmp	r7, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8008a18:	4604      	mov	r4, r0
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8008a1e:	d006      	beq.n	8008a2e <put_fat.part.0+0x1e>
 8008a20:	2f03      	cmp	r7, #3
 8008a22:	d04c      	beq.n	8008abe <put_fat.part.0+0xae>
 8008a24:	2f01      	cmp	r7, #1
 8008a26:	d01c      	beq.n	8008a62 <put_fat.part.0+0x52>
 8008a28:	2002      	movs	r0, #2
}
 8008a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008a2e:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8008a32:	6a82      	ldr	r2, [r0, #40]	@ 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a34:	6b43      	ldr	r3, [r0, #52]	@ 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008a36:	ea4f 075c 	mov.w	r7, ip, lsr #1
 8008a3a:	fbb1 f7f7 	udiv	r7, r1, r7
 8008a3e:	4417      	add	r7, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a40:	429f      	cmp	r7, r3
 8008a42:	d15c      	bne.n	8008afe <put_fat.part.0+0xee>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a44:	f100 0838 	add.w	r8, r0, #56	@ 0x38
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a48:	006d      	lsls	r5, r5, #1
 8008a4a:	fbb5 f3fc 	udiv	r3, r5, ip
 8008a4e:	fb0c 5513 	mls	r5, ip, r3, r5
 8008a52:	eb08 0305 	add.w	r3, r8, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8008a56:	f808 6005 	strb.w	r6, [r8, r5]
 8008a5a:	f3c6 2607 	ubfx	r6, r6, #8, #8
	*ptr++ = (BYTE)val;
 8008a5e:	705e      	strb	r6, [r3, #1]
			break;
 8008a60:	e048      	b.n	8008af4 <put_fat.part.0+0xe4>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a62:	6a82      	ldr	r2, [r0, #40]	@ 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a64:	6b43      	ldr	r3, [r0, #52]	@ 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a66:	8981      	ldrh	r1, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 8008a68:	eb05 0855 	add.w	r8, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a6c:	fbb8 fcf1 	udiv	ip, r8, r1
 8008a70:	eb0c 0902 	add.w	r9, ip, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a74:	4599      	cmp	r9, r3
 8008a76:	d167      	bne.n	8008b48 <put_fat.part.0+0x138>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a78:	f100 0738 	add.w	r7, r0, #56	@ 0x38
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a7c:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 8008a80:	fb01 8c1c 	mls	ip, r1, ip, r8
 8008a84:	f108 0801 	add.w	r8, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a88:	d072      	beq.n	8008b70 <put_fat.part.0+0x160>
 8008a8a:	f817 300c 	ldrb.w	r3, [r7, ip]
 8008a8e:	f003 030f 	and.w	r3, r3, #15
 8008a92:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8008a96:	f807 300c 	strb.w	r3, [r7, ip]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a9a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a9c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a9e:	89a0      	ldrh	r0, [r4, #12]
			fs->wflag = 1;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008aa4:	fbb8 f3f0 	udiv	r3, r8, r0
 8008aa8:	eb03 0901 	add.w	r9, r3, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008aac:	454a      	cmp	r2, r9
 8008aae:	d16c      	bne.n	8008b8a <put_fat.part.0+0x17a>
			p = fs->win + bc % SS(fs);
 8008ab0:	fb00 8313 	mls	r3, r0, r3, r8
 8008ab4:	441f      	add	r7, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ab6:	f3c6 1307 	ubfx	r3, r6, #4, #8
 8008aba:	703b      	strb	r3, [r7, #0]
			break;
 8008abc:	e01a      	b.n	8008af4 <put_fat.part.0+0xe4>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008abe:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8008ac2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ac4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008ac6:	ea4f 079c 	mov.w	r7, ip, lsr #2
 8008aca:	fbb1 f7f7 	udiv	r7, r1, r7
 8008ace:	4417      	add	r7, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ad0:	429f      	cmp	r7, r3
 8008ad2:	d126      	bne.n	8008b22 <put_fat.part.0+0x112>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008ad4:	f100 0838 	add.w	r8, r0, #56	@ 0x38
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008ad8:	00ad      	lsls	r5, r5, #2
 8008ada:	fbb5 f3fc 	udiv	r3, r5, ip
 8008ade:	fb0c 5513 	mls	r5, ip, r3, r5
 8008ae2:	f026 4670 	bic.w	r6, r6, #4026531840	@ 0xf0000000
	rv = rv << 8 | ptr[0];
 8008ae6:	f858 3005 	ldr.w	r3, [r8, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008aea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008aee:	4333      	orrs	r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8008af0:	f848 3005 	str.w	r3, [r8, r5]
			fs->wflag = 1;
 8008af4:	2301      	movs	r3, #1
 8008af6:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008af8:	2000      	movs	r0, #0
}
 8008afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = sync_window(fs);		/* Write-back changes */
 8008afe:	f7ff ff23 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d191      	bne.n	8008a2a <put_fat.part.0+0x1a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b06:	f104 0838 	add.w	r8, r4, #56	@ 0x38
 8008b0a:	7860      	ldrb	r0, [r4, #1]
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	463a      	mov	r2, r7
 8008b10:	4641      	mov	r1, r8
 8008b12:	f7ff fed9 	bl	80088c8 <disk_read>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d15b      	bne.n	8008bd2 <put_fat.part.0+0x1c2>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b1a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
			fs->winsect = sector;
 8008b1e:	6367      	str	r7, [r4, #52]	@ 0x34
			if (res != FR_OK) break;
 8008b20:	e792      	b.n	8008a48 <put_fat.part.0+0x38>
		res = sync_window(fs);		/* Write-back changes */
 8008b22:	f7ff ff11 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f47f af7f 	bne.w	8008a2a <put_fat.part.0+0x1a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b2c:	f104 0838 	add.w	r8, r4, #56	@ 0x38
 8008b30:	7860      	ldrb	r0, [r4, #1]
 8008b32:	2301      	movs	r3, #1
 8008b34:	463a      	mov	r2, r7
 8008b36:	4641      	mov	r1, r8
 8008b38:	f7ff fec6 	bl	80088c8 <disk_read>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d148      	bne.n	8008bd2 <put_fat.part.0+0x1c2>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b40:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
			fs->winsect = sector;
 8008b44:	6367      	str	r7, [r4, #52]	@ 0x34
			if (res != FR_OK) break;
 8008b46:	e7c7      	b.n	8008ad8 <put_fat.part.0+0xc8>
		res = sync_window(fs);		/* Write-back changes */
 8008b48:	f7ff fefe 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f47f af6c 	bne.w	8008a2a <put_fat.part.0+0x1a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b52:	463b      	mov	r3, r7
 8008b54:	f104 0738 	add.w	r7, r4, #56	@ 0x38
 8008b58:	7860      	ldrb	r0, [r4, #1]
 8008b5a:	464a      	mov	r2, r9
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7ff feb3 	bl	80088c8 <disk_read>
 8008b62:	bbb0      	cbnz	r0, 8008bd2 <put_fat.part.0+0x1c2>
			p = fs->win + bc++ % SS(fs);
 8008b64:	89a1      	ldrh	r1, [r4, #12]
			fs->winsect = sector;
 8008b66:	f8c4 9034 	str.w	r9, [r4, #52]	@ 0x34
			if (res != FR_OK) break;
 8008b6a:	fbb8 fcf1 	udiv	ip, r8, r1
 8008b6e:	e785      	b.n	8008a7c <put_fat.part.0+0x6c>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b70:	f807 600c 	strb.w	r6, [r7, ip]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b74:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b76:	6b62      	ldr	r2, [r4, #52]	@ 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b78:	89a0      	ldrh	r0, [r4, #12]
			fs->wflag = 1;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b7e:	fbb8 f3f0 	udiv	r3, r8, r0
 8008b82:	eb03 0901 	add.w	r9, r3, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b86:	454a      	cmp	r2, r9
 8008b88:	d018      	beq.n	8008bbc <put_fat.part.0+0x1ac>
		res = sync_window(fs);		/* Write-back changes */
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7ff fedc 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b90:	2800      	cmp	r0, #0
 8008b92:	f47f af4a 	bne.w	8008a2a <put_fat.part.0+0x1a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b96:	7860      	ldrb	r0, [r4, #1]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	464a      	mov	r2, r9
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	f7ff fe93 	bl	80088c8 <disk_read>
 8008ba2:	b9b0      	cbnz	r0, 8008bd2 <put_fat.part.0+0x1c2>
			p = fs->win + bc % SS(fs);
 8008ba4:	89a2      	ldrh	r2, [r4, #12]
 8008ba6:	fbb8 f3f2 	udiv	r3, r8, r2
 8008baa:	fb02 8313 	mls	r3, r2, r3, r8
			fs->winsect = sector;
 8008bae:	f8c4 9034 	str.w	r9, [r4, #52]	@ 0x34
			p = fs->win + bc % SS(fs);
 8008bb2:	441f      	add	r7, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	f47f af7e 	bne.w	8008ab6 <put_fat.part.0+0xa6>
 8008bba:	e002      	b.n	8008bc2 <put_fat.part.0+0x1b2>
			p = fs->win + bc % SS(fs);
 8008bbc:	fb00 8813 	mls	r8, r0, r3, r8
 8008bc0:	4447      	add	r7, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008bc2:	783b      	ldrb	r3, [r7, #0]
 8008bc4:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8008bc8:	f023 030f 	bic.w	r3, r3, #15
 8008bcc:	4333      	orrs	r3, r6
 8008bce:	703b      	strb	r3, [r7, #0]
			break;
 8008bd0:	e790      	b.n	8008af4 <put_fat.part.0+0xe4>
			fs->winsect = sector;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bd6:	6363      	str	r3, [r4, #52]	@ 0x34
				res = FR_DISK_ERR;
 8008bd8:	2001      	movs	r0, #1
 8008bda:	e726      	b.n	8008a2a <put_fat.part.0+0x1a>

08008bdc <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008bdc:	2901      	cmp	r1, #1
 8008bde:	d930      	bls.n	8008c42 <get_fat.isra.0+0x66>
 8008be0:	69c3      	ldr	r3, [r0, #28]
 8008be2:	4299      	cmp	r1, r3
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	4605      	mov	r5, r0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008bec:	d302      	bcc.n	8008bf4 <get_fat.isra.0+0x18>
		val = 1;	/* Internal error */
 8008bee:	2001      	movs	r0, #1
}
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (fs->fs_type) {
 8008bf4:	7806      	ldrb	r6, [r0, #0]
 8008bf6:	2e02      	cmp	r6, #2
 8008bf8:	d039      	beq.n	8008c6e <get_fat.isra.0+0x92>
 8008bfa:	2e03      	cmp	r6, #3
 8008bfc:	d023      	beq.n	8008c46 <get_fat.isra.0+0x6a>
 8008bfe:	2e01      	cmp	r6, #1
 8008c00:	d1f5      	bne.n	8008bee <get_fat.isra.0+0x12>
			bc = (UINT)clst; bc += bc / 2;
 8008c02:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c06:	6a81      	ldr	r1, [r0, #40]	@ 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c08:	6b42      	ldr	r2, [r0, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c0a:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8008c0e:	fbb7 f3fc 	udiv	r3, r7, ip
 8008c12:	eb03 0801 	add.w	r8, r3, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c16:	4590      	cmp	r8, r2
 8008c18:	d13b      	bne.n	8008c92 <get_fat.isra.0+0xb6>
			wc = fs->win[bc++ % SS(fs)];
 8008c1a:	fb0c 7313 	mls	r3, ip, r3, r7
 8008c1e:	442b      	add	r3, r5
 8008c20:	3701      	adds	r7, #1
 8008c22:	f893 6038 	ldrb.w	r6, [r3, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c26:	fbb7 f3fc 	udiv	r3, r7, ip
 8008c2a:	eb03 0801 	add.w	r8, r3, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c2e:	4590      	cmp	r8, r2
 8008c30:	d073      	beq.n	8008d1a <get_fat.isra.0+0x13e>
		res = sync_window(fs);		/* Write-back changes */
 8008c32:	4628      	mov	r0, r5
 8008c34:	f7ff fe88 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d060      	beq.n	8008cfe <get_fat.isra.0+0x122>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c40:	e7d6      	b.n	8008bf0 <get_fat.isra.0+0x14>
		val = 1;	/* Internal error */
 8008c42:	2001      	movs	r0, #1
}
 8008c44:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c46:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8008c48:	8983      	ldrh	r3, [r0, #12]
 8008c4a:	089e      	lsrs	r6, r3, #2
 8008c4c:	fbb1 f6f6 	udiv	r6, r1, r6
 8008c50:	4416      	add	r6, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c52:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008c54:	4296      	cmp	r6, r2
 8008c56:	d142      	bne.n	8008cde <get_fat.isra.0+0x102>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c58:	f100 0738 	add.w	r7, r0, #56	@ 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008c5c:	00a4      	lsls	r4, r4, #2
 8008c5e:	fbb4 f2f3 	udiv	r2, r4, r3
 8008c62:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 8008c66:	5938      	ldr	r0, [r7, r4]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008c68:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8008c6c:	e7c0      	b.n	8008bf0 <get_fat.isra.0+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c6e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8008c70:	8983      	ldrh	r3, [r0, #12]
 8008c72:	085e      	lsrs	r6, r3, #1
 8008c74:	fbb1 f6f6 	udiv	r6, r1, r6
 8008c78:	4416      	add	r6, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c7a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008c7c:	4296      	cmp	r6, r2
 8008c7e:	d11e      	bne.n	8008cbe <get_fat.isra.0+0xe2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c80:	f100 0738 	add.w	r7, r0, #56	@ 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008c84:	0064      	lsls	r4, r4, #1
 8008c86:	fbb4 f2f3 	udiv	r2, r4, r3
 8008c8a:	fb03 4412 	mls	r4, r3, r2, r4
 8008c8e:	5b38      	ldrh	r0, [r7, r4]
			break;
 8008c90:	e7ae      	b.n	8008bf0 <get_fat.isra.0+0x14>
		res = sync_window(fs);		/* Write-back changes */
 8008c92:	f7ff fe59 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d1d0      	bne.n	8008c3c <get_fat.isra.0+0x60>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c9a:	7868      	ldrb	r0, [r5, #1]
 8008c9c:	4633      	mov	r3, r6
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8008ca4:	f7ff fe10 	bl	80088c8 <disk_read>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d143      	bne.n	8008d34 <get_fat.isra.0+0x158>
			wc = fs->win[bc++ % SS(fs)];
 8008cac:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cb0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
			fs->winsect = sector;
 8008cb2:	f8c5 8034 	str.w	r8, [r5, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	fbb7 f3fc 	udiv	r3, r7, ip
 8008cbc:	e7ad      	b.n	8008c1a <get_fat.isra.0+0x3e>
		res = sync_window(fs);		/* Write-back changes */
 8008cbe:	f7ff fe43 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d1ba      	bne.n	8008c3c <get_fat.isra.0+0x60>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008cc6:	f105 0738 	add.w	r7, r5, #56	@ 0x38
 8008cca:	7868      	ldrb	r0, [r5, #1]
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4632      	mov	r2, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7ff fdf9 	bl	80088c8 <disk_read>
 8008cd6:	bb68      	cbnz	r0, 8008d34 <get_fat.isra.0+0x158>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008cd8:	89ab      	ldrh	r3, [r5, #12]
			fs->winsect = sector;
 8008cda:	636e      	str	r6, [r5, #52]	@ 0x34
	return res;
 8008cdc:	e7d2      	b.n	8008c84 <get_fat.isra.0+0xa8>
		res = sync_window(fs);		/* Write-back changes */
 8008cde:	f7ff fe33 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d1aa      	bne.n	8008c3c <get_fat.isra.0+0x60>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008ce6:	f105 0738 	add.w	r7, r5, #56	@ 0x38
 8008cea:	7868      	ldrb	r0, [r5, #1]
 8008cec:	2301      	movs	r3, #1
 8008cee:	4632      	mov	r2, r6
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	f7ff fde9 	bl	80088c8 <disk_read>
 8008cf6:	b9e8      	cbnz	r0, 8008d34 <get_fat.isra.0+0x158>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008cf8:	89ab      	ldrh	r3, [r5, #12]
			fs->winsect = sector;
 8008cfa:	636e      	str	r6, [r5, #52]	@ 0x34
	return res;
 8008cfc:	e7ae      	b.n	8008c5c <get_fat.isra.0+0x80>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008cfe:	7868      	ldrb	r0, [r5, #1]
 8008d00:	2301      	movs	r3, #1
 8008d02:	4642      	mov	r2, r8
 8008d04:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8008d08:	f7ff fdde 	bl	80088c8 <disk_read>
 8008d0c:	b990      	cbnz	r0, 8008d34 <get_fat.isra.0+0x158>
			fs->winsect = sector;
 8008d0e:	f8c5 8034 	str.w	r8, [r5, #52]	@ 0x34
			wc |= fs->win[bc % SS(fs)] << 8;
 8008d12:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8008d16:	fbb7 f3fc 	udiv	r3, r7, ip
 8008d1a:	fb0c 7713 	mls	r7, ip, r3, r7
 8008d1e:	442f      	add	r7, r5
 8008d20:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008d24:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008d28:	07e3      	lsls	r3, r4, #31
 8008d2a:	bf4c      	ite	mi
 8008d2c:	0900      	lsrmi	r0, r0, #4
 8008d2e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8008d32:	e75d      	b.n	8008bf0 <get_fat.isra.0+0x14>
			fs->winsect = sector;
 8008d34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d38:	636b      	str	r3, [r5, #52]	@ 0x34
	return res;
 8008d3a:	e77f      	b.n	8008c3c <get_fat.isra.0+0x60>

08008d3c <create_chain>:
{
 8008d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8008d40:	6807      	ldr	r7, [r0, #0]
{
 8008d42:	4606      	mov	r6, r0
	if (clst == 0) {	/* Create a new chain */
 8008d44:	4688      	mov	r8, r1
 8008d46:	2900      	cmp	r1, #0
 8008d48:	d14b      	bne.n	8008de2 <create_chain+0xa6>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d4a:	697d      	ldr	r5, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	b39d      	cbz	r5, 8008db8 <create_chain+0x7c>
 8008d50:	429d      	cmp	r5, r3
 8008d52:	bf28      	it	cs
 8008d54:	2501      	movcs	r5, #1
 8008d56:	462c      	mov	r4, r5
 8008d58:	e006      	b.n	8008d68 <create_chain+0x2c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d5a:	2801      	cmp	r0, #1
 8008d5c:	d03d      	beq.n	8008dda <create_chain+0x9e>
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d050      	beq.n	8008e04 <create_chain+0xc8>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d62:	42ac      	cmp	r4, r5
 8008d64:	d04a      	beq.n	8008dfc <create_chain+0xc0>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d66:	69fb      	ldr	r3, [r7, #28]
			ncl++;							/* Next cluster */
 8008d68:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	d802      	bhi.n	8008d74 <create_chain+0x38>
				if (ncl > scl) return 0;	/* No free cluster */
 8008d6e:	2d01      	cmp	r5, #1
 8008d70:	d044      	beq.n	8008dfc <create_chain+0xc0>
				ncl = 2;
 8008d72:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d74:	6830      	ldr	r0, [r6, #0]
 8008d76:	4621      	mov	r1, r4
 8008d78:	f7ff ff30 	bl	8008bdc <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d1ec      	bne.n	8008d5a <create_chain+0x1e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d80:	2c01      	cmp	r4, #1
 8008d82:	d92a      	bls.n	8008dda <create_chain+0x9e>
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	429c      	cmp	r4, r3
 8008d88:	d227      	bcs.n	8008dda <create_chain+0x9e>
 8008d8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff fe3d 	bl	8008a10 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8008d96:	b9f0      	cbnz	r0, 8008dd6 <create_chain+0x9a>
 8008d98:	f1b8 0f00 	cmp.w	r8, #0
 8008d9c:	d10e      	bne.n	8008dbc <create_chain+0x80>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008d9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008da2:	3b02      	subs	r3, #2
 8008da4:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 8008da6:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008da8:	d801      	bhi.n	8008dae <create_chain+0x72>
 8008daa:	3a01      	subs	r2, #1
 8008dac:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
 8008dae:	793b      	ldrb	r3, [r7, #4]
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	713b      	strb	r3, [r7, #4]
 8008db6:	e011      	b.n	8008ddc <create_chain+0xa0>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008db8:	2501      	movs	r5, #1
 8008dba:	e7cc      	b.n	8008d56 <create_chain+0x1a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008dbc:	f1b8 0f01 	cmp.w	r8, #1
 8008dc0:	d00b      	beq.n	8008dda <create_chain+0x9e>
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	4598      	cmp	r8, r3
 8008dc6:	d208      	bcs.n	8008dda <create_chain+0x9e>
 8008dc8:	4622      	mov	r2, r4
 8008dca:	4641      	mov	r1, r8
 8008dcc:	4638      	mov	r0, r7
 8008dce:	f7ff fe1f 	bl	8008a10 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d0e3      	beq.n	8008d9e <create_chain+0x62>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008dd6:	2801      	cmp	r0, #1
 8008dd8:	d014      	beq.n	8008e04 <create_chain+0xc8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008dda:	2401      	movs	r4, #1
}
 8008ddc:	4620      	mov	r0, r4
 8008dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008de2:	4638      	mov	r0, r7
 8008de4:	f7ff fefa 	bl	8008bdc <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008de8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008dea:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008dec:	d9f5      	bls.n	8008dda <create_chain+0x9e>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d008      	beq.n	8008e04 <create_chain+0xc8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4283      	cmp	r3, r0
 8008df6:	d8f1      	bhi.n	8008ddc <create_chain+0xa0>
 8008df8:	4645      	mov	r5, r8
 8008dfa:	e7ac      	b.n	8008d56 <create_chain+0x1a>
				if (ncl > scl) return 0;	/* No free cluster */
 8008dfc:	2400      	movs	r4, #0
}
 8008dfe:	4620      	mov	r0, r4
 8008e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008e04:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
}
 8008e08:	4620      	mov	r0, r4
 8008e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e0e:	bf00      	nop

08008e10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	4698      	mov	r8, r3
 8008e16:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8008e18:	2300      	movs	r3, #0
{
 8008e1a:	460c      	mov	r4, r1
	*bw = 0;	/* Clear write byte counter */
 8008e1c:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008e20:	a903      	add	r1, sp, #12
{
 8008e22:	4605      	mov	r5, r0
 8008e24:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008e26:	f7ff fd77 	bl	8008918 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d138      	bne.n	8008ea0 <f_write+0x90>
 8008e2e:	7d68      	ldrb	r0, [r5, #21]
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d135      	bne.n	8008ea0 <f_write+0x90>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008e34:	7d2b      	ldrb	r3, [r5, #20]
 8008e36:	079a      	lsls	r2, r3, #30
 8008e38:	f140 80e9 	bpl.w	800900e <f_write+0x1fe>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008e3c:	69ae      	ldr	r6, [r5, #24]
 8008e3e:	42fe      	cmn	r6, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008e40:	bf28      	it	cs
 8008e42:	43f7      	mvncs	r7, r6
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008e44:	b34f      	cbz	r7, 8008e9a <f_write+0x8a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008e46:	f8dd 900c 	ldr.w	r9, [sp, #12]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e4a:	9000      	str	r0, [sp, #0]
 8008e4c:	f105 0b30 	add.w	fp, r5, #48	@ 0x30
 8008e50:	4631      	mov	r1, r6
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008e52:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008e56:	fbb1 f0f3 	udiv	r0, r1, r3
 8008e5a:	fb03 1210 	mls	r2, r3, r0, r1
 8008e5e:	b312      	cbz	r2, 8008ea6 <f_write+0x96>
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	42bb      	cmp	r3, r7
 8008e64:	bf28      	it	cs
 8008e66:	463b      	movcs	r3, r7
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e68:	46da      	mov	sl, fp
	if (cnt) {
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d15e      	bne.n	8008f2c <f_write+0x11c>
 8008e6e:	4620      	mov	r0, r4
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
 8008e70:	7d2a      	ldrb	r2, [r5, #20]
 8008e72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008e76:	752a      	strb	r2, [r5, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e78:	68ea      	ldr	r2, [r5, #12]
 8008e7a:	4419      	add	r1, r3
 8008e7c:	428a      	cmp	r2, r1
 8008e7e:	bf38      	it	cc
 8008e80:	460a      	movcc	r2, r1
 8008e82:	60ea      	str	r2, [r5, #12]
 8008e84:	f8d8 2000 	ldr.w	r2, [r8]
 8008e88:	61a9      	str	r1, [r5, #24]
 8008e8a:	441a      	add	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 8008e8c:	1aff      	subs	r7, r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e8e:	4604      	mov	r4, r0
 8008e90:	f8c8 2000 	str.w	r2, [r8]
	for ( ;  btw;							/* Repeat until all data written */
 8008e94:	d1dd      	bne.n	8008e52 <f_write+0x42>
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008e96:	9800      	ldr	r0, [sp, #0]
 8008e98:	7d2b      	ldrb	r3, [r5, #20]
 8008e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9e:	752b      	strb	r3, [r5, #20]

	LEAVE_FF(fs, FR_OK);
}
 8008ea0:	b005      	add	sp, #20
 8008ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008ea6:	f8b9 a00a 	ldrh.w	sl, [r9, #10]
 8008eaa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8008eae:	ea1a 0a00 	ands.w	sl, sl, r0
 8008eb2:	d10e      	bne.n	8008ed2 <f_write+0xc2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	d178      	bne.n	8008faa <f_write+0x19a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008eb8:	68a8      	ldr	r0, [r5, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f000 80a9 	beq.w	8009012 <f_write+0x202>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008ec0:	2801      	cmp	r0, #1
 8008ec2:	d03e      	beq.n	8008f42 <f_write+0x132>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	f000 809d 	beq.w	8009004 <f_write+0x1f4>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008eca:	68ab      	ldr	r3, [r5, #8]
				fp->clust = clst;			/* Update current cluster */
 8008ecc:	61e8      	str	r0, [r5, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008ece:	b903      	cbnz	r3, 8008ed2 <f_write+0xc2>
 8008ed0:	60a8      	str	r0, [r5, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ed2:	f995 3014 	ldrsb.w	r3, [r5, #20]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f2c0 8086 	blt.w	8008fe8 <f_write+0x1d8>
	clst -= 2;
 8008edc:	69eb      	ldr	r3, [r5, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008ede:	f8d9 201c 	ldr.w	r2, [r9, #28]
	clst -= 2;
 8008ee2:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008ee4:	3a02      	subs	r2, #2
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d22b      	bcs.n	8008f42 <f_write+0x132>
	return clst * fs->csize + fs->database;
 8008eea:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8008eee:	f8d9 6030 	ldr.w	r6, [r9, #48]	@ 0x30
 8008ef2:	fb01 6603 	mla	r6, r1, r3, r6
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ef6:	b326      	cbz	r6, 8008f42 <f_write+0x132>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ef8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008efc:	42bb      	cmp	r3, r7
			sect += csect;
 8008efe:	4456      	add	r6, sl
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008f00:	d924      	bls.n	8008f4c <f_write+0x13c>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f02:	6a2a      	ldr	r2, [r5, #32]
				fp->fptr < fp->obj.objsize &&
 8008f04:	69a9      	ldr	r1, [r5, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f06:	42b2      	cmp	r2, r6
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f08:	f105 0a30 	add.w	sl, r5, #48	@ 0x30
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f0c:	d003      	beq.n	8008f16 <f_write+0x106>
 8008f0e:	68ea      	ldr	r2, [r5, #12]
 8008f10:	428a      	cmp	r2, r1
 8008f12:	f200 808e 	bhi.w	8009032 <f_write+0x222>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008f16:	fbb1 f2f3 	udiv	r2, r1, r3
 8008f1a:	fb03 1212 	mls	r2, r3, r2, r1
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	42bb      	cmp	r3, r7
 8008f22:	bf28      	it	cs
 8008f24:	463b      	movcs	r3, r7
			fp->sect = sect;
 8008f26:	622e      	str	r6, [r5, #32]
	if (cnt) {
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0a0      	beq.n	8008e6e <f_write+0x5e>
 8008f2c:	3a01      	subs	r2, #1
 8008f2e:	4492      	add	sl, r2
 8008f30:	18e0      	adds	r0, r4, r3
			*d++ = *s++;
 8008f32:	f814 2b01 	ldrb.w	r2, [r4], #1
 8008f36:	f80a 2f01 	strb.w	r2, [sl, #1]!
		} while (--cnt);
 8008f3a:	4284      	cmp	r4, r0
 8008f3c:	d1f9      	bne.n	8008f32 <f_write+0x122>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008f3e:	69a9      	ldr	r1, [r5, #24]
 8008f40:	e796      	b.n	8008e70 <f_write+0x60>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f42:	2002      	movs	r0, #2
 8008f44:	7568      	strb	r0, [r5, #21]
}
 8008f46:	b005      	add	sp, #20
 8008f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008f4c:	fbb7 f3f3 	udiv	r3, r7, r3
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f50:	eb0a 0203 	add.w	r2, sl, r3
 8008f54:	428a      	cmp	r2, r1
					cc = fs->csize - csect;
 8008f56:	bf88      	it	hi
 8008f58:	eba1 030a 	subhi.w	r3, r1, sl
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f5c:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	4632      	mov	r2, r6
 8008f64:	4621      	mov	r1, r4
 8008f66:	f7ff fcbd 	bl	80088e4 <disk_write>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d14a      	bne.n	8009004 <f_write+0x1f4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008f6e:	6a2a      	ldr	r2, [r5, #32]
 8008f70:	9b01      	ldr	r3, [sp, #4]
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008f72:	f8b9 100c 	ldrh.w	r1, [r9, #12]
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008f76:	1b92      	subs	r2, r2, r6
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d211      	bcs.n	8008fa0 <f_write+0x190>
	if (cnt) {
 8008f7c:	b161      	cbz	r1, 8008f98 <f_write+0x188>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008f7e:	fb01 4202 	mla	r2, r1, r2, r4
 8008f82:	4411      	add	r1, r2
 8008f84:	f105 002f 	add.w	r0, r5, #47	@ 0x2f
			*d++ = *s++;
 8008f88:	f812 6b01 	ldrb.w	r6, [r2], #1
 8008f8c:	f800 6f01 	strb.w	r6, [r0, #1]!
		} while (--cnt);
 8008f90:	428a      	cmp	r2, r1
 8008f92:	d1f9      	bne.n	8008f88 <f_write+0x178>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008f94:	f8b9 100c 	ldrh.w	r1, [r9, #12]
					fp->flag &= (BYTE)~FA_DIRTY;
 8008f98:	7d2a      	ldrb	r2, [r5, #20]
 8008f9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f9e:	752a      	strb	r2, [r5, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008fa0:	fb01 f303 	mul.w	r3, r1, r3
				continue;
 8008fa4:	18e0      	adds	r0, r4, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008fa6:	69a9      	ldr	r1, [r5, #24]
				continue;
 8008fa8:	e766      	b.n	8008e78 <f_write+0x68>
					if (fp->cltbl) {
 8008faa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d038      	beq.n	8009022 <f_write+0x212>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008fb0:	682e      	ldr	r6, [r5, #0]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008fb2:	6842      	ldr	r2, [r0, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008fb4:	89b3      	ldrh	r3, [r6, #12]
 8008fb6:	fbb1 f3f3 	udiv	r3, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008fba:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008fbc:	8971      	ldrh	r1, [r6, #10]
 8008fbe:	fbb3 f3f1 	udiv	r3, r3, r1
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	f43f af67 	beq.w	8008e96 <f_write+0x86>
 8008fc8:	4601      	mov	r1, r0
 8008fca:	e005      	b.n	8008fd8 <f_write+0x1c8>
		cl -= ncl; tbl++;		/* Next fragment */
 8008fcc:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008fce:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	f43f af5f 	beq.w	8008e96 <f_write+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d2f7      	bcs.n	8008fcc <f_write+0x1bc>
	return cl + *tbl;	/* Return the cluster number */
 8008fdc:	6848      	ldr	r0, [r1, #4]
 8008fde:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f47f af6d 	bne.w	8008ec0 <f_write+0xb0>
 8008fe6:	e756      	b.n	8008e96 <f_write+0x86>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fe8:	6a2a      	ldr	r2, [r5, #32]
 8008fea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 8008ff4:	f7ff fc76 	bl	80088e4 <disk_write>
 8008ff8:	b920      	cbnz	r0, 8009004 <f_write+0x1f4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ffa:	7d2b      	ldrb	r3, [r5, #20]
 8008ffc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009000:	752b      	strb	r3, [r5, #20]
 8009002:	e76b      	b.n	8008edc <f_write+0xcc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009004:	2001      	movs	r0, #1
 8009006:	7568      	strb	r0, [r5, #21]
}
 8009008:	b005      	add	sp, #20
 800900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800900e:	2007      	movs	r0, #7
 8009010:	e746      	b.n	8008ea0 <f_write+0x90>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009012:	4651      	mov	r1, sl
 8009014:	4628      	mov	r0, r5
 8009016:	f7ff fe91 	bl	8008d3c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800901a:	2800      	cmp	r0, #0
 800901c:	f47f af50 	bne.w	8008ec0 <f_write+0xb0>
 8009020:	e739      	b.n	8008e96 <f_write+0x86>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009022:	69e9      	ldr	r1, [r5, #28]
 8009024:	4628      	mov	r0, r5
 8009026:	f7ff fe89 	bl	8008d3c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800902a:	2800      	cmp	r0, #0
 800902c:	f47f af48 	bne.w	8008ec0 <f_write+0xb0>
 8009030:	e731      	b.n	8008e96 <f_write+0x86>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009032:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009036:	2301      	movs	r3, #1
 8009038:	4632      	mov	r2, r6
 800903a:	4651      	mov	r1, sl
 800903c:	f7ff fc44 	bl	80088c8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8009040:	2800      	cmp	r0, #0
 8009042:	d1df      	bne.n	8009004 <f_write+0x1f4>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009044:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009048:	69a9      	ldr	r1, [r5, #24]
 800904a:	e764      	b.n	8008f16 <f_write+0x106>

0800904c <f_sync>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800904c:	2800      	cmp	r0, #0
 800904e:	d03c      	beq.n	80090ca <f_sync+0x7e>
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009052:	6803      	ldr	r3, [r0, #0]
 8009054:	4604      	mov	r4, r0
 8009056:	b12b      	cbz	r3, 8009064 <f_sync+0x18>
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	b11a      	cbz	r2, 8009064 <f_sync+0x18>
 800905c:	8881      	ldrh	r1, [r0, #4]
 800905e:	88da      	ldrh	r2, [r3, #6]
 8009060:	4291      	cmp	r1, r2
 8009062:	d001      	beq.n	8009068 <f_sync+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8009064:	2009      	movs	r0, #9
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8009066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009068:	7858      	ldrb	r0, [r3, #1]
 800906a:	f7ff fc23 	bl	80088b4 <disk_status>
 800906e:	07c2      	lsls	r2, r0, #31
 8009070:	d4f8      	bmi.n	8009064 <f_sync+0x18>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009072:	7d23      	ldrb	r3, [r4, #20]
 8009074:	f013 0040 	ands.w	r0, r3, #64	@ 0x40
 8009078:	d0f5      	beq.n	8009066 <f_sync+0x1a>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800907a:	061b      	lsls	r3, r3, #24
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800907c:	6825      	ldr	r5, [r4, #0]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800907e:	d438      	bmi.n	80090f2 <f_sync+0xa6>
			tm = GET_FATTIME();				/* Modified time */
 8009080:	f7ff fac4 	bl	800860c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8009084:	6a66      	ldr	r6, [r4, #36]	@ 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009086:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009088:	429e      	cmp	r6, r3
			tm = GET_FATTIME();				/* Modified time */
 800908a:	4607      	mov	r7, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800908c:	d11f      	bne.n	80090ce <f_sync+0x82>
					dir = fp->dir_ptr;
 800908e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009090:	7ada      	ldrb	r2, [r3, #11]
 8009092:	f042 0220 	orr.w	r2, r2, #32
 8009096:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009098:	68a2      	ldr	r2, [r4, #8]
 800909a:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800909c:	769a      	strb	r2, [r3, #26]
 800909e:	f3c2 2007 	ubfx	r0, r2, #8, #8
	*ptr++ = (BYTE)val;
 80090a2:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 80090a4:	7809      	ldrb	r1, [r1, #0]
 80090a6:	2903      	cmp	r1, #3
 80090a8:	d031      	beq.n	800910e <f_sync+0xc2>
	*ptr++ = (BYTE)val; val >>= 8;
 80090aa:	68e2      	ldr	r2, [r4, #12]
 80090ac:	61da      	str	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80090ae:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80090b0:	f8c3 7016 	str.w	r7, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80090b4:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 80090b6:	2301      	movs	r3, #1
 80090b8:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80090ba:	4628      	mov	r0, r5
 80090bc:	f7ff fc6c 	bl	8008998 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80090c0:	7d23      	ldrb	r3, [r4, #20]
 80090c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090c6:	7523      	strb	r3, [r4, #20]
}
 80090c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_INVALID_OBJECT;
 80090ca:	2009      	movs	r0, #9
}
 80090cc:	4770      	bx	lr
		res = sync_window(fs);		/* Write-back changes */
 80090ce:	4628      	mov	r0, r5
 80090d0:	f7ff fc3a 	bl	8008948 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d1c6      	bne.n	8009066 <f_sync+0x1a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090d8:	7868      	ldrb	r0, [r5, #1]
 80090da:	2301      	movs	r3, #1
 80090dc:	4632      	mov	r2, r6
 80090de:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80090e2:	f7ff fbf1 	bl	80088c8 <disk_read>
 80090e6:	b1b8      	cbz	r0, 8009118 <f_sync+0xcc>
			fs->winsect = sector;
 80090e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090ec:	636b      	str	r3, [r5, #52]	@ 0x34
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80090ee:	2001      	movs	r0, #1
}
 80090f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80090f2:	6a22      	ldr	r2, [r4, #32]
 80090f4:	7868      	ldrb	r0, [r5, #1]
 80090f6:	2301      	movs	r3, #1
 80090f8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80090fc:	f7ff fbf2 	bl	80088e4 <disk_write>
 8009100:	2800      	cmp	r0, #0
 8009102:	d1f4      	bne.n	80090ee <f_sync+0xa2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009104:	7d23      	ldrb	r3, [r4, #20]
 8009106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800910a:	7523      	strb	r3, [r4, #20]
 800910c:	e7b8      	b.n	8009080 <f_sync+0x34>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800910e:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009110:	751a      	strb	r2, [r3, #20]
 8009112:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8009114:	755a      	strb	r2, [r3, #21]
}
 8009116:	e7c8      	b.n	80090aa <f_sync+0x5e>
			fs->winsect = sector;
 8009118:	636e      	str	r6, [r5, #52]	@ 0x34
				if (res == FR_OK) {
 800911a:	e7b8      	b.n	800908e <f_sync+0x42>

0800911c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800911c:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800911e:	4b10      	ldr	r3, [pc, #64]	@ (8009160 <FATFS_LinkDriver+0x44>)
 8009120:	7a5c      	ldrb	r4, [r3, #9]
 8009122:	b9cc      	cbnz	r4, 8009158 <FATFS_LinkDriver+0x3c>
 8009124:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8009126:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800912a:	7a5c      	ldrb	r4, [r3, #9]
 800912c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800912e:	7a5c      	ldrb	r4, [r3, #9]
 8009130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009134:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8009136:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8009138:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800913a:	441c      	add	r4, r3
 800913c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800913e:	1c54      	adds	r4, r2, #1
 8009140:	b2e4      	uxtb	r4, r4
 8009142:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8009144:	3230      	adds	r2, #48	@ 0x30
    path[1] = ':';
 8009146:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 8009148:	232f      	movs	r3, #47	@ 0x2f
    path[1] = ':';
 800914a:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 800914c:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800914e:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8009152:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009154:	70c8      	strb	r0, [r1, #3]
}
 8009156:	4770      	bx	lr
  uint8_t ret = 1;
 8009158:	2001      	movs	r0, #1
}
 800915a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	20009b30 	.word	0x20009b30

08009164 <__assert_func>:
 8009164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009166:	4614      	mov	r4, r2
 8009168:	461a      	mov	r2, r3
 800916a:	4b09      	ldr	r3, [pc, #36]	@ (8009190 <__assert_func+0x2c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4605      	mov	r5, r0
 8009170:	68d8      	ldr	r0, [r3, #12]
 8009172:	b954      	cbnz	r4, 800918a <__assert_func+0x26>
 8009174:	4b07      	ldr	r3, [pc, #28]	@ (8009194 <__assert_func+0x30>)
 8009176:	461c      	mov	r4, r3
 8009178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800917c:	9100      	str	r1, [sp, #0]
 800917e:	462b      	mov	r3, r5
 8009180:	4905      	ldr	r1, [pc, #20]	@ (8009198 <__assert_func+0x34>)
 8009182:	f000 f8b9 	bl	80092f8 <fiprintf>
 8009186:	f000 fff7 	bl	800a178 <abort>
 800918a:	4b04      	ldr	r3, [pc, #16]	@ (800919c <__assert_func+0x38>)
 800918c:	e7f4      	b.n	8009178 <__assert_func+0x14>
 800918e:	bf00      	nop
 8009190:	2000018c 	.word	0x2000018c
 8009194:	0800c02b 	.word	0x0800c02b
 8009198:	0800bffd 	.word	0x0800bffd
 800919c:	0800bff0 	.word	0x0800bff0

080091a0 <atof>:
 80091a0:	2100      	movs	r1, #0
 80091a2:	f000 bebd 	b.w	8009f20 <strtod>

080091a6 <atoi>:
 80091a6:	220a      	movs	r2, #10
 80091a8:	2100      	movs	r1, #0
 80091aa:	f000 bf3f 	b.w	800a02c <strtol>
	...

080091b0 <std>:
 80091b0:	2300      	movs	r3, #0
 80091b2:	b510      	push	{r4, lr}
 80091b4:	4604      	mov	r4, r0
 80091b6:	e9c0 3300 	strd	r3, r3, [r0]
 80091ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091be:	6083      	str	r3, [r0, #8]
 80091c0:	8181      	strh	r1, [r0, #12]
 80091c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80091c4:	81c2      	strh	r2, [r0, #14]
 80091c6:	6183      	str	r3, [r0, #24]
 80091c8:	4619      	mov	r1, r3
 80091ca:	2208      	movs	r2, #8
 80091cc:	305c      	adds	r0, #92	@ 0x5c
 80091ce:	f000 ff87 	bl	800a0e0 <memset>
 80091d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009208 <std+0x58>)
 80091d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80091d6:	4b0d      	ldr	r3, [pc, #52]	@ (800920c <std+0x5c>)
 80091d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091da:	4b0d      	ldr	r3, [pc, #52]	@ (8009210 <std+0x60>)
 80091dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091de:	4b0d      	ldr	r3, [pc, #52]	@ (8009214 <std+0x64>)
 80091e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80091e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009218 <std+0x68>)
 80091e4:	6224      	str	r4, [r4, #32]
 80091e6:	429c      	cmp	r4, r3
 80091e8:	d006      	beq.n	80091f8 <std+0x48>
 80091ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80091ee:	4294      	cmp	r4, r2
 80091f0:	d002      	beq.n	80091f8 <std+0x48>
 80091f2:	33d0      	adds	r3, #208	@ 0xd0
 80091f4:	429c      	cmp	r4, r3
 80091f6:	d105      	bne.n	8009204 <std+0x54>
 80091f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80091fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009200:	f000 bfa0 	b.w	800a144 <__retarget_lock_init_recursive>
 8009204:	bd10      	pop	{r4, pc}
 8009206:	bf00      	nop
 8009208:	0800b9d1 	.word	0x0800b9d1
 800920c:	0800b9f3 	.word	0x0800b9f3
 8009210:	0800ba2b 	.word	0x0800ba2b
 8009214:	0800ba4f 	.word	0x0800ba4f
 8009218:	20009b3c 	.word	0x20009b3c

0800921c <stdio_exit_handler>:
 800921c:	4a02      	ldr	r2, [pc, #8]	@ (8009228 <stdio_exit_handler+0xc>)
 800921e:	4903      	ldr	r1, [pc, #12]	@ (800922c <stdio_exit_handler+0x10>)
 8009220:	4803      	ldr	r0, [pc, #12]	@ (8009230 <stdio_exit_handler+0x14>)
 8009222:	f000 bf0d 	b.w	800a040 <_fwalk_sglue>
 8009226:	bf00      	nop
 8009228:	20000014 	.word	0x20000014
 800922c:	0800b005 	.word	0x0800b005
 8009230:	20000190 	.word	0x20000190

08009234 <cleanup_stdio>:
 8009234:	6841      	ldr	r1, [r0, #4]
 8009236:	4b0c      	ldr	r3, [pc, #48]	@ (8009268 <cleanup_stdio+0x34>)
 8009238:	4299      	cmp	r1, r3
 800923a:	b510      	push	{r4, lr}
 800923c:	4604      	mov	r4, r0
 800923e:	d001      	beq.n	8009244 <cleanup_stdio+0x10>
 8009240:	f001 fee0 	bl	800b004 <_fflush_r>
 8009244:	68a1      	ldr	r1, [r4, #8]
 8009246:	4b09      	ldr	r3, [pc, #36]	@ (800926c <cleanup_stdio+0x38>)
 8009248:	4299      	cmp	r1, r3
 800924a:	d002      	beq.n	8009252 <cleanup_stdio+0x1e>
 800924c:	4620      	mov	r0, r4
 800924e:	f001 fed9 	bl	800b004 <_fflush_r>
 8009252:	68e1      	ldr	r1, [r4, #12]
 8009254:	4b06      	ldr	r3, [pc, #24]	@ (8009270 <cleanup_stdio+0x3c>)
 8009256:	4299      	cmp	r1, r3
 8009258:	d004      	beq.n	8009264 <cleanup_stdio+0x30>
 800925a:	4620      	mov	r0, r4
 800925c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009260:	f001 bed0 	b.w	800b004 <_fflush_r>
 8009264:	bd10      	pop	{r4, pc}
 8009266:	bf00      	nop
 8009268:	20009b3c 	.word	0x20009b3c
 800926c:	20009ba4 	.word	0x20009ba4
 8009270:	20009c0c 	.word	0x20009c0c

08009274 <global_stdio_init.part.0>:
 8009274:	b510      	push	{r4, lr}
 8009276:	4b0b      	ldr	r3, [pc, #44]	@ (80092a4 <global_stdio_init.part.0+0x30>)
 8009278:	4c0b      	ldr	r4, [pc, #44]	@ (80092a8 <global_stdio_init.part.0+0x34>)
 800927a:	4a0c      	ldr	r2, [pc, #48]	@ (80092ac <global_stdio_init.part.0+0x38>)
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	4620      	mov	r0, r4
 8009280:	2200      	movs	r2, #0
 8009282:	2104      	movs	r1, #4
 8009284:	f7ff ff94 	bl	80091b0 <std>
 8009288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800928c:	2201      	movs	r2, #1
 800928e:	2109      	movs	r1, #9
 8009290:	f7ff ff8e 	bl	80091b0 <std>
 8009294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009298:	2202      	movs	r2, #2
 800929a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800929e:	2112      	movs	r1, #18
 80092a0:	f7ff bf86 	b.w	80091b0 <std>
 80092a4:	20009c74 	.word	0x20009c74
 80092a8:	20009b3c 	.word	0x20009b3c
 80092ac:	0800921d 	.word	0x0800921d

080092b0 <__sfp_lock_acquire>:
 80092b0:	4801      	ldr	r0, [pc, #4]	@ (80092b8 <__sfp_lock_acquire+0x8>)
 80092b2:	f000 bf48 	b.w	800a146 <__retarget_lock_acquire_recursive>
 80092b6:	bf00      	nop
 80092b8:	20009c79 	.word	0x20009c79

080092bc <__sfp_lock_release>:
 80092bc:	4801      	ldr	r0, [pc, #4]	@ (80092c4 <__sfp_lock_release+0x8>)
 80092be:	f000 bf43 	b.w	800a148 <__retarget_lock_release_recursive>
 80092c2:	bf00      	nop
 80092c4:	20009c79 	.word	0x20009c79

080092c8 <__sinit>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	4604      	mov	r4, r0
 80092cc:	f7ff fff0 	bl	80092b0 <__sfp_lock_acquire>
 80092d0:	6a23      	ldr	r3, [r4, #32]
 80092d2:	b11b      	cbz	r3, 80092dc <__sinit+0x14>
 80092d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092d8:	f7ff bff0 	b.w	80092bc <__sfp_lock_release>
 80092dc:	4b04      	ldr	r3, [pc, #16]	@ (80092f0 <__sinit+0x28>)
 80092de:	6223      	str	r3, [r4, #32]
 80092e0:	4b04      	ldr	r3, [pc, #16]	@ (80092f4 <__sinit+0x2c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1f5      	bne.n	80092d4 <__sinit+0xc>
 80092e8:	f7ff ffc4 	bl	8009274 <global_stdio_init.part.0>
 80092ec:	e7f2      	b.n	80092d4 <__sinit+0xc>
 80092ee:	bf00      	nop
 80092f0:	08009235 	.word	0x08009235
 80092f4:	20009c74 	.word	0x20009c74

080092f8 <fiprintf>:
 80092f8:	b40e      	push	{r1, r2, r3}
 80092fa:	b503      	push	{r0, r1, lr}
 80092fc:	4601      	mov	r1, r0
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	4805      	ldr	r0, [pc, #20]	@ (8009318 <fiprintf+0x20>)
 8009302:	f853 2b04 	ldr.w	r2, [r3], #4
 8009306:	6800      	ldr	r0, [r0, #0]
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	f001 fa9d 	bl	800a848 <_vfiprintf_r>
 800930e:	b002      	add	sp, #8
 8009310:	f85d eb04 	ldr.w	lr, [sp], #4
 8009314:	b003      	add	sp, #12
 8009316:	4770      	bx	lr
 8009318:	2000018c 	.word	0x2000018c

0800931c <sulp>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	ec45 4b10 	vmov	d0, r4, r5
 8009326:	4616      	mov	r6, r2
 8009328:	f002 fa14 	bl	800b754 <__ulp>
 800932c:	ec51 0b10 	vmov	r0, r1, d0
 8009330:	b17e      	cbz	r6, 8009352 <sulp+0x36>
 8009332:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009336:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800933a:	2b00      	cmp	r3, #0
 800933c:	dd09      	ble.n	8009352 <sulp+0x36>
 800933e:	051b      	lsls	r3, r3, #20
 8009340:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009344:	2400      	movs	r4, #0
 8009346:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800934a:	4622      	mov	r2, r4
 800934c:	462b      	mov	r3, r5
 800934e:	f7f7 f94b 	bl	80005e8 <__aeabi_dmul>
 8009352:	ec41 0b10 	vmov	d0, r0, r1
 8009356:	bd70      	pop	{r4, r5, r6, pc}

08009358 <_strtod_l>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	b09f      	sub	sp, #124	@ 0x7c
 800935e:	460c      	mov	r4, r1
 8009360:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009362:	2200      	movs	r2, #0
 8009364:	921a      	str	r2, [sp, #104]	@ 0x68
 8009366:	9005      	str	r0, [sp, #20]
 8009368:	f04f 0a00 	mov.w	sl, #0
 800936c:	f04f 0b00 	mov.w	fp, #0
 8009370:	460a      	mov	r2, r1
 8009372:	9219      	str	r2, [sp, #100]	@ 0x64
 8009374:	7811      	ldrb	r1, [r2, #0]
 8009376:	292b      	cmp	r1, #43	@ 0x2b
 8009378:	d04a      	beq.n	8009410 <_strtod_l+0xb8>
 800937a:	d838      	bhi.n	80093ee <_strtod_l+0x96>
 800937c:	290d      	cmp	r1, #13
 800937e:	d832      	bhi.n	80093e6 <_strtod_l+0x8e>
 8009380:	2908      	cmp	r1, #8
 8009382:	d832      	bhi.n	80093ea <_strtod_l+0x92>
 8009384:	2900      	cmp	r1, #0
 8009386:	d03b      	beq.n	8009400 <_strtod_l+0xa8>
 8009388:	2200      	movs	r2, #0
 800938a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800938c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800938e:	782a      	ldrb	r2, [r5, #0]
 8009390:	2a30      	cmp	r2, #48	@ 0x30
 8009392:	f040 80b3 	bne.w	80094fc <_strtod_l+0x1a4>
 8009396:	786a      	ldrb	r2, [r5, #1]
 8009398:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800939c:	2a58      	cmp	r2, #88	@ 0x58
 800939e:	d16e      	bne.n	800947e <_strtod_l+0x126>
 80093a0:	9302      	str	r3, [sp, #8]
 80093a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	4a8e      	ldr	r2, [pc, #568]	@ (80095e4 <_strtod_l+0x28c>)
 80093ac:	9805      	ldr	r0, [sp, #20]
 80093ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80093b0:	a919      	add	r1, sp, #100	@ 0x64
 80093b2:	f000 ff4f 	bl	800a254 <__gethex>
 80093b6:	f010 060f 	ands.w	r6, r0, #15
 80093ba:	4604      	mov	r4, r0
 80093bc:	d005      	beq.n	80093ca <_strtod_l+0x72>
 80093be:	2e06      	cmp	r6, #6
 80093c0:	d128      	bne.n	8009414 <_strtod_l+0xbc>
 80093c2:	3501      	adds	r5, #1
 80093c4:	2300      	movs	r3, #0
 80093c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80093c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f040 858e 	bne.w	8009eee <_strtod_l+0xb96>
 80093d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093d4:	b1cb      	cbz	r3, 800940a <_strtod_l+0xb2>
 80093d6:	4652      	mov	r2, sl
 80093d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80093dc:	ec43 2b10 	vmov	d0, r2, r3
 80093e0:	b01f      	add	sp, #124	@ 0x7c
 80093e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e6:	2920      	cmp	r1, #32
 80093e8:	d1ce      	bne.n	8009388 <_strtod_l+0x30>
 80093ea:	3201      	adds	r2, #1
 80093ec:	e7c1      	b.n	8009372 <_strtod_l+0x1a>
 80093ee:	292d      	cmp	r1, #45	@ 0x2d
 80093f0:	d1ca      	bne.n	8009388 <_strtod_l+0x30>
 80093f2:	2101      	movs	r1, #1
 80093f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80093f6:	1c51      	adds	r1, r2, #1
 80093f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80093fa:	7852      	ldrb	r2, [r2, #1]
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	d1c5      	bne.n	800938c <_strtod_l+0x34>
 8009400:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009402:	9419      	str	r4, [sp, #100]	@ 0x64
 8009404:	2b00      	cmp	r3, #0
 8009406:	f040 8570 	bne.w	8009eea <_strtod_l+0xb92>
 800940a:	4652      	mov	r2, sl
 800940c:	465b      	mov	r3, fp
 800940e:	e7e5      	b.n	80093dc <_strtod_l+0x84>
 8009410:	2100      	movs	r1, #0
 8009412:	e7ef      	b.n	80093f4 <_strtod_l+0x9c>
 8009414:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009416:	b13a      	cbz	r2, 8009428 <_strtod_l+0xd0>
 8009418:	2135      	movs	r1, #53	@ 0x35
 800941a:	a81c      	add	r0, sp, #112	@ 0x70
 800941c:	f002 fa94 	bl	800b948 <__copybits>
 8009420:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009422:	9805      	ldr	r0, [sp, #20]
 8009424:	f001 fe62 	bl	800b0ec <_Bfree>
 8009428:	3e01      	subs	r6, #1
 800942a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800942c:	2e04      	cmp	r6, #4
 800942e:	d806      	bhi.n	800943e <_strtod_l+0xe6>
 8009430:	e8df f006 	tbb	[pc, r6]
 8009434:	201d0314 	.word	0x201d0314
 8009438:	14          	.byte	0x14
 8009439:	00          	.byte	0x00
 800943a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800943e:	05e1      	lsls	r1, r4, #23
 8009440:	bf48      	it	mi
 8009442:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009446:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800944a:	0d1b      	lsrs	r3, r3, #20
 800944c:	051b      	lsls	r3, r3, #20
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1bb      	bne.n	80093ca <_strtod_l+0x72>
 8009452:	f000 fe4d 	bl	800a0f0 <__errno>
 8009456:	2322      	movs	r3, #34	@ 0x22
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	e7b6      	b.n	80093ca <_strtod_l+0x72>
 800945c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009460:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009464:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009468:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800946c:	e7e7      	b.n	800943e <_strtod_l+0xe6>
 800946e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80095ec <_strtod_l+0x294>
 8009472:	e7e4      	b.n	800943e <_strtod_l+0xe6>
 8009474:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009478:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800947c:	e7df      	b.n	800943e <_strtod_l+0xe6>
 800947e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	9219      	str	r2, [sp, #100]	@ 0x64
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2b30      	cmp	r3, #48	@ 0x30
 8009488:	d0f9      	beq.n	800947e <_strtod_l+0x126>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d09d      	beq.n	80093ca <_strtod_l+0x72>
 800948e:	2301      	movs	r3, #1
 8009490:	9309      	str	r3, [sp, #36]	@ 0x24
 8009492:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009494:	930c      	str	r3, [sp, #48]	@ 0x30
 8009496:	2300      	movs	r3, #0
 8009498:	9308      	str	r3, [sp, #32]
 800949a:	930a      	str	r3, [sp, #40]	@ 0x28
 800949c:	461f      	mov	r7, r3
 800949e:	220a      	movs	r2, #10
 80094a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80094a2:	7805      	ldrb	r5, [r0, #0]
 80094a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80094a8:	b2d9      	uxtb	r1, r3
 80094aa:	2909      	cmp	r1, #9
 80094ac:	d928      	bls.n	8009500 <_strtod_l+0x1a8>
 80094ae:	494e      	ldr	r1, [pc, #312]	@ (80095e8 <_strtod_l+0x290>)
 80094b0:	2201      	movs	r2, #1
 80094b2:	f000 fdf0 	bl	800a096 <strncmp>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d032      	beq.n	8009520 <_strtod_l+0x1c8>
 80094ba:	2000      	movs	r0, #0
 80094bc:	462a      	mov	r2, r5
 80094be:	4681      	mov	r9, r0
 80094c0:	463d      	mov	r5, r7
 80094c2:	4603      	mov	r3, r0
 80094c4:	2a65      	cmp	r2, #101	@ 0x65
 80094c6:	d001      	beq.n	80094cc <_strtod_l+0x174>
 80094c8:	2a45      	cmp	r2, #69	@ 0x45
 80094ca:	d114      	bne.n	80094f6 <_strtod_l+0x19e>
 80094cc:	b91d      	cbnz	r5, 80094d6 <_strtod_l+0x17e>
 80094ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d0:	4302      	orrs	r2, r0
 80094d2:	d095      	beq.n	8009400 <_strtod_l+0xa8>
 80094d4:	2500      	movs	r5, #0
 80094d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80094d8:	1c62      	adds	r2, r4, #1
 80094da:	9219      	str	r2, [sp, #100]	@ 0x64
 80094dc:	7862      	ldrb	r2, [r4, #1]
 80094de:	2a2b      	cmp	r2, #43	@ 0x2b
 80094e0:	d077      	beq.n	80095d2 <_strtod_l+0x27a>
 80094e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80094e4:	d07b      	beq.n	80095de <_strtod_l+0x286>
 80094e6:	f04f 0c00 	mov.w	ip, #0
 80094ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80094ee:	2909      	cmp	r1, #9
 80094f0:	f240 8082 	bls.w	80095f8 <_strtod_l+0x2a0>
 80094f4:	9419      	str	r4, [sp, #100]	@ 0x64
 80094f6:	f04f 0800 	mov.w	r8, #0
 80094fa:	e0a2      	b.n	8009642 <_strtod_l+0x2ea>
 80094fc:	2300      	movs	r3, #0
 80094fe:	e7c7      	b.n	8009490 <_strtod_l+0x138>
 8009500:	2f08      	cmp	r7, #8
 8009502:	bfd5      	itete	le
 8009504:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009506:	9908      	ldrgt	r1, [sp, #32]
 8009508:	fb02 3301 	mlale	r3, r2, r1, r3
 800950c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009510:	f100 0001 	add.w	r0, r0, #1
 8009514:	bfd4      	ite	le
 8009516:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009518:	9308      	strgt	r3, [sp, #32]
 800951a:	3701      	adds	r7, #1
 800951c:	9019      	str	r0, [sp, #100]	@ 0x64
 800951e:	e7bf      	b.n	80094a0 <_strtod_l+0x148>
 8009520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	9219      	str	r2, [sp, #100]	@ 0x64
 8009526:	785a      	ldrb	r2, [r3, #1]
 8009528:	b37f      	cbz	r7, 800958a <_strtod_l+0x232>
 800952a:	4681      	mov	r9, r0
 800952c:	463d      	mov	r5, r7
 800952e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009532:	2b09      	cmp	r3, #9
 8009534:	d912      	bls.n	800955c <_strtod_l+0x204>
 8009536:	2301      	movs	r3, #1
 8009538:	e7c4      	b.n	80094c4 <_strtod_l+0x16c>
 800953a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009540:	785a      	ldrb	r2, [r3, #1]
 8009542:	3001      	adds	r0, #1
 8009544:	2a30      	cmp	r2, #48	@ 0x30
 8009546:	d0f8      	beq.n	800953a <_strtod_l+0x1e2>
 8009548:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800954c:	2b08      	cmp	r3, #8
 800954e:	f200 84d3 	bhi.w	8009ef8 <_strtod_l+0xba0>
 8009552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009554:	930c      	str	r3, [sp, #48]	@ 0x30
 8009556:	4681      	mov	r9, r0
 8009558:	2000      	movs	r0, #0
 800955a:	4605      	mov	r5, r0
 800955c:	3a30      	subs	r2, #48	@ 0x30
 800955e:	f100 0301 	add.w	r3, r0, #1
 8009562:	d02a      	beq.n	80095ba <_strtod_l+0x262>
 8009564:	4499      	add	r9, r3
 8009566:	eb00 0c05 	add.w	ip, r0, r5
 800956a:	462b      	mov	r3, r5
 800956c:	210a      	movs	r1, #10
 800956e:	4563      	cmp	r3, ip
 8009570:	d10d      	bne.n	800958e <_strtod_l+0x236>
 8009572:	1c69      	adds	r1, r5, #1
 8009574:	4401      	add	r1, r0
 8009576:	4428      	add	r0, r5
 8009578:	2808      	cmp	r0, #8
 800957a:	dc16      	bgt.n	80095aa <_strtod_l+0x252>
 800957c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800957e:	230a      	movs	r3, #10
 8009580:	fb03 2300 	mla	r3, r3, r0, r2
 8009584:	930a      	str	r3, [sp, #40]	@ 0x28
 8009586:	2300      	movs	r3, #0
 8009588:	e018      	b.n	80095bc <_strtod_l+0x264>
 800958a:	4638      	mov	r0, r7
 800958c:	e7da      	b.n	8009544 <_strtod_l+0x1ec>
 800958e:	2b08      	cmp	r3, #8
 8009590:	f103 0301 	add.w	r3, r3, #1
 8009594:	dc03      	bgt.n	800959e <_strtod_l+0x246>
 8009596:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009598:	434e      	muls	r6, r1
 800959a:	960a      	str	r6, [sp, #40]	@ 0x28
 800959c:	e7e7      	b.n	800956e <_strtod_l+0x216>
 800959e:	2b10      	cmp	r3, #16
 80095a0:	bfde      	ittt	le
 80095a2:	9e08      	ldrle	r6, [sp, #32]
 80095a4:	434e      	mulle	r6, r1
 80095a6:	9608      	strle	r6, [sp, #32]
 80095a8:	e7e1      	b.n	800956e <_strtod_l+0x216>
 80095aa:	280f      	cmp	r0, #15
 80095ac:	dceb      	bgt.n	8009586 <_strtod_l+0x22e>
 80095ae:	9808      	ldr	r0, [sp, #32]
 80095b0:	230a      	movs	r3, #10
 80095b2:	fb03 2300 	mla	r3, r3, r0, r2
 80095b6:	9308      	str	r3, [sp, #32]
 80095b8:	e7e5      	b.n	8009586 <_strtod_l+0x22e>
 80095ba:	4629      	mov	r1, r5
 80095bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80095be:	1c50      	adds	r0, r2, #1
 80095c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80095c2:	7852      	ldrb	r2, [r2, #1]
 80095c4:	4618      	mov	r0, r3
 80095c6:	460d      	mov	r5, r1
 80095c8:	e7b1      	b.n	800952e <_strtod_l+0x1d6>
 80095ca:	f04f 0900 	mov.w	r9, #0
 80095ce:	2301      	movs	r3, #1
 80095d0:	e77d      	b.n	80094ce <_strtod_l+0x176>
 80095d2:	f04f 0c00 	mov.w	ip, #0
 80095d6:	1ca2      	adds	r2, r4, #2
 80095d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80095da:	78a2      	ldrb	r2, [r4, #2]
 80095dc:	e785      	b.n	80094ea <_strtod_l+0x192>
 80095de:	f04f 0c01 	mov.w	ip, #1
 80095e2:	e7f8      	b.n	80095d6 <_strtod_l+0x27e>
 80095e4:	0800c050 	.word	0x0800c050
 80095e8:	0800c02c 	.word	0x0800c02c
 80095ec:	7ff00000 	.word	0x7ff00000
 80095f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80095f2:	1c51      	adds	r1, r2, #1
 80095f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80095f6:	7852      	ldrb	r2, [r2, #1]
 80095f8:	2a30      	cmp	r2, #48	@ 0x30
 80095fa:	d0f9      	beq.n	80095f0 <_strtod_l+0x298>
 80095fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009600:	2908      	cmp	r1, #8
 8009602:	f63f af78 	bhi.w	80094f6 <_strtod_l+0x19e>
 8009606:	3a30      	subs	r2, #48	@ 0x30
 8009608:	920e      	str	r2, [sp, #56]	@ 0x38
 800960a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800960c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800960e:	f04f 080a 	mov.w	r8, #10
 8009612:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009614:	1c56      	adds	r6, r2, #1
 8009616:	9619      	str	r6, [sp, #100]	@ 0x64
 8009618:	7852      	ldrb	r2, [r2, #1]
 800961a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800961e:	f1be 0f09 	cmp.w	lr, #9
 8009622:	d939      	bls.n	8009698 <_strtod_l+0x340>
 8009624:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009626:	1a76      	subs	r6, r6, r1
 8009628:	2e08      	cmp	r6, #8
 800962a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800962e:	dc03      	bgt.n	8009638 <_strtod_l+0x2e0>
 8009630:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009632:	4588      	cmp	r8, r1
 8009634:	bfa8      	it	ge
 8009636:	4688      	movge	r8, r1
 8009638:	f1bc 0f00 	cmp.w	ip, #0
 800963c:	d001      	beq.n	8009642 <_strtod_l+0x2ea>
 800963e:	f1c8 0800 	rsb	r8, r8, #0
 8009642:	2d00      	cmp	r5, #0
 8009644:	d14e      	bne.n	80096e4 <_strtod_l+0x38c>
 8009646:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009648:	4308      	orrs	r0, r1
 800964a:	f47f aebe 	bne.w	80093ca <_strtod_l+0x72>
 800964e:	2b00      	cmp	r3, #0
 8009650:	f47f aed6 	bne.w	8009400 <_strtod_l+0xa8>
 8009654:	2a69      	cmp	r2, #105	@ 0x69
 8009656:	d028      	beq.n	80096aa <_strtod_l+0x352>
 8009658:	dc25      	bgt.n	80096a6 <_strtod_l+0x34e>
 800965a:	2a49      	cmp	r2, #73	@ 0x49
 800965c:	d025      	beq.n	80096aa <_strtod_l+0x352>
 800965e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009660:	f47f aece 	bne.w	8009400 <_strtod_l+0xa8>
 8009664:	499b      	ldr	r1, [pc, #620]	@ (80098d4 <_strtod_l+0x57c>)
 8009666:	a819      	add	r0, sp, #100	@ 0x64
 8009668:	f001 f816 	bl	800a698 <__match>
 800966c:	2800      	cmp	r0, #0
 800966e:	f43f aec7 	beq.w	8009400 <_strtod_l+0xa8>
 8009672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b28      	cmp	r3, #40	@ 0x28
 8009678:	d12e      	bne.n	80096d8 <_strtod_l+0x380>
 800967a:	4997      	ldr	r1, [pc, #604]	@ (80098d8 <_strtod_l+0x580>)
 800967c:	aa1c      	add	r2, sp, #112	@ 0x70
 800967e:	a819      	add	r0, sp, #100	@ 0x64
 8009680:	f001 f81e 	bl	800a6c0 <__hexnan>
 8009684:	2805      	cmp	r0, #5
 8009686:	d127      	bne.n	80096d8 <_strtod_l+0x380>
 8009688:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800968a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800968e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009692:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009696:	e698      	b.n	80093ca <_strtod_l+0x72>
 8009698:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800969a:	fb08 2101 	mla	r1, r8, r1, r2
 800969e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80096a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80096a4:	e7b5      	b.n	8009612 <_strtod_l+0x2ba>
 80096a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80096a8:	e7da      	b.n	8009660 <_strtod_l+0x308>
 80096aa:	498c      	ldr	r1, [pc, #560]	@ (80098dc <_strtod_l+0x584>)
 80096ac:	a819      	add	r0, sp, #100	@ 0x64
 80096ae:	f000 fff3 	bl	800a698 <__match>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	f43f aea4 	beq.w	8009400 <_strtod_l+0xa8>
 80096b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096ba:	4989      	ldr	r1, [pc, #548]	@ (80098e0 <_strtod_l+0x588>)
 80096bc:	3b01      	subs	r3, #1
 80096be:	a819      	add	r0, sp, #100	@ 0x64
 80096c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80096c2:	f000 ffe9 	bl	800a698 <__match>
 80096c6:	b910      	cbnz	r0, 80096ce <_strtod_l+0x376>
 80096c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096ca:	3301      	adds	r3, #1
 80096cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80096ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80098f0 <_strtod_l+0x598>
 80096d2:	f04f 0a00 	mov.w	sl, #0
 80096d6:	e678      	b.n	80093ca <_strtod_l+0x72>
 80096d8:	4882      	ldr	r0, [pc, #520]	@ (80098e4 <_strtod_l+0x58c>)
 80096da:	f000 fd45 	bl	800a168 <nan>
 80096de:	ec5b ab10 	vmov	sl, fp, d0
 80096e2:	e672      	b.n	80093ca <_strtod_l+0x72>
 80096e4:	eba8 0309 	sub.w	r3, r8, r9
 80096e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ec:	2f00      	cmp	r7, #0
 80096ee:	bf08      	it	eq
 80096f0:	462f      	moveq	r7, r5
 80096f2:	2d10      	cmp	r5, #16
 80096f4:	462c      	mov	r4, r5
 80096f6:	bfa8      	it	ge
 80096f8:	2410      	movge	r4, #16
 80096fa:	f7f6 fefb 	bl	80004f4 <__aeabi_ui2d>
 80096fe:	2d09      	cmp	r5, #9
 8009700:	4682      	mov	sl, r0
 8009702:	468b      	mov	fp, r1
 8009704:	dc13      	bgt.n	800972e <_strtod_l+0x3d6>
 8009706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009708:	2b00      	cmp	r3, #0
 800970a:	f43f ae5e 	beq.w	80093ca <_strtod_l+0x72>
 800970e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009710:	dd78      	ble.n	8009804 <_strtod_l+0x4ac>
 8009712:	2b16      	cmp	r3, #22
 8009714:	dc5f      	bgt.n	80097d6 <_strtod_l+0x47e>
 8009716:	4974      	ldr	r1, [pc, #464]	@ (80098e8 <_strtod_l+0x590>)
 8009718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800971c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009720:	4652      	mov	r2, sl
 8009722:	465b      	mov	r3, fp
 8009724:	f7f6 ff60 	bl	80005e8 <__aeabi_dmul>
 8009728:	4682      	mov	sl, r0
 800972a:	468b      	mov	fp, r1
 800972c:	e64d      	b.n	80093ca <_strtod_l+0x72>
 800972e:	4b6e      	ldr	r3, [pc, #440]	@ (80098e8 <_strtod_l+0x590>)
 8009730:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009734:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009738:	f7f6 ff56 	bl	80005e8 <__aeabi_dmul>
 800973c:	4682      	mov	sl, r0
 800973e:	9808      	ldr	r0, [sp, #32]
 8009740:	468b      	mov	fp, r1
 8009742:	f7f6 fed7 	bl	80004f4 <__aeabi_ui2d>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	4650      	mov	r0, sl
 800974c:	4659      	mov	r1, fp
 800974e:	f7f6 fd95 	bl	800027c <__adddf3>
 8009752:	2d0f      	cmp	r5, #15
 8009754:	4682      	mov	sl, r0
 8009756:	468b      	mov	fp, r1
 8009758:	ddd5      	ble.n	8009706 <_strtod_l+0x3ae>
 800975a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975c:	1b2c      	subs	r4, r5, r4
 800975e:	441c      	add	r4, r3
 8009760:	2c00      	cmp	r4, #0
 8009762:	f340 8096 	ble.w	8009892 <_strtod_l+0x53a>
 8009766:	f014 030f 	ands.w	r3, r4, #15
 800976a:	d00a      	beq.n	8009782 <_strtod_l+0x42a>
 800976c:	495e      	ldr	r1, [pc, #376]	@ (80098e8 <_strtod_l+0x590>)
 800976e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009772:	4652      	mov	r2, sl
 8009774:	465b      	mov	r3, fp
 8009776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800977a:	f7f6 ff35 	bl	80005e8 <__aeabi_dmul>
 800977e:	4682      	mov	sl, r0
 8009780:	468b      	mov	fp, r1
 8009782:	f034 040f 	bics.w	r4, r4, #15
 8009786:	d073      	beq.n	8009870 <_strtod_l+0x518>
 8009788:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800978c:	dd48      	ble.n	8009820 <_strtod_l+0x4c8>
 800978e:	2400      	movs	r4, #0
 8009790:	46a0      	mov	r8, r4
 8009792:	940a      	str	r4, [sp, #40]	@ 0x28
 8009794:	46a1      	mov	r9, r4
 8009796:	9a05      	ldr	r2, [sp, #20]
 8009798:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80098f0 <_strtod_l+0x598>
 800979c:	2322      	movs	r3, #34	@ 0x22
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	f04f 0a00 	mov.w	sl, #0
 80097a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f43f ae0f 	beq.w	80093ca <_strtod_l+0x72>
 80097ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097ae:	9805      	ldr	r0, [sp, #20]
 80097b0:	f001 fc9c 	bl	800b0ec <_Bfree>
 80097b4:	9805      	ldr	r0, [sp, #20]
 80097b6:	4649      	mov	r1, r9
 80097b8:	f001 fc98 	bl	800b0ec <_Bfree>
 80097bc:	9805      	ldr	r0, [sp, #20]
 80097be:	4641      	mov	r1, r8
 80097c0:	f001 fc94 	bl	800b0ec <_Bfree>
 80097c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097c6:	9805      	ldr	r0, [sp, #20]
 80097c8:	f001 fc90 	bl	800b0ec <_Bfree>
 80097cc:	9805      	ldr	r0, [sp, #20]
 80097ce:	4621      	mov	r1, r4
 80097d0:	f001 fc8c 	bl	800b0ec <_Bfree>
 80097d4:	e5f9      	b.n	80093ca <_strtod_l+0x72>
 80097d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80097dc:	4293      	cmp	r3, r2
 80097de:	dbbc      	blt.n	800975a <_strtod_l+0x402>
 80097e0:	4c41      	ldr	r4, [pc, #260]	@ (80098e8 <_strtod_l+0x590>)
 80097e2:	f1c5 050f 	rsb	r5, r5, #15
 80097e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80097ea:	4652      	mov	r2, sl
 80097ec:	465b      	mov	r3, fp
 80097ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f2:	f7f6 fef9 	bl	80005e8 <__aeabi_dmul>
 80097f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f8:	1b5d      	subs	r5, r3, r5
 80097fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80097fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009802:	e78f      	b.n	8009724 <_strtod_l+0x3cc>
 8009804:	3316      	adds	r3, #22
 8009806:	dba8      	blt.n	800975a <_strtod_l+0x402>
 8009808:	4b37      	ldr	r3, [pc, #220]	@ (80098e8 <_strtod_l+0x590>)
 800980a:	eba9 0808 	sub.w	r8, r9, r8
 800980e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009812:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009816:	4650      	mov	r0, sl
 8009818:	4659      	mov	r1, fp
 800981a:	f7f7 f80f 	bl	800083c <__aeabi_ddiv>
 800981e:	e783      	b.n	8009728 <_strtod_l+0x3d0>
 8009820:	4b32      	ldr	r3, [pc, #200]	@ (80098ec <_strtod_l+0x594>)
 8009822:	9308      	str	r3, [sp, #32]
 8009824:	2300      	movs	r3, #0
 8009826:	1124      	asrs	r4, r4, #4
 8009828:	4650      	mov	r0, sl
 800982a:	4659      	mov	r1, fp
 800982c:	461e      	mov	r6, r3
 800982e:	2c01      	cmp	r4, #1
 8009830:	dc21      	bgt.n	8009876 <_strtod_l+0x51e>
 8009832:	b10b      	cbz	r3, 8009838 <_strtod_l+0x4e0>
 8009834:	4682      	mov	sl, r0
 8009836:	468b      	mov	fp, r1
 8009838:	492c      	ldr	r1, [pc, #176]	@ (80098ec <_strtod_l+0x594>)
 800983a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800983e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009842:	4652      	mov	r2, sl
 8009844:	465b      	mov	r3, fp
 8009846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800984a:	f7f6 fecd 	bl	80005e8 <__aeabi_dmul>
 800984e:	4b28      	ldr	r3, [pc, #160]	@ (80098f0 <_strtod_l+0x598>)
 8009850:	460a      	mov	r2, r1
 8009852:	400b      	ands	r3, r1
 8009854:	4927      	ldr	r1, [pc, #156]	@ (80098f4 <_strtod_l+0x59c>)
 8009856:	428b      	cmp	r3, r1
 8009858:	4682      	mov	sl, r0
 800985a:	d898      	bhi.n	800978e <_strtod_l+0x436>
 800985c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009860:	428b      	cmp	r3, r1
 8009862:	bf86      	itte	hi
 8009864:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80098f8 <_strtod_l+0x5a0>
 8009868:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800986c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009870:	2300      	movs	r3, #0
 8009872:	9308      	str	r3, [sp, #32]
 8009874:	e07a      	b.n	800996c <_strtod_l+0x614>
 8009876:	07e2      	lsls	r2, r4, #31
 8009878:	d505      	bpl.n	8009886 <_strtod_l+0x52e>
 800987a:	9b08      	ldr	r3, [sp, #32]
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 feb2 	bl	80005e8 <__aeabi_dmul>
 8009884:	2301      	movs	r3, #1
 8009886:	9a08      	ldr	r2, [sp, #32]
 8009888:	3208      	adds	r2, #8
 800988a:	3601      	adds	r6, #1
 800988c:	1064      	asrs	r4, r4, #1
 800988e:	9208      	str	r2, [sp, #32]
 8009890:	e7cd      	b.n	800982e <_strtod_l+0x4d6>
 8009892:	d0ed      	beq.n	8009870 <_strtod_l+0x518>
 8009894:	4264      	negs	r4, r4
 8009896:	f014 020f 	ands.w	r2, r4, #15
 800989a:	d00a      	beq.n	80098b2 <_strtod_l+0x55a>
 800989c:	4b12      	ldr	r3, [pc, #72]	@ (80098e8 <_strtod_l+0x590>)
 800989e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a2:	4650      	mov	r0, sl
 80098a4:	4659      	mov	r1, fp
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	f7f6 ffc7 	bl	800083c <__aeabi_ddiv>
 80098ae:	4682      	mov	sl, r0
 80098b0:	468b      	mov	fp, r1
 80098b2:	1124      	asrs	r4, r4, #4
 80098b4:	d0dc      	beq.n	8009870 <_strtod_l+0x518>
 80098b6:	2c1f      	cmp	r4, #31
 80098b8:	dd20      	ble.n	80098fc <_strtod_l+0x5a4>
 80098ba:	2400      	movs	r4, #0
 80098bc:	46a0      	mov	r8, r4
 80098be:	940a      	str	r4, [sp, #40]	@ 0x28
 80098c0:	46a1      	mov	r9, r4
 80098c2:	9a05      	ldr	r2, [sp, #20]
 80098c4:	2322      	movs	r3, #34	@ 0x22
 80098c6:	f04f 0a00 	mov.w	sl, #0
 80098ca:	f04f 0b00 	mov.w	fp, #0
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	e768      	b.n	80097a4 <_strtod_l+0x44c>
 80098d2:	bf00      	nop
 80098d4:	0800c037 	.word	0x0800c037
 80098d8:	0800c03c 	.word	0x0800c03c
 80098dc:	0800c02e 	.word	0x0800c02e
 80098e0:	0800c031 	.word	0x0800c031
 80098e4:	0800c02b 	.word	0x0800c02b
 80098e8:	0800c2e8 	.word	0x0800c2e8
 80098ec:	0800c2c0 	.word	0x0800c2c0
 80098f0:	7ff00000 	.word	0x7ff00000
 80098f4:	7ca00000 	.word	0x7ca00000
 80098f8:	7fefffff 	.word	0x7fefffff
 80098fc:	f014 0310 	ands.w	r3, r4, #16
 8009900:	bf18      	it	ne
 8009902:	236a      	movne	r3, #106	@ 0x6a
 8009904:	4ea9      	ldr	r6, [pc, #676]	@ (8009bac <_strtod_l+0x854>)
 8009906:	9308      	str	r3, [sp, #32]
 8009908:	4650      	mov	r0, sl
 800990a:	4659      	mov	r1, fp
 800990c:	2300      	movs	r3, #0
 800990e:	07e2      	lsls	r2, r4, #31
 8009910:	d504      	bpl.n	800991c <_strtod_l+0x5c4>
 8009912:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009916:	f7f6 fe67 	bl	80005e8 <__aeabi_dmul>
 800991a:	2301      	movs	r3, #1
 800991c:	1064      	asrs	r4, r4, #1
 800991e:	f106 0608 	add.w	r6, r6, #8
 8009922:	d1f4      	bne.n	800990e <_strtod_l+0x5b6>
 8009924:	b10b      	cbz	r3, 800992a <_strtod_l+0x5d2>
 8009926:	4682      	mov	sl, r0
 8009928:	468b      	mov	fp, r1
 800992a:	9b08      	ldr	r3, [sp, #32]
 800992c:	b1b3      	cbz	r3, 800995c <_strtod_l+0x604>
 800992e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009932:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009936:	2b00      	cmp	r3, #0
 8009938:	4659      	mov	r1, fp
 800993a:	dd0f      	ble.n	800995c <_strtod_l+0x604>
 800993c:	2b1f      	cmp	r3, #31
 800993e:	dd55      	ble.n	80099ec <_strtod_l+0x694>
 8009940:	2b34      	cmp	r3, #52	@ 0x34
 8009942:	bfde      	ittt	le
 8009944:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009948:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800994c:	4093      	lslle	r3, r2
 800994e:	f04f 0a00 	mov.w	sl, #0
 8009952:	bfcc      	ite	gt
 8009954:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009958:	ea03 0b01 	andle.w	fp, r3, r1
 800995c:	2200      	movs	r2, #0
 800995e:	2300      	movs	r3, #0
 8009960:	4650      	mov	r0, sl
 8009962:	4659      	mov	r1, fp
 8009964:	f7f7 f8a8 	bl	8000ab8 <__aeabi_dcmpeq>
 8009968:	2800      	cmp	r0, #0
 800996a:	d1a6      	bne.n	80098ba <_strtod_l+0x562>
 800996c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009972:	9805      	ldr	r0, [sp, #20]
 8009974:	462b      	mov	r3, r5
 8009976:	463a      	mov	r2, r7
 8009978:	f001 fc20 	bl	800b1bc <__s2b>
 800997c:	900a      	str	r0, [sp, #40]	@ 0x28
 800997e:	2800      	cmp	r0, #0
 8009980:	f43f af05 	beq.w	800978e <_strtod_l+0x436>
 8009984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009986:	2a00      	cmp	r2, #0
 8009988:	eba9 0308 	sub.w	r3, r9, r8
 800998c:	bfa8      	it	ge
 800998e:	2300      	movge	r3, #0
 8009990:	9312      	str	r3, [sp, #72]	@ 0x48
 8009992:	2400      	movs	r4, #0
 8009994:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009998:	9316      	str	r3, [sp, #88]	@ 0x58
 800999a:	46a0      	mov	r8, r4
 800999c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800999e:	9805      	ldr	r0, [sp, #20]
 80099a0:	6859      	ldr	r1, [r3, #4]
 80099a2:	f001 fb63 	bl	800b06c <_Balloc>
 80099a6:	4681      	mov	r9, r0
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f43f aef4 	beq.w	8009796 <_strtod_l+0x43e>
 80099ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099b0:	691a      	ldr	r2, [r3, #16]
 80099b2:	3202      	adds	r2, #2
 80099b4:	f103 010c 	add.w	r1, r3, #12
 80099b8:	0092      	lsls	r2, r2, #2
 80099ba:	300c      	adds	r0, #12
 80099bc:	f000 fbc5 	bl	800a14a <memcpy>
 80099c0:	ec4b ab10 	vmov	d0, sl, fp
 80099c4:	9805      	ldr	r0, [sp, #20]
 80099c6:	aa1c      	add	r2, sp, #112	@ 0x70
 80099c8:	a91b      	add	r1, sp, #108	@ 0x6c
 80099ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80099ce:	f001 ff31 	bl	800b834 <__d2b>
 80099d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f43f aede 	beq.w	8009796 <_strtod_l+0x43e>
 80099da:	9805      	ldr	r0, [sp, #20]
 80099dc:	2101      	movs	r1, #1
 80099de:	f001 fc83 	bl	800b2e8 <__i2b>
 80099e2:	4680      	mov	r8, r0
 80099e4:	b948      	cbnz	r0, 80099fa <_strtod_l+0x6a2>
 80099e6:	f04f 0800 	mov.w	r8, #0
 80099ea:	e6d4      	b.n	8009796 <_strtod_l+0x43e>
 80099ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099f0:	fa02 f303 	lsl.w	r3, r2, r3
 80099f4:	ea03 0a0a 	and.w	sl, r3, sl
 80099f8:	e7b0      	b.n	800995c <_strtod_l+0x604>
 80099fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80099fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80099fe:	2d00      	cmp	r5, #0
 8009a00:	bfab      	itete	ge
 8009a02:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009a04:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009a06:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009a08:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009a0a:	bfac      	ite	ge
 8009a0c:	18ef      	addge	r7, r5, r3
 8009a0e:	1b5e      	sublt	r6, r3, r5
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	1aed      	subs	r5, r5, r3
 8009a14:	4415      	add	r5, r2
 8009a16:	4b66      	ldr	r3, [pc, #408]	@ (8009bb0 <_strtod_l+0x858>)
 8009a18:	3d01      	subs	r5, #1
 8009a1a:	429d      	cmp	r5, r3
 8009a1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009a20:	da50      	bge.n	8009ac4 <_strtod_l+0x76c>
 8009a22:	1b5b      	subs	r3, r3, r5
 8009a24:	2b1f      	cmp	r3, #31
 8009a26:	eba2 0203 	sub.w	r2, r2, r3
 8009a2a:	f04f 0101 	mov.w	r1, #1
 8009a2e:	dc3d      	bgt.n	8009aac <_strtod_l+0x754>
 8009a30:	fa01 f303 	lsl.w	r3, r1, r3
 8009a34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a36:	2300      	movs	r3, #0
 8009a38:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a3a:	18bd      	adds	r5, r7, r2
 8009a3c:	9b08      	ldr	r3, [sp, #32]
 8009a3e:	42af      	cmp	r7, r5
 8009a40:	4416      	add	r6, r2
 8009a42:	441e      	add	r6, r3
 8009a44:	463b      	mov	r3, r7
 8009a46:	bfa8      	it	ge
 8009a48:	462b      	movge	r3, r5
 8009a4a:	42b3      	cmp	r3, r6
 8009a4c:	bfa8      	it	ge
 8009a4e:	4633      	movge	r3, r6
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	bfc2      	ittt	gt
 8009a54:	1aed      	subgt	r5, r5, r3
 8009a56:	1af6      	subgt	r6, r6, r3
 8009a58:	1aff      	subgt	r7, r7, r3
 8009a5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	dd16      	ble.n	8009a8e <_strtod_l+0x736>
 8009a60:	4641      	mov	r1, r8
 8009a62:	9805      	ldr	r0, [sp, #20]
 8009a64:	461a      	mov	r2, r3
 8009a66:	f001 fcff 	bl	800b468 <__pow5mult>
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d0ba      	beq.n	80099e6 <_strtod_l+0x68e>
 8009a70:	4601      	mov	r1, r0
 8009a72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a74:	9805      	ldr	r0, [sp, #20]
 8009a76:	f001 fc4d 	bl	800b314 <__multiply>
 8009a7a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f43f ae8a 	beq.w	8009796 <_strtod_l+0x43e>
 8009a82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a84:	9805      	ldr	r0, [sp, #20]
 8009a86:	f001 fb31 	bl	800b0ec <_Bfree>
 8009a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a8e:	2d00      	cmp	r5, #0
 8009a90:	dc1d      	bgt.n	8009ace <_strtod_l+0x776>
 8009a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dd23      	ble.n	8009ae0 <_strtod_l+0x788>
 8009a98:	4649      	mov	r1, r9
 8009a9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009a9c:	9805      	ldr	r0, [sp, #20]
 8009a9e:	f001 fce3 	bl	800b468 <__pow5mult>
 8009aa2:	4681      	mov	r9, r0
 8009aa4:	b9e0      	cbnz	r0, 8009ae0 <_strtod_l+0x788>
 8009aa6:	f04f 0900 	mov.w	r9, #0
 8009aaa:	e674      	b.n	8009796 <_strtod_l+0x43e>
 8009aac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009ab0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009ab4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009ab8:	35e2      	adds	r5, #226	@ 0xe2
 8009aba:	fa01 f305 	lsl.w	r3, r1, r5
 8009abe:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ac0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009ac2:	e7ba      	b.n	8009a3a <_strtod_l+0x6e2>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ac8:	2301      	movs	r3, #1
 8009aca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009acc:	e7b5      	b.n	8009a3a <_strtod_l+0x6e2>
 8009ace:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ad0:	9805      	ldr	r0, [sp, #20]
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	f001 fd22 	bl	800b51c <__lshift>
 8009ad8:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d1d9      	bne.n	8009a92 <_strtod_l+0x73a>
 8009ade:	e65a      	b.n	8009796 <_strtod_l+0x43e>
 8009ae0:	2e00      	cmp	r6, #0
 8009ae2:	dd07      	ble.n	8009af4 <_strtod_l+0x79c>
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	9805      	ldr	r0, [sp, #20]
 8009ae8:	4632      	mov	r2, r6
 8009aea:	f001 fd17 	bl	800b51c <__lshift>
 8009aee:	4681      	mov	r9, r0
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d0d8      	beq.n	8009aa6 <_strtod_l+0x74e>
 8009af4:	2f00      	cmp	r7, #0
 8009af6:	dd08      	ble.n	8009b0a <_strtod_l+0x7b2>
 8009af8:	4641      	mov	r1, r8
 8009afa:	9805      	ldr	r0, [sp, #20]
 8009afc:	463a      	mov	r2, r7
 8009afe:	f001 fd0d 	bl	800b51c <__lshift>
 8009b02:	4680      	mov	r8, r0
 8009b04:	2800      	cmp	r0, #0
 8009b06:	f43f ae46 	beq.w	8009796 <_strtod_l+0x43e>
 8009b0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b0c:	9805      	ldr	r0, [sp, #20]
 8009b0e:	464a      	mov	r2, r9
 8009b10:	f001 fd8c 	bl	800b62c <__mdiff>
 8009b14:	4604      	mov	r4, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	f43f ae3d 	beq.w	8009796 <_strtod_l+0x43e>
 8009b1c:	68c3      	ldr	r3, [r0, #12]
 8009b1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b20:	2300      	movs	r3, #0
 8009b22:	60c3      	str	r3, [r0, #12]
 8009b24:	4641      	mov	r1, r8
 8009b26:	f001 fd65 	bl	800b5f4 <__mcmp>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	da46      	bge.n	8009bbc <_strtod_l+0x864>
 8009b2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b30:	ea53 030a 	orrs.w	r3, r3, sl
 8009b34:	d16c      	bne.n	8009c10 <_strtod_l+0x8b8>
 8009b36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d168      	bne.n	8009c10 <_strtod_l+0x8b8>
 8009b3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b42:	0d1b      	lsrs	r3, r3, #20
 8009b44:	051b      	lsls	r3, r3, #20
 8009b46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009b4a:	d961      	bls.n	8009c10 <_strtod_l+0x8b8>
 8009b4c:	6963      	ldr	r3, [r4, #20]
 8009b4e:	b913      	cbnz	r3, 8009b56 <_strtod_l+0x7fe>
 8009b50:	6923      	ldr	r3, [r4, #16]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	dd5c      	ble.n	8009c10 <_strtod_l+0x8b8>
 8009b56:	4621      	mov	r1, r4
 8009b58:	2201      	movs	r2, #1
 8009b5a:	9805      	ldr	r0, [sp, #20]
 8009b5c:	f001 fcde 	bl	800b51c <__lshift>
 8009b60:	4641      	mov	r1, r8
 8009b62:	4604      	mov	r4, r0
 8009b64:	f001 fd46 	bl	800b5f4 <__mcmp>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	dd51      	ble.n	8009c10 <_strtod_l+0x8b8>
 8009b6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b70:	9a08      	ldr	r2, [sp, #32]
 8009b72:	0d1b      	lsrs	r3, r3, #20
 8009b74:	051b      	lsls	r3, r3, #20
 8009b76:	2a00      	cmp	r2, #0
 8009b78:	d06b      	beq.n	8009c52 <_strtod_l+0x8fa>
 8009b7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009b7e:	d868      	bhi.n	8009c52 <_strtod_l+0x8fa>
 8009b80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009b84:	f67f ae9d 	bls.w	80098c2 <_strtod_l+0x56a>
 8009b88:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb4 <_strtod_l+0x85c>)
 8009b8a:	4650      	mov	r0, sl
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f7f6 fd2a 	bl	80005e8 <__aeabi_dmul>
 8009b94:	4b08      	ldr	r3, [pc, #32]	@ (8009bb8 <_strtod_l+0x860>)
 8009b96:	400b      	ands	r3, r1
 8009b98:	4682      	mov	sl, r0
 8009b9a:	468b      	mov	fp, r1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f47f ae05 	bne.w	80097ac <_strtod_l+0x454>
 8009ba2:	9a05      	ldr	r2, [sp, #20]
 8009ba4:	2322      	movs	r3, #34	@ 0x22
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	e600      	b.n	80097ac <_strtod_l+0x454>
 8009baa:	bf00      	nop
 8009bac:	0800c068 	.word	0x0800c068
 8009bb0:	fffffc02 	.word	0xfffffc02
 8009bb4:	39500000 	.word	0x39500000
 8009bb8:	7ff00000 	.word	0x7ff00000
 8009bbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009bc0:	d165      	bne.n	8009c8e <_strtod_l+0x936>
 8009bc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bc8:	b35a      	cbz	r2, 8009c22 <_strtod_l+0x8ca>
 8009bca:	4a9f      	ldr	r2, [pc, #636]	@ (8009e48 <_strtod_l+0xaf0>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d12b      	bne.n	8009c28 <_strtod_l+0x8d0>
 8009bd0:	9b08      	ldr	r3, [sp, #32]
 8009bd2:	4651      	mov	r1, sl
 8009bd4:	b303      	cbz	r3, 8009c18 <_strtod_l+0x8c0>
 8009bd6:	4b9d      	ldr	r3, [pc, #628]	@ (8009e4c <_strtod_l+0xaf4>)
 8009bd8:	465a      	mov	r2, fp
 8009bda:	4013      	ands	r3, r2
 8009bdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009be0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009be4:	d81b      	bhi.n	8009c1e <_strtod_l+0x8c6>
 8009be6:	0d1b      	lsrs	r3, r3, #20
 8009be8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009bec:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d119      	bne.n	8009c28 <_strtod_l+0x8d0>
 8009bf4:	4b96      	ldr	r3, [pc, #600]	@ (8009e50 <_strtod_l+0xaf8>)
 8009bf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d102      	bne.n	8009c02 <_strtod_l+0x8aa>
 8009bfc:	3101      	adds	r1, #1
 8009bfe:	f43f adca 	beq.w	8009796 <_strtod_l+0x43e>
 8009c02:	4b92      	ldr	r3, [pc, #584]	@ (8009e4c <_strtod_l+0xaf4>)
 8009c04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c06:	401a      	ands	r2, r3
 8009c08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009c0c:	f04f 0a00 	mov.w	sl, #0
 8009c10:	9b08      	ldr	r3, [sp, #32]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1b8      	bne.n	8009b88 <_strtod_l+0x830>
 8009c16:	e5c9      	b.n	80097ac <_strtod_l+0x454>
 8009c18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c1c:	e7e8      	b.n	8009bf0 <_strtod_l+0x898>
 8009c1e:	4613      	mov	r3, r2
 8009c20:	e7e6      	b.n	8009bf0 <_strtod_l+0x898>
 8009c22:	ea53 030a 	orrs.w	r3, r3, sl
 8009c26:	d0a1      	beq.n	8009b6c <_strtod_l+0x814>
 8009c28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c2a:	b1db      	cbz	r3, 8009c64 <_strtod_l+0x90c>
 8009c2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c2e:	4213      	tst	r3, r2
 8009c30:	d0ee      	beq.n	8009c10 <_strtod_l+0x8b8>
 8009c32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c34:	9a08      	ldr	r2, [sp, #32]
 8009c36:	4650      	mov	r0, sl
 8009c38:	4659      	mov	r1, fp
 8009c3a:	b1bb      	cbz	r3, 8009c6c <_strtod_l+0x914>
 8009c3c:	f7ff fb6e 	bl	800931c <sulp>
 8009c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c44:	ec53 2b10 	vmov	r2, r3, d0
 8009c48:	f7f6 fb18 	bl	800027c <__adddf3>
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	468b      	mov	fp, r1
 8009c50:	e7de      	b.n	8009c10 <_strtod_l+0x8b8>
 8009c52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009c56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c5e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009c62:	e7d5      	b.n	8009c10 <_strtod_l+0x8b8>
 8009c64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c66:	ea13 0f0a 	tst.w	r3, sl
 8009c6a:	e7e1      	b.n	8009c30 <_strtod_l+0x8d8>
 8009c6c:	f7ff fb56 	bl	800931c <sulp>
 8009c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c74:	ec53 2b10 	vmov	r2, r3, d0
 8009c78:	f7f6 fafe 	bl	8000278 <__aeabi_dsub>
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4682      	mov	sl, r0
 8009c82:	468b      	mov	fp, r1
 8009c84:	f7f6 ff18 	bl	8000ab8 <__aeabi_dcmpeq>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d0c1      	beq.n	8009c10 <_strtod_l+0x8b8>
 8009c8c:	e619      	b.n	80098c2 <_strtod_l+0x56a>
 8009c8e:	4641      	mov	r1, r8
 8009c90:	4620      	mov	r0, r4
 8009c92:	f001 fe27 	bl	800b8e4 <__ratio>
 8009c96:	ec57 6b10 	vmov	r6, r7, d0
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f7f6 ff1c 	bl	8000ae0 <__aeabi_dcmple>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d06f      	beq.n	8009d8c <_strtod_l+0xa34>
 8009cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d17a      	bne.n	8009da8 <_strtod_l+0xa50>
 8009cb2:	f1ba 0f00 	cmp.w	sl, #0
 8009cb6:	d158      	bne.n	8009d6a <_strtod_l+0xa12>
 8009cb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d15a      	bne.n	8009d78 <_strtod_l+0xa20>
 8009cc2:	4b64      	ldr	r3, [pc, #400]	@ (8009e54 <_strtod_l+0xafc>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	4639      	mov	r1, r7
 8009cca:	f7f6 feff 	bl	8000acc <__aeabi_dcmplt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d159      	bne.n	8009d86 <_strtod_l+0xa2e>
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	4b60      	ldr	r3, [pc, #384]	@ (8009e58 <_strtod_l+0xb00>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f7f6 fc85 	bl	80005e8 <__aeabi_dmul>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	460f      	mov	r7, r1
 8009ce2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ce6:	9606      	str	r6, [sp, #24]
 8009ce8:	9307      	str	r3, [sp, #28]
 8009cea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cee:	4d57      	ldr	r5, [pc, #348]	@ (8009e4c <_strtod_l+0xaf4>)
 8009cf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009cf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cf6:	401d      	ands	r5, r3
 8009cf8:	4b58      	ldr	r3, [pc, #352]	@ (8009e5c <_strtod_l+0xb04>)
 8009cfa:	429d      	cmp	r5, r3
 8009cfc:	f040 80b2 	bne.w	8009e64 <_strtod_l+0xb0c>
 8009d00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009d06:	ec4b ab10 	vmov	d0, sl, fp
 8009d0a:	f001 fd23 	bl	800b754 <__ulp>
 8009d0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d12:	ec51 0b10 	vmov	r0, r1, d0
 8009d16:	f7f6 fc67 	bl	80005e8 <__aeabi_dmul>
 8009d1a:	4652      	mov	r2, sl
 8009d1c:	465b      	mov	r3, fp
 8009d1e:	f7f6 faad 	bl	800027c <__adddf3>
 8009d22:	460b      	mov	r3, r1
 8009d24:	4949      	ldr	r1, [pc, #292]	@ (8009e4c <_strtod_l+0xaf4>)
 8009d26:	4a4e      	ldr	r2, [pc, #312]	@ (8009e60 <_strtod_l+0xb08>)
 8009d28:	4019      	ands	r1, r3
 8009d2a:	4291      	cmp	r1, r2
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	d942      	bls.n	8009db6 <_strtod_l+0xa5e>
 8009d30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d32:	4b47      	ldr	r3, [pc, #284]	@ (8009e50 <_strtod_l+0xaf8>)
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d103      	bne.n	8009d40 <_strtod_l+0x9e8>
 8009d38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	f43f ad2b 	beq.w	8009796 <_strtod_l+0x43e>
 8009d40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009e50 <_strtod_l+0xaf8>
 8009d44:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009d48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d4a:	9805      	ldr	r0, [sp, #20]
 8009d4c:	f001 f9ce 	bl	800b0ec <_Bfree>
 8009d50:	9805      	ldr	r0, [sp, #20]
 8009d52:	4649      	mov	r1, r9
 8009d54:	f001 f9ca 	bl	800b0ec <_Bfree>
 8009d58:	9805      	ldr	r0, [sp, #20]
 8009d5a:	4641      	mov	r1, r8
 8009d5c:	f001 f9c6 	bl	800b0ec <_Bfree>
 8009d60:	9805      	ldr	r0, [sp, #20]
 8009d62:	4621      	mov	r1, r4
 8009d64:	f001 f9c2 	bl	800b0ec <_Bfree>
 8009d68:	e618      	b.n	800999c <_strtod_l+0x644>
 8009d6a:	f1ba 0f01 	cmp.w	sl, #1
 8009d6e:	d103      	bne.n	8009d78 <_strtod_l+0xa20>
 8009d70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f43f ada5 	beq.w	80098c2 <_strtod_l+0x56a>
 8009d78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009e28 <_strtod_l+0xad0>
 8009d7c:	4f35      	ldr	r7, [pc, #212]	@ (8009e54 <_strtod_l+0xafc>)
 8009d7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d82:	2600      	movs	r6, #0
 8009d84:	e7b1      	b.n	8009cea <_strtod_l+0x992>
 8009d86:	4f34      	ldr	r7, [pc, #208]	@ (8009e58 <_strtod_l+0xb00>)
 8009d88:	2600      	movs	r6, #0
 8009d8a:	e7aa      	b.n	8009ce2 <_strtod_l+0x98a>
 8009d8c:	4b32      	ldr	r3, [pc, #200]	@ (8009e58 <_strtod_l+0xb00>)
 8009d8e:	4630      	mov	r0, r6
 8009d90:	4639      	mov	r1, r7
 8009d92:	2200      	movs	r2, #0
 8009d94:	f7f6 fc28 	bl	80005e8 <__aeabi_dmul>
 8009d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d09f      	beq.n	8009ce2 <_strtod_l+0x98a>
 8009da2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009da6:	e7a0      	b.n	8009cea <_strtod_l+0x992>
 8009da8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009e30 <_strtod_l+0xad8>
 8009dac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009db0:	ec57 6b17 	vmov	r6, r7, d7
 8009db4:	e799      	b.n	8009cea <_strtod_l+0x992>
 8009db6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009dba:	9b08      	ldr	r3, [sp, #32]
 8009dbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1c1      	bne.n	8009d48 <_strtod_l+0x9f0>
 8009dc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dc8:	0d1b      	lsrs	r3, r3, #20
 8009dca:	051b      	lsls	r3, r3, #20
 8009dcc:	429d      	cmp	r5, r3
 8009dce:	d1bb      	bne.n	8009d48 <_strtod_l+0x9f0>
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 ff02 	bl	8000bdc <__aeabi_d2lz>
 8009dd8:	f7f6 fbd8 	bl	800058c <__aeabi_l2d>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4630      	mov	r0, r6
 8009de2:	4639      	mov	r1, r7
 8009de4:	f7f6 fa48 	bl	8000278 <__aeabi_dsub>
 8009de8:	460b      	mov	r3, r1
 8009dea:	4602      	mov	r2, r0
 8009dec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009df0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009df6:	ea46 060a 	orr.w	r6, r6, sl
 8009dfa:	431e      	orrs	r6, r3
 8009dfc:	d06f      	beq.n	8009ede <_strtod_l+0xb86>
 8009dfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e38 <_strtod_l+0xae0>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fe62 	bl	8000acc <__aeabi_dcmplt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	f47f accf 	bne.w	80097ac <_strtod_l+0x454>
 8009e0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009e40 <_strtod_l+0xae8>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e18:	f7f6 fe76 	bl	8000b08 <__aeabi_dcmpgt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d093      	beq.n	8009d48 <_strtod_l+0x9f0>
 8009e20:	e4c4      	b.n	80097ac <_strtod_l+0x454>
 8009e22:	bf00      	nop
 8009e24:	f3af 8000 	nop.w
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	bff00000 	.word	0xbff00000
 8009e30:	00000000 	.word	0x00000000
 8009e34:	3ff00000 	.word	0x3ff00000
 8009e38:	94a03595 	.word	0x94a03595
 8009e3c:	3fdfffff 	.word	0x3fdfffff
 8009e40:	35afe535 	.word	0x35afe535
 8009e44:	3fe00000 	.word	0x3fe00000
 8009e48:	000fffff 	.word	0x000fffff
 8009e4c:	7ff00000 	.word	0x7ff00000
 8009e50:	7fefffff 	.word	0x7fefffff
 8009e54:	3ff00000 	.word	0x3ff00000
 8009e58:	3fe00000 	.word	0x3fe00000
 8009e5c:	7fe00000 	.word	0x7fe00000
 8009e60:	7c9fffff 	.word	0x7c9fffff
 8009e64:	9b08      	ldr	r3, [sp, #32]
 8009e66:	b323      	cbz	r3, 8009eb2 <_strtod_l+0xb5a>
 8009e68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009e6c:	d821      	bhi.n	8009eb2 <_strtod_l+0xb5a>
 8009e6e:	a328      	add	r3, pc, #160	@ (adr r3, 8009f10 <_strtod_l+0xbb8>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	4630      	mov	r0, r6
 8009e76:	4639      	mov	r1, r7
 8009e78:	f7f6 fe32 	bl	8000ae0 <__aeabi_dcmple>
 8009e7c:	b1a0      	cbz	r0, 8009ea8 <_strtod_l+0xb50>
 8009e7e:	4639      	mov	r1, r7
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7f6 fe73 	bl	8000b6c <__aeabi_d2uiz>
 8009e86:	2801      	cmp	r0, #1
 8009e88:	bf38      	it	cc
 8009e8a:	2001      	movcc	r0, #1
 8009e8c:	f7f6 fb32 	bl	80004f4 <__aeabi_ui2d>
 8009e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e92:	4606      	mov	r6, r0
 8009e94:	460f      	mov	r7, r1
 8009e96:	b9fb      	cbnz	r3, 8009ed8 <_strtod_l+0xb80>
 8009e98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009e9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ea0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009ea4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ea8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009eaa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009eae:	1b5b      	subs	r3, r3, r5
 8009eb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009eb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009eb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009eba:	f001 fc4b 	bl	800b754 <__ulp>
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	ec53 2b10 	vmov	r2, r3, d0
 8009ec4:	4659      	mov	r1, fp
 8009ec6:	f7f6 fb8f 	bl	80005e8 <__aeabi_dmul>
 8009eca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ece:	f7f6 f9d5 	bl	800027c <__adddf3>
 8009ed2:	4682      	mov	sl, r0
 8009ed4:	468b      	mov	fp, r1
 8009ed6:	e770      	b.n	8009dba <_strtod_l+0xa62>
 8009ed8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009edc:	e7e0      	b.n	8009ea0 <_strtod_l+0xb48>
 8009ede:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f18 <_strtod_l+0xbc0>)
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	f7f6 fdf2 	bl	8000acc <__aeabi_dcmplt>
 8009ee8:	e798      	b.n	8009e1c <_strtod_l+0xac4>
 8009eea:	2300      	movs	r3, #0
 8009eec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009ef0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	f7ff ba6d 	b.w	80093d2 <_strtod_l+0x7a>
 8009ef8:	2a65      	cmp	r2, #101	@ 0x65
 8009efa:	f43f ab66 	beq.w	80095ca <_strtod_l+0x272>
 8009efe:	2a45      	cmp	r2, #69	@ 0x45
 8009f00:	f43f ab63 	beq.w	80095ca <_strtod_l+0x272>
 8009f04:	2301      	movs	r3, #1
 8009f06:	f7ff bb9e 	b.w	8009646 <_strtod_l+0x2ee>
 8009f0a:	bf00      	nop
 8009f0c:	f3af 8000 	nop.w
 8009f10:	ffc00000 	.word	0xffc00000
 8009f14:	41dfffff 	.word	0x41dfffff
 8009f18:	94a03595 	.word	0x94a03595
 8009f1c:	3fcfffff 	.word	0x3fcfffff

08009f20 <strtod>:
 8009f20:	460a      	mov	r2, r1
 8009f22:	4601      	mov	r1, r0
 8009f24:	4802      	ldr	r0, [pc, #8]	@ (8009f30 <strtod+0x10>)
 8009f26:	4b03      	ldr	r3, [pc, #12]	@ (8009f34 <strtod+0x14>)
 8009f28:	6800      	ldr	r0, [r0, #0]
 8009f2a:	f7ff ba15 	b.w	8009358 <_strtod_l>
 8009f2e:	bf00      	nop
 8009f30:	2000018c 	.word	0x2000018c
 8009f34:	20000020 	.word	0x20000020

08009f38 <_strtol_l.constprop.0>:
 8009f38:	2b24      	cmp	r3, #36	@ 0x24
 8009f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3e:	4686      	mov	lr, r0
 8009f40:	4690      	mov	r8, r2
 8009f42:	d801      	bhi.n	8009f48 <_strtol_l.constprop.0+0x10>
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d106      	bne.n	8009f56 <_strtol_l.constprop.0+0x1e>
 8009f48:	f000 f8d2 	bl	800a0f0 <__errno>
 8009f4c:	2316      	movs	r3, #22
 8009f4e:	6003      	str	r3, [r0, #0]
 8009f50:	2000      	movs	r0, #0
 8009f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f56:	4834      	ldr	r0, [pc, #208]	@ (800a028 <_strtol_l.constprop.0+0xf0>)
 8009f58:	460d      	mov	r5, r1
 8009f5a:	462a      	mov	r2, r5
 8009f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f60:	5d06      	ldrb	r6, [r0, r4]
 8009f62:	f016 0608 	ands.w	r6, r6, #8
 8009f66:	d1f8      	bne.n	8009f5a <_strtol_l.constprop.0+0x22>
 8009f68:	2c2d      	cmp	r4, #45	@ 0x2d
 8009f6a:	d12d      	bne.n	8009fc8 <_strtol_l.constprop.0+0x90>
 8009f6c:	782c      	ldrb	r4, [r5, #0]
 8009f6e:	2601      	movs	r6, #1
 8009f70:	1c95      	adds	r5, r2, #2
 8009f72:	f033 0210 	bics.w	r2, r3, #16
 8009f76:	d109      	bne.n	8009f8c <_strtol_l.constprop.0+0x54>
 8009f78:	2c30      	cmp	r4, #48	@ 0x30
 8009f7a:	d12a      	bne.n	8009fd2 <_strtol_l.constprop.0+0x9a>
 8009f7c:	782a      	ldrb	r2, [r5, #0]
 8009f7e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f82:	2a58      	cmp	r2, #88	@ 0x58
 8009f84:	d125      	bne.n	8009fd2 <_strtol_l.constprop.0+0x9a>
 8009f86:	786c      	ldrb	r4, [r5, #1]
 8009f88:	2310      	movs	r3, #16
 8009f8a:	3502      	adds	r5, #2
 8009f8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009f90:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009f94:	2200      	movs	r2, #0
 8009f96:	fbbc f9f3 	udiv	r9, ip, r3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009fa0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009fa4:	2f09      	cmp	r7, #9
 8009fa6:	d81b      	bhi.n	8009fe0 <_strtol_l.constprop.0+0xa8>
 8009fa8:	463c      	mov	r4, r7
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	dd27      	ble.n	8009ffe <_strtol_l.constprop.0+0xc6>
 8009fae:	1c57      	adds	r7, r2, #1
 8009fb0:	d007      	beq.n	8009fc2 <_strtol_l.constprop.0+0x8a>
 8009fb2:	4581      	cmp	r9, r0
 8009fb4:	d320      	bcc.n	8009ff8 <_strtol_l.constprop.0+0xc0>
 8009fb6:	d101      	bne.n	8009fbc <_strtol_l.constprop.0+0x84>
 8009fb8:	45a2      	cmp	sl, r4
 8009fba:	db1d      	blt.n	8009ff8 <_strtol_l.constprop.0+0xc0>
 8009fbc:	fb00 4003 	mla	r0, r0, r3, r4
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fc6:	e7eb      	b.n	8009fa0 <_strtol_l.constprop.0+0x68>
 8009fc8:	2c2b      	cmp	r4, #43	@ 0x2b
 8009fca:	bf04      	itt	eq
 8009fcc:	782c      	ldrbeq	r4, [r5, #0]
 8009fce:	1c95      	addeq	r5, r2, #2
 8009fd0:	e7cf      	b.n	8009f72 <_strtol_l.constprop.0+0x3a>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1da      	bne.n	8009f8c <_strtol_l.constprop.0+0x54>
 8009fd6:	2c30      	cmp	r4, #48	@ 0x30
 8009fd8:	bf0c      	ite	eq
 8009fda:	2308      	moveq	r3, #8
 8009fdc:	230a      	movne	r3, #10
 8009fde:	e7d5      	b.n	8009f8c <_strtol_l.constprop.0+0x54>
 8009fe0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009fe4:	2f19      	cmp	r7, #25
 8009fe6:	d801      	bhi.n	8009fec <_strtol_l.constprop.0+0xb4>
 8009fe8:	3c37      	subs	r4, #55	@ 0x37
 8009fea:	e7de      	b.n	8009faa <_strtol_l.constprop.0+0x72>
 8009fec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ff0:	2f19      	cmp	r7, #25
 8009ff2:	d804      	bhi.n	8009ffe <_strtol_l.constprop.0+0xc6>
 8009ff4:	3c57      	subs	r4, #87	@ 0x57
 8009ff6:	e7d8      	b.n	8009faa <_strtol_l.constprop.0+0x72>
 8009ff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ffc:	e7e1      	b.n	8009fc2 <_strtol_l.constprop.0+0x8a>
 8009ffe:	1c53      	adds	r3, r2, #1
 800a000:	d108      	bne.n	800a014 <_strtol_l.constprop.0+0xdc>
 800a002:	2322      	movs	r3, #34	@ 0x22
 800a004:	f8ce 3000 	str.w	r3, [lr]
 800a008:	4660      	mov	r0, ip
 800a00a:	f1b8 0f00 	cmp.w	r8, #0
 800a00e:	d0a0      	beq.n	8009f52 <_strtol_l.constprop.0+0x1a>
 800a010:	1e69      	subs	r1, r5, #1
 800a012:	e006      	b.n	800a022 <_strtol_l.constprop.0+0xea>
 800a014:	b106      	cbz	r6, 800a018 <_strtol_l.constprop.0+0xe0>
 800a016:	4240      	negs	r0, r0
 800a018:	f1b8 0f00 	cmp.w	r8, #0
 800a01c:	d099      	beq.n	8009f52 <_strtol_l.constprop.0+0x1a>
 800a01e:	2a00      	cmp	r2, #0
 800a020:	d1f6      	bne.n	800a010 <_strtol_l.constprop.0+0xd8>
 800a022:	f8c8 1000 	str.w	r1, [r8]
 800a026:	e794      	b.n	8009f52 <_strtol_l.constprop.0+0x1a>
 800a028:	0800c099 	.word	0x0800c099

0800a02c <strtol>:
 800a02c:	4613      	mov	r3, r2
 800a02e:	460a      	mov	r2, r1
 800a030:	4601      	mov	r1, r0
 800a032:	4802      	ldr	r0, [pc, #8]	@ (800a03c <strtol+0x10>)
 800a034:	6800      	ldr	r0, [r0, #0]
 800a036:	f7ff bf7f 	b.w	8009f38 <_strtol_l.constprop.0>
 800a03a:	bf00      	nop
 800a03c:	2000018c 	.word	0x2000018c

0800a040 <_fwalk_sglue>:
 800a040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a044:	4607      	mov	r7, r0
 800a046:	4688      	mov	r8, r1
 800a048:	4614      	mov	r4, r2
 800a04a:	2600      	movs	r6, #0
 800a04c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a050:	f1b9 0901 	subs.w	r9, r9, #1
 800a054:	d505      	bpl.n	800a062 <_fwalk_sglue+0x22>
 800a056:	6824      	ldr	r4, [r4, #0]
 800a058:	2c00      	cmp	r4, #0
 800a05a:	d1f7      	bne.n	800a04c <_fwalk_sglue+0xc>
 800a05c:	4630      	mov	r0, r6
 800a05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d907      	bls.n	800a078 <_fwalk_sglue+0x38>
 800a068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a06c:	3301      	adds	r3, #1
 800a06e:	d003      	beq.n	800a078 <_fwalk_sglue+0x38>
 800a070:	4629      	mov	r1, r5
 800a072:	4638      	mov	r0, r7
 800a074:	47c0      	blx	r8
 800a076:	4306      	orrs	r6, r0
 800a078:	3568      	adds	r5, #104	@ 0x68
 800a07a:	e7e9      	b.n	800a050 <_fwalk_sglue+0x10>

0800a07c <strchr>:
 800a07c:	b2c9      	uxtb	r1, r1
 800a07e:	4603      	mov	r3, r0
 800a080:	4618      	mov	r0, r3
 800a082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a086:	b112      	cbz	r2, 800a08e <strchr+0x12>
 800a088:	428a      	cmp	r2, r1
 800a08a:	d1f9      	bne.n	800a080 <strchr+0x4>
 800a08c:	4770      	bx	lr
 800a08e:	2900      	cmp	r1, #0
 800a090:	bf18      	it	ne
 800a092:	2000      	movne	r0, #0
 800a094:	4770      	bx	lr

0800a096 <strncmp>:
 800a096:	b510      	push	{r4, lr}
 800a098:	b16a      	cbz	r2, 800a0b6 <strncmp+0x20>
 800a09a:	3901      	subs	r1, #1
 800a09c:	1884      	adds	r4, r0, r2
 800a09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d103      	bne.n	800a0b2 <strncmp+0x1c>
 800a0aa:	42a0      	cmp	r0, r4
 800a0ac:	d001      	beq.n	800a0b2 <strncmp+0x1c>
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	d1f5      	bne.n	800a09e <strncmp+0x8>
 800a0b2:	1ad0      	subs	r0, r2, r3
 800a0b4:	bd10      	pop	{r4, pc}
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	e7fc      	b.n	800a0b4 <strncmp+0x1e>

0800a0ba <strncpy>:
 800a0ba:	b510      	push	{r4, lr}
 800a0bc:	3901      	subs	r1, #1
 800a0be:	4603      	mov	r3, r0
 800a0c0:	b132      	cbz	r2, 800a0d0 <strncpy+0x16>
 800a0c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a0c6:	f803 4b01 	strb.w	r4, [r3], #1
 800a0ca:	3a01      	subs	r2, #1
 800a0cc:	2c00      	cmp	r4, #0
 800a0ce:	d1f7      	bne.n	800a0c0 <strncpy+0x6>
 800a0d0:	441a      	add	r2, r3
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d100      	bne.n	800a0da <strncpy+0x20>
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	f803 1b01 	strb.w	r1, [r3], #1
 800a0de:	e7f9      	b.n	800a0d4 <strncpy+0x1a>

0800a0e0 <memset>:
 800a0e0:	4402      	add	r2, r0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d100      	bne.n	800a0ea <memset+0xa>
 800a0e8:	4770      	bx	lr
 800a0ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ee:	e7f9      	b.n	800a0e4 <memset+0x4>

0800a0f0 <__errno>:
 800a0f0:	4b01      	ldr	r3, [pc, #4]	@ (800a0f8 <__errno+0x8>)
 800a0f2:	6818      	ldr	r0, [r3, #0]
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	2000018c 	.word	0x2000018c

0800a0fc <__libc_init_array>:
 800a0fc:	b570      	push	{r4, r5, r6, lr}
 800a0fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a134 <__libc_init_array+0x38>)
 800a100:	4c0d      	ldr	r4, [pc, #52]	@ (800a138 <__libc_init_array+0x3c>)
 800a102:	1b64      	subs	r4, r4, r5
 800a104:	10a4      	asrs	r4, r4, #2
 800a106:	2600      	movs	r6, #0
 800a108:	42a6      	cmp	r6, r4
 800a10a:	d109      	bne.n	800a120 <__libc_init_array+0x24>
 800a10c:	4d0b      	ldr	r5, [pc, #44]	@ (800a13c <__libc_init_array+0x40>)
 800a10e:	4c0c      	ldr	r4, [pc, #48]	@ (800a140 <__libc_init_array+0x44>)
 800a110:	f001 fec8 	bl	800bea4 <_init>
 800a114:	1b64      	subs	r4, r4, r5
 800a116:	10a4      	asrs	r4, r4, #2
 800a118:	2600      	movs	r6, #0
 800a11a:	42a6      	cmp	r6, r4
 800a11c:	d105      	bne.n	800a12a <__libc_init_array+0x2e>
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
 800a120:	f855 3b04 	ldr.w	r3, [r5], #4
 800a124:	4798      	blx	r3
 800a126:	3601      	adds	r6, #1
 800a128:	e7ee      	b.n	800a108 <__libc_init_array+0xc>
 800a12a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a12e:	4798      	blx	r3
 800a130:	3601      	adds	r6, #1
 800a132:	e7f2      	b.n	800a11a <__libc_init_array+0x1e>
 800a134:	0800c3b8 	.word	0x0800c3b8
 800a138:	0800c3b8 	.word	0x0800c3b8
 800a13c:	0800c3b8 	.word	0x0800c3b8
 800a140:	0800c3bc 	.word	0x0800c3bc

0800a144 <__retarget_lock_init_recursive>:
 800a144:	4770      	bx	lr

0800a146 <__retarget_lock_acquire_recursive>:
 800a146:	4770      	bx	lr

0800a148 <__retarget_lock_release_recursive>:
 800a148:	4770      	bx	lr

0800a14a <memcpy>:
 800a14a:	440a      	add	r2, r1
 800a14c:	4291      	cmp	r1, r2
 800a14e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a152:	d100      	bne.n	800a156 <memcpy+0xc>
 800a154:	4770      	bx	lr
 800a156:	b510      	push	{r4, lr}
 800a158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a15c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a160:	4291      	cmp	r1, r2
 800a162:	d1f9      	bne.n	800a158 <memcpy+0xe>
 800a164:	bd10      	pop	{r4, pc}
	...

0800a168 <nan>:
 800a168:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a170 <nan+0x8>
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	00000000 	.word	0x00000000
 800a174:	7ff80000 	.word	0x7ff80000

0800a178 <abort>:
 800a178:	b508      	push	{r3, lr}
 800a17a:	2006      	movs	r0, #6
 800a17c:	f001 fddc 	bl	800bd38 <raise>
 800a180:	2001      	movs	r0, #1
 800a182:	f7f8 fbd9 	bl	8002938 <_exit>

0800a186 <rshift>:
 800a186:	6903      	ldr	r3, [r0, #16]
 800a188:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a190:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a194:	f100 0414 	add.w	r4, r0, #20
 800a198:	dd45      	ble.n	800a226 <rshift+0xa0>
 800a19a:	f011 011f 	ands.w	r1, r1, #31
 800a19e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1a6:	d10c      	bne.n	800a1c2 <rshift+0x3c>
 800a1a8:	f100 0710 	add.w	r7, r0, #16
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	42b1      	cmp	r1, r6
 800a1b0:	d334      	bcc.n	800a21c <rshift+0x96>
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	1eea      	subs	r2, r5, #3
 800a1b8:	4296      	cmp	r6, r2
 800a1ba:	bf38      	it	cc
 800a1bc:	2300      	movcc	r3, #0
 800a1be:	4423      	add	r3, r4
 800a1c0:	e015      	b.n	800a1ee <rshift+0x68>
 800a1c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1c6:	f1c1 0820 	rsb	r8, r1, #32
 800a1ca:	40cf      	lsrs	r7, r1
 800a1cc:	f105 0e04 	add.w	lr, r5, #4
 800a1d0:	46a1      	mov	r9, r4
 800a1d2:	4576      	cmp	r6, lr
 800a1d4:	46f4      	mov	ip, lr
 800a1d6:	d815      	bhi.n	800a204 <rshift+0x7e>
 800a1d8:	1a9a      	subs	r2, r3, r2
 800a1da:	0092      	lsls	r2, r2, #2
 800a1dc:	3a04      	subs	r2, #4
 800a1de:	3501      	adds	r5, #1
 800a1e0:	42ae      	cmp	r6, r5
 800a1e2:	bf38      	it	cc
 800a1e4:	2200      	movcc	r2, #0
 800a1e6:	18a3      	adds	r3, r4, r2
 800a1e8:	50a7      	str	r7, [r4, r2]
 800a1ea:	b107      	cbz	r7, 800a1ee <rshift+0x68>
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	1b1a      	subs	r2, r3, r4
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a1f6:	bf08      	it	eq
 800a1f8:	2300      	moveq	r3, #0
 800a1fa:	6102      	str	r2, [r0, #16]
 800a1fc:	bf08      	it	eq
 800a1fe:	6143      	streq	r3, [r0, #20]
 800a200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a204:	f8dc c000 	ldr.w	ip, [ip]
 800a208:	fa0c fc08 	lsl.w	ip, ip, r8
 800a20c:	ea4c 0707 	orr.w	r7, ip, r7
 800a210:	f849 7b04 	str.w	r7, [r9], #4
 800a214:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a218:	40cf      	lsrs	r7, r1
 800a21a:	e7da      	b.n	800a1d2 <rshift+0x4c>
 800a21c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a220:	f847 cf04 	str.w	ip, [r7, #4]!
 800a224:	e7c3      	b.n	800a1ae <rshift+0x28>
 800a226:	4623      	mov	r3, r4
 800a228:	e7e1      	b.n	800a1ee <rshift+0x68>

0800a22a <__hexdig_fun>:
 800a22a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a22e:	2b09      	cmp	r3, #9
 800a230:	d802      	bhi.n	800a238 <__hexdig_fun+0xe>
 800a232:	3820      	subs	r0, #32
 800a234:	b2c0      	uxtb	r0, r0
 800a236:	4770      	bx	lr
 800a238:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	d801      	bhi.n	800a244 <__hexdig_fun+0x1a>
 800a240:	3847      	subs	r0, #71	@ 0x47
 800a242:	e7f7      	b.n	800a234 <__hexdig_fun+0xa>
 800a244:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a248:	2b05      	cmp	r3, #5
 800a24a:	d801      	bhi.n	800a250 <__hexdig_fun+0x26>
 800a24c:	3827      	subs	r0, #39	@ 0x27
 800a24e:	e7f1      	b.n	800a234 <__hexdig_fun+0xa>
 800a250:	2000      	movs	r0, #0
 800a252:	4770      	bx	lr

0800a254 <__gethex>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	b085      	sub	sp, #20
 800a25a:	468a      	mov	sl, r1
 800a25c:	9302      	str	r3, [sp, #8]
 800a25e:	680b      	ldr	r3, [r1, #0]
 800a260:	9001      	str	r0, [sp, #4]
 800a262:	4690      	mov	r8, r2
 800a264:	1c9c      	adds	r4, r3, #2
 800a266:	46a1      	mov	r9, r4
 800a268:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a26c:	2830      	cmp	r0, #48	@ 0x30
 800a26e:	d0fa      	beq.n	800a266 <__gethex+0x12>
 800a270:	eba9 0303 	sub.w	r3, r9, r3
 800a274:	f1a3 0b02 	sub.w	fp, r3, #2
 800a278:	f7ff ffd7 	bl	800a22a <__hexdig_fun>
 800a27c:	4605      	mov	r5, r0
 800a27e:	2800      	cmp	r0, #0
 800a280:	d168      	bne.n	800a354 <__gethex+0x100>
 800a282:	49a0      	ldr	r1, [pc, #640]	@ (800a504 <__gethex+0x2b0>)
 800a284:	2201      	movs	r2, #1
 800a286:	4648      	mov	r0, r9
 800a288:	f7ff ff05 	bl	800a096 <strncmp>
 800a28c:	4607      	mov	r7, r0
 800a28e:	2800      	cmp	r0, #0
 800a290:	d167      	bne.n	800a362 <__gethex+0x10e>
 800a292:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a296:	4626      	mov	r6, r4
 800a298:	f7ff ffc7 	bl	800a22a <__hexdig_fun>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d062      	beq.n	800a366 <__gethex+0x112>
 800a2a0:	4623      	mov	r3, r4
 800a2a2:	7818      	ldrb	r0, [r3, #0]
 800a2a4:	2830      	cmp	r0, #48	@ 0x30
 800a2a6:	4699      	mov	r9, r3
 800a2a8:	f103 0301 	add.w	r3, r3, #1
 800a2ac:	d0f9      	beq.n	800a2a2 <__gethex+0x4e>
 800a2ae:	f7ff ffbc 	bl	800a22a <__hexdig_fun>
 800a2b2:	fab0 f580 	clz	r5, r0
 800a2b6:	096d      	lsrs	r5, r5, #5
 800a2b8:	f04f 0b01 	mov.w	fp, #1
 800a2bc:	464a      	mov	r2, r9
 800a2be:	4616      	mov	r6, r2
 800a2c0:	3201      	adds	r2, #1
 800a2c2:	7830      	ldrb	r0, [r6, #0]
 800a2c4:	f7ff ffb1 	bl	800a22a <__hexdig_fun>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d1f8      	bne.n	800a2be <__gethex+0x6a>
 800a2cc:	498d      	ldr	r1, [pc, #564]	@ (800a504 <__gethex+0x2b0>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7ff fee0 	bl	800a096 <strncmp>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d13f      	bne.n	800a35a <__gethex+0x106>
 800a2da:	b944      	cbnz	r4, 800a2ee <__gethex+0x9a>
 800a2dc:	1c74      	adds	r4, r6, #1
 800a2de:	4622      	mov	r2, r4
 800a2e0:	4616      	mov	r6, r2
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	7830      	ldrb	r0, [r6, #0]
 800a2e6:	f7ff ffa0 	bl	800a22a <__hexdig_fun>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d1f8      	bne.n	800a2e0 <__gethex+0x8c>
 800a2ee:	1ba4      	subs	r4, r4, r6
 800a2f0:	00a7      	lsls	r7, r4, #2
 800a2f2:	7833      	ldrb	r3, [r6, #0]
 800a2f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a2f8:	2b50      	cmp	r3, #80	@ 0x50
 800a2fa:	d13e      	bne.n	800a37a <__gethex+0x126>
 800a2fc:	7873      	ldrb	r3, [r6, #1]
 800a2fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800a300:	d033      	beq.n	800a36a <__gethex+0x116>
 800a302:	2b2d      	cmp	r3, #45	@ 0x2d
 800a304:	d034      	beq.n	800a370 <__gethex+0x11c>
 800a306:	1c71      	adds	r1, r6, #1
 800a308:	2400      	movs	r4, #0
 800a30a:	7808      	ldrb	r0, [r1, #0]
 800a30c:	f7ff ff8d 	bl	800a22a <__hexdig_fun>
 800a310:	1e43      	subs	r3, r0, #1
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b18      	cmp	r3, #24
 800a316:	d830      	bhi.n	800a37a <__gethex+0x126>
 800a318:	f1a0 0210 	sub.w	r2, r0, #16
 800a31c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a320:	f7ff ff83 	bl	800a22a <__hexdig_fun>
 800a324:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a328:	fa5f fc8c 	uxtb.w	ip, ip
 800a32c:	f1bc 0f18 	cmp.w	ip, #24
 800a330:	f04f 030a 	mov.w	r3, #10
 800a334:	d91e      	bls.n	800a374 <__gethex+0x120>
 800a336:	b104      	cbz	r4, 800a33a <__gethex+0xe6>
 800a338:	4252      	negs	r2, r2
 800a33a:	4417      	add	r7, r2
 800a33c:	f8ca 1000 	str.w	r1, [sl]
 800a340:	b1ed      	cbz	r5, 800a37e <__gethex+0x12a>
 800a342:	f1bb 0f00 	cmp.w	fp, #0
 800a346:	bf0c      	ite	eq
 800a348:	2506      	moveq	r5, #6
 800a34a:	2500      	movne	r5, #0
 800a34c:	4628      	mov	r0, r5
 800a34e:	b005      	add	sp, #20
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	2500      	movs	r5, #0
 800a356:	462c      	mov	r4, r5
 800a358:	e7b0      	b.n	800a2bc <__gethex+0x68>
 800a35a:	2c00      	cmp	r4, #0
 800a35c:	d1c7      	bne.n	800a2ee <__gethex+0x9a>
 800a35e:	4627      	mov	r7, r4
 800a360:	e7c7      	b.n	800a2f2 <__gethex+0x9e>
 800a362:	464e      	mov	r6, r9
 800a364:	462f      	mov	r7, r5
 800a366:	2501      	movs	r5, #1
 800a368:	e7c3      	b.n	800a2f2 <__gethex+0x9e>
 800a36a:	2400      	movs	r4, #0
 800a36c:	1cb1      	adds	r1, r6, #2
 800a36e:	e7cc      	b.n	800a30a <__gethex+0xb6>
 800a370:	2401      	movs	r4, #1
 800a372:	e7fb      	b.n	800a36c <__gethex+0x118>
 800a374:	fb03 0002 	mla	r0, r3, r2, r0
 800a378:	e7ce      	b.n	800a318 <__gethex+0xc4>
 800a37a:	4631      	mov	r1, r6
 800a37c:	e7de      	b.n	800a33c <__gethex+0xe8>
 800a37e:	eba6 0309 	sub.w	r3, r6, r9
 800a382:	3b01      	subs	r3, #1
 800a384:	4629      	mov	r1, r5
 800a386:	2b07      	cmp	r3, #7
 800a388:	dc0a      	bgt.n	800a3a0 <__gethex+0x14c>
 800a38a:	9801      	ldr	r0, [sp, #4]
 800a38c:	f000 fe6e 	bl	800b06c <_Balloc>
 800a390:	4604      	mov	r4, r0
 800a392:	b940      	cbnz	r0, 800a3a6 <__gethex+0x152>
 800a394:	4b5c      	ldr	r3, [pc, #368]	@ (800a508 <__gethex+0x2b4>)
 800a396:	4602      	mov	r2, r0
 800a398:	21e4      	movs	r1, #228	@ 0xe4
 800a39a:	485c      	ldr	r0, [pc, #368]	@ (800a50c <__gethex+0x2b8>)
 800a39c:	f7fe fee2 	bl	8009164 <__assert_func>
 800a3a0:	3101      	adds	r1, #1
 800a3a2:	105b      	asrs	r3, r3, #1
 800a3a4:	e7ef      	b.n	800a386 <__gethex+0x132>
 800a3a6:	f100 0a14 	add.w	sl, r0, #20
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	4655      	mov	r5, sl
 800a3ae:	469b      	mov	fp, r3
 800a3b0:	45b1      	cmp	r9, r6
 800a3b2:	d337      	bcc.n	800a424 <__gethex+0x1d0>
 800a3b4:	f845 bb04 	str.w	fp, [r5], #4
 800a3b8:	eba5 050a 	sub.w	r5, r5, sl
 800a3bc:	10ad      	asrs	r5, r5, #2
 800a3be:	6125      	str	r5, [r4, #16]
 800a3c0:	4658      	mov	r0, fp
 800a3c2:	f000 ff45 	bl	800b250 <__hi0bits>
 800a3c6:	016d      	lsls	r5, r5, #5
 800a3c8:	f8d8 6000 	ldr.w	r6, [r8]
 800a3cc:	1a2d      	subs	r5, r5, r0
 800a3ce:	42b5      	cmp	r5, r6
 800a3d0:	dd54      	ble.n	800a47c <__gethex+0x228>
 800a3d2:	1bad      	subs	r5, r5, r6
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f001 fad9 	bl	800b98e <__any_on>
 800a3dc:	4681      	mov	r9, r0
 800a3de:	b178      	cbz	r0, 800a400 <__gethex+0x1ac>
 800a3e0:	1e6b      	subs	r3, r5, #1
 800a3e2:	1159      	asrs	r1, r3, #5
 800a3e4:	f003 021f 	and.w	r2, r3, #31
 800a3e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a3ec:	f04f 0901 	mov.w	r9, #1
 800a3f0:	fa09 f202 	lsl.w	r2, r9, r2
 800a3f4:	420a      	tst	r2, r1
 800a3f6:	d003      	beq.n	800a400 <__gethex+0x1ac>
 800a3f8:	454b      	cmp	r3, r9
 800a3fa:	dc36      	bgt.n	800a46a <__gethex+0x216>
 800a3fc:	f04f 0902 	mov.w	r9, #2
 800a400:	4629      	mov	r1, r5
 800a402:	4620      	mov	r0, r4
 800a404:	f7ff febf 	bl	800a186 <rshift>
 800a408:	442f      	add	r7, r5
 800a40a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a40e:	42bb      	cmp	r3, r7
 800a410:	da42      	bge.n	800a498 <__gethex+0x244>
 800a412:	9801      	ldr	r0, [sp, #4]
 800a414:	4621      	mov	r1, r4
 800a416:	f000 fe69 	bl	800b0ec <_Bfree>
 800a41a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a41c:	2300      	movs	r3, #0
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	25a3      	movs	r5, #163	@ 0xa3
 800a422:	e793      	b.n	800a34c <__gethex+0xf8>
 800a424:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a428:	2a2e      	cmp	r2, #46	@ 0x2e
 800a42a:	d012      	beq.n	800a452 <__gethex+0x1fe>
 800a42c:	2b20      	cmp	r3, #32
 800a42e:	d104      	bne.n	800a43a <__gethex+0x1e6>
 800a430:	f845 bb04 	str.w	fp, [r5], #4
 800a434:	f04f 0b00 	mov.w	fp, #0
 800a438:	465b      	mov	r3, fp
 800a43a:	7830      	ldrb	r0, [r6, #0]
 800a43c:	9303      	str	r3, [sp, #12]
 800a43e:	f7ff fef4 	bl	800a22a <__hexdig_fun>
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	f000 000f 	and.w	r0, r0, #15
 800a448:	4098      	lsls	r0, r3
 800a44a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a44e:	3304      	adds	r3, #4
 800a450:	e7ae      	b.n	800a3b0 <__gethex+0x15c>
 800a452:	45b1      	cmp	r9, r6
 800a454:	d8ea      	bhi.n	800a42c <__gethex+0x1d8>
 800a456:	492b      	ldr	r1, [pc, #172]	@ (800a504 <__gethex+0x2b0>)
 800a458:	9303      	str	r3, [sp, #12]
 800a45a:	2201      	movs	r2, #1
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7ff fe1a 	bl	800a096 <strncmp>
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	2800      	cmp	r0, #0
 800a466:	d1e1      	bne.n	800a42c <__gethex+0x1d8>
 800a468:	e7a2      	b.n	800a3b0 <__gethex+0x15c>
 800a46a:	1ea9      	subs	r1, r5, #2
 800a46c:	4620      	mov	r0, r4
 800a46e:	f001 fa8e 	bl	800b98e <__any_on>
 800a472:	2800      	cmp	r0, #0
 800a474:	d0c2      	beq.n	800a3fc <__gethex+0x1a8>
 800a476:	f04f 0903 	mov.w	r9, #3
 800a47a:	e7c1      	b.n	800a400 <__gethex+0x1ac>
 800a47c:	da09      	bge.n	800a492 <__gethex+0x23e>
 800a47e:	1b75      	subs	r5, r6, r5
 800a480:	4621      	mov	r1, r4
 800a482:	9801      	ldr	r0, [sp, #4]
 800a484:	462a      	mov	r2, r5
 800a486:	f001 f849 	bl	800b51c <__lshift>
 800a48a:	1b7f      	subs	r7, r7, r5
 800a48c:	4604      	mov	r4, r0
 800a48e:	f100 0a14 	add.w	sl, r0, #20
 800a492:	f04f 0900 	mov.w	r9, #0
 800a496:	e7b8      	b.n	800a40a <__gethex+0x1b6>
 800a498:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a49c:	42bd      	cmp	r5, r7
 800a49e:	dd6f      	ble.n	800a580 <__gethex+0x32c>
 800a4a0:	1bed      	subs	r5, r5, r7
 800a4a2:	42ae      	cmp	r6, r5
 800a4a4:	dc34      	bgt.n	800a510 <__gethex+0x2bc>
 800a4a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d022      	beq.n	800a4f4 <__gethex+0x2a0>
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d024      	beq.n	800a4fc <__gethex+0x2a8>
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d115      	bne.n	800a4e2 <__gethex+0x28e>
 800a4b6:	42ae      	cmp	r6, r5
 800a4b8:	d113      	bne.n	800a4e2 <__gethex+0x28e>
 800a4ba:	2e01      	cmp	r6, #1
 800a4bc:	d10b      	bne.n	800a4d6 <__gethex+0x282>
 800a4be:	9a02      	ldr	r2, [sp, #8]
 800a4c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	f8ca 3000 	str.w	r3, [sl]
 800a4ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4d0:	2562      	movs	r5, #98	@ 0x62
 800a4d2:	601c      	str	r4, [r3, #0]
 800a4d4:	e73a      	b.n	800a34c <__gethex+0xf8>
 800a4d6:	1e71      	subs	r1, r6, #1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f001 fa58 	bl	800b98e <__any_on>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d1ed      	bne.n	800a4be <__gethex+0x26a>
 800a4e2:	9801      	ldr	r0, [sp, #4]
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	f000 fe01 	bl	800b0ec <_Bfree>
 800a4ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	2550      	movs	r5, #80	@ 0x50
 800a4f2:	e72b      	b.n	800a34c <__gethex+0xf8>
 800a4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1f3      	bne.n	800a4e2 <__gethex+0x28e>
 800a4fa:	e7e0      	b.n	800a4be <__gethex+0x26a>
 800a4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1dd      	bne.n	800a4be <__gethex+0x26a>
 800a502:	e7ee      	b.n	800a4e2 <__gethex+0x28e>
 800a504:	0800c02c 	.word	0x0800c02c
 800a508:	0800c199 	.word	0x0800c199
 800a50c:	0800c1aa 	.word	0x0800c1aa
 800a510:	1e6f      	subs	r7, r5, #1
 800a512:	f1b9 0f00 	cmp.w	r9, #0
 800a516:	d130      	bne.n	800a57a <__gethex+0x326>
 800a518:	b127      	cbz	r7, 800a524 <__gethex+0x2d0>
 800a51a:	4639      	mov	r1, r7
 800a51c:	4620      	mov	r0, r4
 800a51e:	f001 fa36 	bl	800b98e <__any_on>
 800a522:	4681      	mov	r9, r0
 800a524:	117a      	asrs	r2, r7, #5
 800a526:	2301      	movs	r3, #1
 800a528:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a52c:	f007 071f 	and.w	r7, r7, #31
 800a530:	40bb      	lsls	r3, r7
 800a532:	4213      	tst	r3, r2
 800a534:	4629      	mov	r1, r5
 800a536:	4620      	mov	r0, r4
 800a538:	bf18      	it	ne
 800a53a:	f049 0902 	orrne.w	r9, r9, #2
 800a53e:	f7ff fe22 	bl	800a186 <rshift>
 800a542:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a546:	1b76      	subs	r6, r6, r5
 800a548:	2502      	movs	r5, #2
 800a54a:	f1b9 0f00 	cmp.w	r9, #0
 800a54e:	d047      	beq.n	800a5e0 <__gethex+0x38c>
 800a550:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d015      	beq.n	800a584 <__gethex+0x330>
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d017      	beq.n	800a58c <__gethex+0x338>
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d109      	bne.n	800a574 <__gethex+0x320>
 800a560:	f019 0f02 	tst.w	r9, #2
 800a564:	d006      	beq.n	800a574 <__gethex+0x320>
 800a566:	f8da 3000 	ldr.w	r3, [sl]
 800a56a:	ea49 0903 	orr.w	r9, r9, r3
 800a56e:	f019 0f01 	tst.w	r9, #1
 800a572:	d10e      	bne.n	800a592 <__gethex+0x33e>
 800a574:	f045 0510 	orr.w	r5, r5, #16
 800a578:	e032      	b.n	800a5e0 <__gethex+0x38c>
 800a57a:	f04f 0901 	mov.w	r9, #1
 800a57e:	e7d1      	b.n	800a524 <__gethex+0x2d0>
 800a580:	2501      	movs	r5, #1
 800a582:	e7e2      	b.n	800a54a <__gethex+0x2f6>
 800a584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a586:	f1c3 0301 	rsb	r3, r3, #1
 800a58a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0f0      	beq.n	800a574 <__gethex+0x320>
 800a592:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a596:	f104 0314 	add.w	r3, r4, #20
 800a59a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a59e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5a2:	f04f 0c00 	mov.w	ip, #0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ac:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a5b0:	d01b      	beq.n	800a5ea <__gethex+0x396>
 800a5b2:	3201      	adds	r2, #1
 800a5b4:	6002      	str	r2, [r0, #0]
 800a5b6:	2d02      	cmp	r5, #2
 800a5b8:	f104 0314 	add.w	r3, r4, #20
 800a5bc:	d13c      	bne.n	800a638 <__gethex+0x3e4>
 800a5be:	f8d8 2000 	ldr.w	r2, [r8]
 800a5c2:	3a01      	subs	r2, #1
 800a5c4:	42b2      	cmp	r2, r6
 800a5c6:	d109      	bne.n	800a5dc <__gethex+0x388>
 800a5c8:	1171      	asrs	r1, r6, #5
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5d0:	f006 061f 	and.w	r6, r6, #31
 800a5d4:	fa02 f606 	lsl.w	r6, r2, r6
 800a5d8:	421e      	tst	r6, r3
 800a5da:	d13a      	bne.n	800a652 <__gethex+0x3fe>
 800a5dc:	f045 0520 	orr.w	r5, r5, #32
 800a5e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5e2:	601c      	str	r4, [r3, #0]
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	601f      	str	r7, [r3, #0]
 800a5e8:	e6b0      	b.n	800a34c <__gethex+0xf8>
 800a5ea:	4299      	cmp	r1, r3
 800a5ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800a5f0:	d8d9      	bhi.n	800a5a6 <__gethex+0x352>
 800a5f2:	68a3      	ldr	r3, [r4, #8]
 800a5f4:	459b      	cmp	fp, r3
 800a5f6:	db17      	blt.n	800a628 <__gethex+0x3d4>
 800a5f8:	6861      	ldr	r1, [r4, #4]
 800a5fa:	9801      	ldr	r0, [sp, #4]
 800a5fc:	3101      	adds	r1, #1
 800a5fe:	f000 fd35 	bl	800b06c <_Balloc>
 800a602:	4681      	mov	r9, r0
 800a604:	b918      	cbnz	r0, 800a60e <__gethex+0x3ba>
 800a606:	4b1a      	ldr	r3, [pc, #104]	@ (800a670 <__gethex+0x41c>)
 800a608:	4602      	mov	r2, r0
 800a60a:	2184      	movs	r1, #132	@ 0x84
 800a60c:	e6c5      	b.n	800a39a <__gethex+0x146>
 800a60e:	6922      	ldr	r2, [r4, #16]
 800a610:	3202      	adds	r2, #2
 800a612:	f104 010c 	add.w	r1, r4, #12
 800a616:	0092      	lsls	r2, r2, #2
 800a618:	300c      	adds	r0, #12
 800a61a:	f7ff fd96 	bl	800a14a <memcpy>
 800a61e:	4621      	mov	r1, r4
 800a620:	9801      	ldr	r0, [sp, #4]
 800a622:	f000 fd63 	bl	800b0ec <_Bfree>
 800a626:	464c      	mov	r4, r9
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a630:	6122      	str	r2, [r4, #16]
 800a632:	2201      	movs	r2, #1
 800a634:	615a      	str	r2, [r3, #20]
 800a636:	e7be      	b.n	800a5b6 <__gethex+0x362>
 800a638:	6922      	ldr	r2, [r4, #16]
 800a63a:	455a      	cmp	r2, fp
 800a63c:	dd0b      	ble.n	800a656 <__gethex+0x402>
 800a63e:	2101      	movs	r1, #1
 800a640:	4620      	mov	r0, r4
 800a642:	f7ff fda0 	bl	800a186 <rshift>
 800a646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a64a:	3701      	adds	r7, #1
 800a64c:	42bb      	cmp	r3, r7
 800a64e:	f6ff aee0 	blt.w	800a412 <__gethex+0x1be>
 800a652:	2501      	movs	r5, #1
 800a654:	e7c2      	b.n	800a5dc <__gethex+0x388>
 800a656:	f016 061f 	ands.w	r6, r6, #31
 800a65a:	d0fa      	beq.n	800a652 <__gethex+0x3fe>
 800a65c:	4453      	add	r3, sl
 800a65e:	f1c6 0620 	rsb	r6, r6, #32
 800a662:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a666:	f000 fdf3 	bl	800b250 <__hi0bits>
 800a66a:	42b0      	cmp	r0, r6
 800a66c:	dbe7      	blt.n	800a63e <__gethex+0x3ea>
 800a66e:	e7f0      	b.n	800a652 <__gethex+0x3fe>
 800a670:	0800c199 	.word	0x0800c199

0800a674 <L_shift>:
 800a674:	f1c2 0208 	rsb	r2, r2, #8
 800a678:	0092      	lsls	r2, r2, #2
 800a67a:	b570      	push	{r4, r5, r6, lr}
 800a67c:	f1c2 0620 	rsb	r6, r2, #32
 800a680:	6843      	ldr	r3, [r0, #4]
 800a682:	6804      	ldr	r4, [r0, #0]
 800a684:	fa03 f506 	lsl.w	r5, r3, r6
 800a688:	432c      	orrs	r4, r5
 800a68a:	40d3      	lsrs	r3, r2
 800a68c:	6004      	str	r4, [r0, #0]
 800a68e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a692:	4288      	cmp	r0, r1
 800a694:	d3f4      	bcc.n	800a680 <L_shift+0xc>
 800a696:	bd70      	pop	{r4, r5, r6, pc}

0800a698 <__match>:
 800a698:	b530      	push	{r4, r5, lr}
 800a69a:	6803      	ldr	r3, [r0, #0]
 800a69c:	3301      	adds	r3, #1
 800a69e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6a2:	b914      	cbnz	r4, 800a6aa <__match+0x12>
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	bd30      	pop	{r4, r5, pc}
 800a6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a6b2:	2d19      	cmp	r5, #25
 800a6b4:	bf98      	it	ls
 800a6b6:	3220      	addls	r2, #32
 800a6b8:	42a2      	cmp	r2, r4
 800a6ba:	d0f0      	beq.n	800a69e <__match+0x6>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e7f3      	b.n	800a6a8 <__match+0x10>

0800a6c0 <__hexnan>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	680b      	ldr	r3, [r1, #0]
 800a6c6:	6801      	ldr	r1, [r0, #0]
 800a6c8:	115e      	asrs	r6, r3, #5
 800a6ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6ce:	f013 031f 	ands.w	r3, r3, #31
 800a6d2:	b087      	sub	sp, #28
 800a6d4:	bf18      	it	ne
 800a6d6:	3604      	addne	r6, #4
 800a6d8:	2500      	movs	r5, #0
 800a6da:	1f37      	subs	r7, r6, #4
 800a6dc:	4682      	mov	sl, r0
 800a6de:	4690      	mov	r8, r2
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a6e6:	46b9      	mov	r9, r7
 800a6e8:	463c      	mov	r4, r7
 800a6ea:	9502      	str	r5, [sp, #8]
 800a6ec:	46ab      	mov	fp, r5
 800a6ee:	784a      	ldrb	r2, [r1, #1]
 800a6f0:	1c4b      	adds	r3, r1, #1
 800a6f2:	9303      	str	r3, [sp, #12]
 800a6f4:	b342      	cbz	r2, 800a748 <__hexnan+0x88>
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	9105      	str	r1, [sp, #20]
 800a6fa:	9204      	str	r2, [sp, #16]
 800a6fc:	f7ff fd95 	bl	800a22a <__hexdig_fun>
 800a700:	2800      	cmp	r0, #0
 800a702:	d151      	bne.n	800a7a8 <__hexnan+0xe8>
 800a704:	9a04      	ldr	r2, [sp, #16]
 800a706:	9905      	ldr	r1, [sp, #20]
 800a708:	2a20      	cmp	r2, #32
 800a70a:	d818      	bhi.n	800a73e <__hexnan+0x7e>
 800a70c:	9b02      	ldr	r3, [sp, #8]
 800a70e:	459b      	cmp	fp, r3
 800a710:	dd13      	ble.n	800a73a <__hexnan+0x7a>
 800a712:	454c      	cmp	r4, r9
 800a714:	d206      	bcs.n	800a724 <__hexnan+0x64>
 800a716:	2d07      	cmp	r5, #7
 800a718:	dc04      	bgt.n	800a724 <__hexnan+0x64>
 800a71a:	462a      	mov	r2, r5
 800a71c:	4649      	mov	r1, r9
 800a71e:	4620      	mov	r0, r4
 800a720:	f7ff ffa8 	bl	800a674 <L_shift>
 800a724:	4544      	cmp	r4, r8
 800a726:	d952      	bls.n	800a7ce <__hexnan+0x10e>
 800a728:	2300      	movs	r3, #0
 800a72a:	f1a4 0904 	sub.w	r9, r4, #4
 800a72e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a732:	f8cd b008 	str.w	fp, [sp, #8]
 800a736:	464c      	mov	r4, r9
 800a738:	461d      	mov	r5, r3
 800a73a:	9903      	ldr	r1, [sp, #12]
 800a73c:	e7d7      	b.n	800a6ee <__hexnan+0x2e>
 800a73e:	2a29      	cmp	r2, #41	@ 0x29
 800a740:	d157      	bne.n	800a7f2 <__hexnan+0x132>
 800a742:	3102      	adds	r1, #2
 800a744:	f8ca 1000 	str.w	r1, [sl]
 800a748:	f1bb 0f00 	cmp.w	fp, #0
 800a74c:	d051      	beq.n	800a7f2 <__hexnan+0x132>
 800a74e:	454c      	cmp	r4, r9
 800a750:	d206      	bcs.n	800a760 <__hexnan+0xa0>
 800a752:	2d07      	cmp	r5, #7
 800a754:	dc04      	bgt.n	800a760 <__hexnan+0xa0>
 800a756:	462a      	mov	r2, r5
 800a758:	4649      	mov	r1, r9
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff ff8a 	bl	800a674 <L_shift>
 800a760:	4544      	cmp	r4, r8
 800a762:	d936      	bls.n	800a7d2 <__hexnan+0x112>
 800a764:	f1a8 0204 	sub.w	r2, r8, #4
 800a768:	4623      	mov	r3, r4
 800a76a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a76e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a772:	429f      	cmp	r7, r3
 800a774:	d2f9      	bcs.n	800a76a <__hexnan+0xaa>
 800a776:	1b3b      	subs	r3, r7, r4
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	3304      	adds	r3, #4
 800a77e:	3401      	adds	r4, #1
 800a780:	3e03      	subs	r6, #3
 800a782:	42b4      	cmp	r4, r6
 800a784:	bf88      	it	hi
 800a786:	2304      	movhi	r3, #4
 800a788:	4443      	add	r3, r8
 800a78a:	2200      	movs	r2, #0
 800a78c:	f843 2b04 	str.w	r2, [r3], #4
 800a790:	429f      	cmp	r7, r3
 800a792:	d2fb      	bcs.n	800a78c <__hexnan+0xcc>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	b91b      	cbnz	r3, 800a7a0 <__hexnan+0xe0>
 800a798:	4547      	cmp	r7, r8
 800a79a:	d128      	bne.n	800a7ee <__hexnan+0x12e>
 800a79c:	2301      	movs	r3, #1
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	2005      	movs	r0, #5
 800a7a2:	b007      	add	sp, #28
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	3501      	adds	r5, #1
 800a7aa:	2d08      	cmp	r5, #8
 800a7ac:	f10b 0b01 	add.w	fp, fp, #1
 800a7b0:	dd06      	ble.n	800a7c0 <__hexnan+0x100>
 800a7b2:	4544      	cmp	r4, r8
 800a7b4:	d9c1      	bls.n	800a73a <__hexnan+0x7a>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7bc:	2501      	movs	r5, #1
 800a7be:	3c04      	subs	r4, #4
 800a7c0:	6822      	ldr	r2, [r4, #0]
 800a7c2:	f000 000f 	and.w	r0, r0, #15
 800a7c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a7ca:	6020      	str	r0, [r4, #0]
 800a7cc:	e7b5      	b.n	800a73a <__hexnan+0x7a>
 800a7ce:	2508      	movs	r5, #8
 800a7d0:	e7b3      	b.n	800a73a <__hexnan+0x7a>
 800a7d2:	9b01      	ldr	r3, [sp, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0dd      	beq.n	800a794 <__hexnan+0xd4>
 800a7d8:	f1c3 0320 	rsb	r3, r3, #32
 800a7dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7e0:	40da      	lsrs	r2, r3
 800a7e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a7ec:	e7d2      	b.n	800a794 <__hexnan+0xd4>
 800a7ee:	3f04      	subs	r7, #4
 800a7f0:	e7d0      	b.n	800a794 <__hexnan+0xd4>
 800a7f2:	2004      	movs	r0, #4
 800a7f4:	e7d5      	b.n	800a7a2 <__hexnan+0xe2>

0800a7f6 <__sfputc_r>:
 800a7f6:	6893      	ldr	r3, [r2, #8]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	b410      	push	{r4}
 800a7fe:	6093      	str	r3, [r2, #8]
 800a800:	da08      	bge.n	800a814 <__sfputc_r+0x1e>
 800a802:	6994      	ldr	r4, [r2, #24]
 800a804:	42a3      	cmp	r3, r4
 800a806:	db01      	blt.n	800a80c <__sfputc_r+0x16>
 800a808:	290a      	cmp	r1, #10
 800a80a:	d103      	bne.n	800a814 <__sfputc_r+0x1e>
 800a80c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a810:	f001 b921 	b.w	800ba56 <__swbuf_r>
 800a814:	6813      	ldr	r3, [r2, #0]
 800a816:	1c58      	adds	r0, r3, #1
 800a818:	6010      	str	r0, [r2, #0]
 800a81a:	7019      	strb	r1, [r3, #0]
 800a81c:	4608      	mov	r0, r1
 800a81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <__sfputs_r>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	4614      	mov	r4, r2
 800a82c:	18d5      	adds	r5, r2, r3
 800a82e:	42ac      	cmp	r4, r5
 800a830:	d101      	bne.n	800a836 <__sfputs_r+0x12>
 800a832:	2000      	movs	r0, #0
 800a834:	e007      	b.n	800a846 <__sfputs_r+0x22>
 800a836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a83a:	463a      	mov	r2, r7
 800a83c:	4630      	mov	r0, r6
 800a83e:	f7ff ffda 	bl	800a7f6 <__sfputc_r>
 800a842:	1c43      	adds	r3, r0, #1
 800a844:	d1f3      	bne.n	800a82e <__sfputs_r+0xa>
 800a846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a848 <_vfiprintf_r>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	460d      	mov	r5, r1
 800a84e:	b09d      	sub	sp, #116	@ 0x74
 800a850:	4614      	mov	r4, r2
 800a852:	4698      	mov	r8, r3
 800a854:	4606      	mov	r6, r0
 800a856:	b118      	cbz	r0, 800a860 <_vfiprintf_r+0x18>
 800a858:	6a03      	ldr	r3, [r0, #32]
 800a85a:	b90b      	cbnz	r3, 800a860 <_vfiprintf_r+0x18>
 800a85c:	f7fe fd34 	bl	80092c8 <__sinit>
 800a860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a862:	07d9      	lsls	r1, r3, #31
 800a864:	d405      	bmi.n	800a872 <_vfiprintf_r+0x2a>
 800a866:	89ab      	ldrh	r3, [r5, #12]
 800a868:	059a      	lsls	r2, r3, #22
 800a86a:	d402      	bmi.n	800a872 <_vfiprintf_r+0x2a>
 800a86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a86e:	f7ff fc6a 	bl	800a146 <__retarget_lock_acquire_recursive>
 800a872:	89ab      	ldrh	r3, [r5, #12]
 800a874:	071b      	lsls	r3, r3, #28
 800a876:	d501      	bpl.n	800a87c <_vfiprintf_r+0x34>
 800a878:	692b      	ldr	r3, [r5, #16]
 800a87a:	b99b      	cbnz	r3, 800a8a4 <_vfiprintf_r+0x5c>
 800a87c:	4629      	mov	r1, r5
 800a87e:	4630      	mov	r0, r6
 800a880:	f001 f928 	bl	800bad4 <__swsetup_r>
 800a884:	b170      	cbz	r0, 800a8a4 <_vfiprintf_r+0x5c>
 800a886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a888:	07dc      	lsls	r4, r3, #31
 800a88a:	d504      	bpl.n	800a896 <_vfiprintf_r+0x4e>
 800a88c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a890:	b01d      	add	sp, #116	@ 0x74
 800a892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a896:	89ab      	ldrh	r3, [r5, #12]
 800a898:	0598      	lsls	r0, r3, #22
 800a89a:	d4f7      	bmi.n	800a88c <_vfiprintf_r+0x44>
 800a89c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a89e:	f7ff fc53 	bl	800a148 <__retarget_lock_release_recursive>
 800a8a2:	e7f3      	b.n	800a88c <_vfiprintf_r+0x44>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8a8:	2320      	movs	r3, #32
 800a8aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8b2:	2330      	movs	r3, #48	@ 0x30
 800a8b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa64 <_vfiprintf_r+0x21c>
 800a8b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8bc:	f04f 0901 	mov.w	r9, #1
 800a8c0:	4623      	mov	r3, r4
 800a8c2:	469a      	mov	sl, r3
 800a8c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c8:	b10a      	cbz	r2, 800a8ce <_vfiprintf_r+0x86>
 800a8ca:	2a25      	cmp	r2, #37	@ 0x25
 800a8cc:	d1f9      	bne.n	800a8c2 <_vfiprintf_r+0x7a>
 800a8ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a8d2:	d00b      	beq.n	800a8ec <_vfiprintf_r+0xa4>
 800a8d4:	465b      	mov	r3, fp
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f7ff ffa2 	bl	800a824 <__sfputs_r>
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	f000 80a7 	beq.w	800aa34 <_vfiprintf_r+0x1ec>
 800a8e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8e8:	445a      	add	r2, fp
 800a8ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 809f 	beq.w	800aa34 <_vfiprintf_r+0x1ec>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a900:	f10a 0a01 	add.w	sl, sl, #1
 800a904:	9304      	str	r3, [sp, #16]
 800a906:	9307      	str	r3, [sp, #28]
 800a908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a90c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a90e:	4654      	mov	r4, sl
 800a910:	2205      	movs	r2, #5
 800a912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a916:	4853      	ldr	r0, [pc, #332]	@ (800aa64 <_vfiprintf_r+0x21c>)
 800a918:	f7f5 fc5a 	bl	80001d0 <memchr>
 800a91c:	9a04      	ldr	r2, [sp, #16]
 800a91e:	b9d8      	cbnz	r0, 800a958 <_vfiprintf_r+0x110>
 800a920:	06d1      	lsls	r1, r2, #27
 800a922:	bf44      	itt	mi
 800a924:	2320      	movmi	r3, #32
 800a926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a92a:	0713      	lsls	r3, r2, #28
 800a92c:	bf44      	itt	mi
 800a92e:	232b      	movmi	r3, #43	@ 0x2b
 800a930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a934:	f89a 3000 	ldrb.w	r3, [sl]
 800a938:	2b2a      	cmp	r3, #42	@ 0x2a
 800a93a:	d015      	beq.n	800a968 <_vfiprintf_r+0x120>
 800a93c:	9a07      	ldr	r2, [sp, #28]
 800a93e:	4654      	mov	r4, sl
 800a940:	2000      	movs	r0, #0
 800a942:	f04f 0c0a 	mov.w	ip, #10
 800a946:	4621      	mov	r1, r4
 800a948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a94c:	3b30      	subs	r3, #48	@ 0x30
 800a94e:	2b09      	cmp	r3, #9
 800a950:	d94b      	bls.n	800a9ea <_vfiprintf_r+0x1a2>
 800a952:	b1b0      	cbz	r0, 800a982 <_vfiprintf_r+0x13a>
 800a954:	9207      	str	r2, [sp, #28]
 800a956:	e014      	b.n	800a982 <_vfiprintf_r+0x13a>
 800a958:	eba0 0308 	sub.w	r3, r0, r8
 800a95c:	fa09 f303 	lsl.w	r3, r9, r3
 800a960:	4313      	orrs	r3, r2
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	46a2      	mov	sl, r4
 800a966:	e7d2      	b.n	800a90e <_vfiprintf_r+0xc6>
 800a968:	9b03      	ldr	r3, [sp, #12]
 800a96a:	1d19      	adds	r1, r3, #4
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	9103      	str	r1, [sp, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	bfbb      	ittet	lt
 800a974:	425b      	neglt	r3, r3
 800a976:	f042 0202 	orrlt.w	r2, r2, #2
 800a97a:	9307      	strge	r3, [sp, #28]
 800a97c:	9307      	strlt	r3, [sp, #28]
 800a97e:	bfb8      	it	lt
 800a980:	9204      	strlt	r2, [sp, #16]
 800a982:	7823      	ldrb	r3, [r4, #0]
 800a984:	2b2e      	cmp	r3, #46	@ 0x2e
 800a986:	d10a      	bne.n	800a99e <_vfiprintf_r+0x156>
 800a988:	7863      	ldrb	r3, [r4, #1]
 800a98a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a98c:	d132      	bne.n	800a9f4 <_vfiprintf_r+0x1ac>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	1d1a      	adds	r2, r3, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	9203      	str	r2, [sp, #12]
 800a996:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a99a:	3402      	adds	r4, #2
 800a99c:	9305      	str	r3, [sp, #20]
 800a99e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa74 <_vfiprintf_r+0x22c>
 800a9a2:	7821      	ldrb	r1, [r4, #0]
 800a9a4:	2203      	movs	r2, #3
 800a9a6:	4650      	mov	r0, sl
 800a9a8:	f7f5 fc12 	bl	80001d0 <memchr>
 800a9ac:	b138      	cbz	r0, 800a9be <_vfiprintf_r+0x176>
 800a9ae:	9b04      	ldr	r3, [sp, #16]
 800a9b0:	eba0 000a 	sub.w	r0, r0, sl
 800a9b4:	2240      	movs	r2, #64	@ 0x40
 800a9b6:	4082      	lsls	r2, r0
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	3401      	adds	r4, #1
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c2:	4829      	ldr	r0, [pc, #164]	@ (800aa68 <_vfiprintf_r+0x220>)
 800a9c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9c8:	2206      	movs	r2, #6
 800a9ca:	f7f5 fc01 	bl	80001d0 <memchr>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d03f      	beq.n	800aa52 <_vfiprintf_r+0x20a>
 800a9d2:	4b26      	ldr	r3, [pc, #152]	@ (800aa6c <_vfiprintf_r+0x224>)
 800a9d4:	bb1b      	cbnz	r3, 800aa1e <_vfiprintf_r+0x1d6>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	3307      	adds	r3, #7
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	3308      	adds	r3, #8
 800a9e0:	9303      	str	r3, [sp, #12]
 800a9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e4:	443b      	add	r3, r7
 800a9e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e8:	e76a      	b.n	800a8c0 <_vfiprintf_r+0x78>
 800a9ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2001      	movs	r0, #1
 800a9f2:	e7a8      	b.n	800a946 <_vfiprintf_r+0xfe>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	3401      	adds	r4, #1
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f04f 0c0a 	mov.w	ip, #10
 800aa00:	4620      	mov	r0, r4
 800aa02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa06:	3a30      	subs	r2, #48	@ 0x30
 800aa08:	2a09      	cmp	r2, #9
 800aa0a:	d903      	bls.n	800aa14 <_vfiprintf_r+0x1cc>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0c6      	beq.n	800a99e <_vfiprintf_r+0x156>
 800aa10:	9105      	str	r1, [sp, #20]
 800aa12:	e7c4      	b.n	800a99e <_vfiprintf_r+0x156>
 800aa14:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa18:	4604      	mov	r4, r0
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e7f0      	b.n	800aa00 <_vfiprintf_r+0x1b8>
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4b12      	ldr	r3, [pc, #72]	@ (800aa70 <_vfiprintf_r+0x228>)
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f3af 8000 	nop.w
 800aa2e:	4607      	mov	r7, r0
 800aa30:	1c78      	adds	r0, r7, #1
 800aa32:	d1d6      	bne.n	800a9e2 <_vfiprintf_r+0x19a>
 800aa34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa36:	07d9      	lsls	r1, r3, #31
 800aa38:	d405      	bmi.n	800aa46 <_vfiprintf_r+0x1fe>
 800aa3a:	89ab      	ldrh	r3, [r5, #12]
 800aa3c:	059a      	lsls	r2, r3, #22
 800aa3e:	d402      	bmi.n	800aa46 <_vfiprintf_r+0x1fe>
 800aa40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa42:	f7ff fb81 	bl	800a148 <__retarget_lock_release_recursive>
 800aa46:	89ab      	ldrh	r3, [r5, #12]
 800aa48:	065b      	lsls	r3, r3, #25
 800aa4a:	f53f af1f 	bmi.w	800a88c <_vfiprintf_r+0x44>
 800aa4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa50:	e71e      	b.n	800a890 <_vfiprintf_r+0x48>
 800aa52:	ab03      	add	r3, sp, #12
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	462a      	mov	r2, r5
 800aa58:	4b05      	ldr	r3, [pc, #20]	@ (800aa70 <_vfiprintf_r+0x228>)
 800aa5a:	a904      	add	r1, sp, #16
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f000 f92d 	bl	800acbc <_printf_i>
 800aa62:	e7e4      	b.n	800aa2e <_vfiprintf_r+0x1e6>
 800aa64:	0800c20a 	.word	0x0800c20a
 800aa68:	0800c214 	.word	0x0800c214
 800aa6c:	00000000 	.word	0x00000000
 800aa70:	0800a825 	.word	0x0800a825
 800aa74:	0800c210 	.word	0x0800c210

0800aa78 <sbrk_aligned>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4e0f      	ldr	r6, [pc, #60]	@ (800aab8 <sbrk_aligned+0x40>)
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	6831      	ldr	r1, [r6, #0]
 800aa80:	4605      	mov	r5, r0
 800aa82:	b911      	cbnz	r1, 800aa8a <sbrk_aligned+0x12>
 800aa84:	f001 f986 	bl	800bd94 <_sbrk_r>
 800aa88:	6030      	str	r0, [r6, #0]
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f001 f981 	bl	800bd94 <_sbrk_r>
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	d103      	bne.n	800aa9e <sbrk_aligned+0x26>
 800aa96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	bd70      	pop	{r4, r5, r6, pc}
 800aa9e:	1cc4      	adds	r4, r0, #3
 800aaa0:	f024 0403 	bic.w	r4, r4, #3
 800aaa4:	42a0      	cmp	r0, r4
 800aaa6:	d0f8      	beq.n	800aa9a <sbrk_aligned+0x22>
 800aaa8:	1a21      	subs	r1, r4, r0
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f001 f972 	bl	800bd94 <_sbrk_r>
 800aab0:	3001      	adds	r0, #1
 800aab2:	d1f2      	bne.n	800aa9a <sbrk_aligned+0x22>
 800aab4:	e7ef      	b.n	800aa96 <sbrk_aligned+0x1e>
 800aab6:	bf00      	nop
 800aab8:	20009c7c 	.word	0x20009c7c

0800aabc <_malloc_r>:
 800aabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aac0:	1ccd      	adds	r5, r1, #3
 800aac2:	f025 0503 	bic.w	r5, r5, #3
 800aac6:	3508      	adds	r5, #8
 800aac8:	2d0c      	cmp	r5, #12
 800aaca:	bf38      	it	cc
 800aacc:	250c      	movcc	r5, #12
 800aace:	2d00      	cmp	r5, #0
 800aad0:	4606      	mov	r6, r0
 800aad2:	db01      	blt.n	800aad8 <_malloc_r+0x1c>
 800aad4:	42a9      	cmp	r1, r5
 800aad6:	d904      	bls.n	800aae2 <_malloc_r+0x26>
 800aad8:	230c      	movs	r3, #12
 800aada:	6033      	str	r3, [r6, #0]
 800aadc:	2000      	movs	r0, #0
 800aade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abb8 <_malloc_r+0xfc>
 800aae6:	f000 fab5 	bl	800b054 <__malloc_lock>
 800aaea:	f8d8 3000 	ldr.w	r3, [r8]
 800aaee:	461c      	mov	r4, r3
 800aaf0:	bb44      	cbnz	r4, 800ab44 <_malloc_r+0x88>
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f7ff ffbf 	bl	800aa78 <sbrk_aligned>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	4604      	mov	r4, r0
 800aafe:	d158      	bne.n	800abb2 <_malloc_r+0xf6>
 800ab00:	f8d8 4000 	ldr.w	r4, [r8]
 800ab04:	4627      	mov	r7, r4
 800ab06:	2f00      	cmp	r7, #0
 800ab08:	d143      	bne.n	800ab92 <_malloc_r+0xd6>
 800ab0a:	2c00      	cmp	r4, #0
 800ab0c:	d04b      	beq.n	800aba6 <_malloc_r+0xea>
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	4639      	mov	r1, r7
 800ab12:	4630      	mov	r0, r6
 800ab14:	eb04 0903 	add.w	r9, r4, r3
 800ab18:	f001 f93c 	bl	800bd94 <_sbrk_r>
 800ab1c:	4581      	cmp	r9, r0
 800ab1e:	d142      	bne.n	800aba6 <_malloc_r+0xea>
 800ab20:	6821      	ldr	r1, [r4, #0]
 800ab22:	1a6d      	subs	r5, r5, r1
 800ab24:	4629      	mov	r1, r5
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7ff ffa6 	bl	800aa78 <sbrk_aligned>
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	d03a      	beq.n	800aba6 <_malloc_r+0xea>
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	442b      	add	r3, r5
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	f8d8 3000 	ldr.w	r3, [r8]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	bb62      	cbnz	r2, 800ab98 <_malloc_r+0xdc>
 800ab3e:	f8c8 7000 	str.w	r7, [r8]
 800ab42:	e00f      	b.n	800ab64 <_malloc_r+0xa8>
 800ab44:	6822      	ldr	r2, [r4, #0]
 800ab46:	1b52      	subs	r2, r2, r5
 800ab48:	d420      	bmi.n	800ab8c <_malloc_r+0xd0>
 800ab4a:	2a0b      	cmp	r2, #11
 800ab4c:	d917      	bls.n	800ab7e <_malloc_r+0xc2>
 800ab4e:	1961      	adds	r1, r4, r5
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	6025      	str	r5, [r4, #0]
 800ab54:	bf18      	it	ne
 800ab56:	6059      	strne	r1, [r3, #4]
 800ab58:	6863      	ldr	r3, [r4, #4]
 800ab5a:	bf08      	it	eq
 800ab5c:	f8c8 1000 	streq.w	r1, [r8]
 800ab60:	5162      	str	r2, [r4, r5]
 800ab62:	604b      	str	r3, [r1, #4]
 800ab64:	4630      	mov	r0, r6
 800ab66:	f000 fa7b 	bl	800b060 <__malloc_unlock>
 800ab6a:	f104 000b 	add.w	r0, r4, #11
 800ab6e:	1d23      	adds	r3, r4, #4
 800ab70:	f020 0007 	bic.w	r0, r0, #7
 800ab74:	1ac2      	subs	r2, r0, r3
 800ab76:	bf1c      	itt	ne
 800ab78:	1a1b      	subne	r3, r3, r0
 800ab7a:	50a3      	strne	r3, [r4, r2]
 800ab7c:	e7af      	b.n	800aade <_malloc_r+0x22>
 800ab7e:	6862      	ldr	r2, [r4, #4]
 800ab80:	42a3      	cmp	r3, r4
 800ab82:	bf0c      	ite	eq
 800ab84:	f8c8 2000 	streq.w	r2, [r8]
 800ab88:	605a      	strne	r2, [r3, #4]
 800ab8a:	e7eb      	b.n	800ab64 <_malloc_r+0xa8>
 800ab8c:	4623      	mov	r3, r4
 800ab8e:	6864      	ldr	r4, [r4, #4]
 800ab90:	e7ae      	b.n	800aaf0 <_malloc_r+0x34>
 800ab92:	463c      	mov	r4, r7
 800ab94:	687f      	ldr	r7, [r7, #4]
 800ab96:	e7b6      	b.n	800ab06 <_malloc_r+0x4a>
 800ab98:	461a      	mov	r2, r3
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	42a3      	cmp	r3, r4
 800ab9e:	d1fb      	bne.n	800ab98 <_malloc_r+0xdc>
 800aba0:	2300      	movs	r3, #0
 800aba2:	6053      	str	r3, [r2, #4]
 800aba4:	e7de      	b.n	800ab64 <_malloc_r+0xa8>
 800aba6:	230c      	movs	r3, #12
 800aba8:	6033      	str	r3, [r6, #0]
 800abaa:	4630      	mov	r0, r6
 800abac:	f000 fa58 	bl	800b060 <__malloc_unlock>
 800abb0:	e794      	b.n	800aadc <_malloc_r+0x20>
 800abb2:	6005      	str	r5, [r0, #0]
 800abb4:	e7d6      	b.n	800ab64 <_malloc_r+0xa8>
 800abb6:	bf00      	nop
 800abb8:	20009c80 	.word	0x20009c80

0800abbc <__ascii_mbtowc>:
 800abbc:	b082      	sub	sp, #8
 800abbe:	b901      	cbnz	r1, 800abc2 <__ascii_mbtowc+0x6>
 800abc0:	a901      	add	r1, sp, #4
 800abc2:	b142      	cbz	r2, 800abd6 <__ascii_mbtowc+0x1a>
 800abc4:	b14b      	cbz	r3, 800abda <__ascii_mbtowc+0x1e>
 800abc6:	7813      	ldrb	r3, [r2, #0]
 800abc8:	600b      	str	r3, [r1, #0]
 800abca:	7812      	ldrb	r2, [r2, #0]
 800abcc:	1e10      	subs	r0, r2, #0
 800abce:	bf18      	it	ne
 800abd0:	2001      	movne	r0, #1
 800abd2:	b002      	add	sp, #8
 800abd4:	4770      	bx	lr
 800abd6:	4610      	mov	r0, r2
 800abd8:	e7fb      	b.n	800abd2 <__ascii_mbtowc+0x16>
 800abda:	f06f 0001 	mvn.w	r0, #1
 800abde:	e7f8      	b.n	800abd2 <__ascii_mbtowc+0x16>

0800abe0 <_printf_common>:
 800abe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe4:	4616      	mov	r6, r2
 800abe6:	4698      	mov	r8, r3
 800abe8:	688a      	ldr	r2, [r1, #8]
 800abea:	690b      	ldr	r3, [r1, #16]
 800abec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abf0:	4293      	cmp	r3, r2
 800abf2:	bfb8      	it	lt
 800abf4:	4613      	movlt	r3, r2
 800abf6:	6033      	str	r3, [r6, #0]
 800abf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abfc:	4607      	mov	r7, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	b10a      	cbz	r2, 800ac06 <_printf_common+0x26>
 800ac02:	3301      	adds	r3, #1
 800ac04:	6033      	str	r3, [r6, #0]
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	0699      	lsls	r1, r3, #26
 800ac0a:	bf42      	ittt	mi
 800ac0c:	6833      	ldrmi	r3, [r6, #0]
 800ac0e:	3302      	addmi	r3, #2
 800ac10:	6033      	strmi	r3, [r6, #0]
 800ac12:	6825      	ldr	r5, [r4, #0]
 800ac14:	f015 0506 	ands.w	r5, r5, #6
 800ac18:	d106      	bne.n	800ac28 <_printf_common+0x48>
 800ac1a:	f104 0a19 	add.w	sl, r4, #25
 800ac1e:	68e3      	ldr	r3, [r4, #12]
 800ac20:	6832      	ldr	r2, [r6, #0]
 800ac22:	1a9b      	subs	r3, r3, r2
 800ac24:	42ab      	cmp	r3, r5
 800ac26:	dc26      	bgt.n	800ac76 <_printf_common+0x96>
 800ac28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac2c:	6822      	ldr	r2, [r4, #0]
 800ac2e:	3b00      	subs	r3, #0
 800ac30:	bf18      	it	ne
 800ac32:	2301      	movne	r3, #1
 800ac34:	0692      	lsls	r2, r2, #26
 800ac36:	d42b      	bmi.n	800ac90 <_printf_common+0xb0>
 800ac38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac3c:	4641      	mov	r1, r8
 800ac3e:	4638      	mov	r0, r7
 800ac40:	47c8      	blx	r9
 800ac42:	3001      	adds	r0, #1
 800ac44:	d01e      	beq.n	800ac84 <_printf_common+0xa4>
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	6922      	ldr	r2, [r4, #16]
 800ac4a:	f003 0306 	and.w	r3, r3, #6
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	bf02      	ittt	eq
 800ac52:	68e5      	ldreq	r5, [r4, #12]
 800ac54:	6833      	ldreq	r3, [r6, #0]
 800ac56:	1aed      	subeq	r5, r5, r3
 800ac58:	68a3      	ldr	r3, [r4, #8]
 800ac5a:	bf0c      	ite	eq
 800ac5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac60:	2500      	movne	r5, #0
 800ac62:	4293      	cmp	r3, r2
 800ac64:	bfc4      	itt	gt
 800ac66:	1a9b      	subgt	r3, r3, r2
 800ac68:	18ed      	addgt	r5, r5, r3
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	341a      	adds	r4, #26
 800ac6e:	42b5      	cmp	r5, r6
 800ac70:	d11a      	bne.n	800aca8 <_printf_common+0xc8>
 800ac72:	2000      	movs	r0, #0
 800ac74:	e008      	b.n	800ac88 <_printf_common+0xa8>
 800ac76:	2301      	movs	r3, #1
 800ac78:	4652      	mov	r2, sl
 800ac7a:	4641      	mov	r1, r8
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	47c8      	blx	r9
 800ac80:	3001      	adds	r0, #1
 800ac82:	d103      	bne.n	800ac8c <_printf_common+0xac>
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	e7c6      	b.n	800ac1e <_printf_common+0x3e>
 800ac90:	18e1      	adds	r1, r4, r3
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	2030      	movs	r0, #48	@ 0x30
 800ac96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac9a:	4422      	add	r2, r4
 800ac9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aca0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aca4:	3302      	adds	r3, #2
 800aca6:	e7c7      	b.n	800ac38 <_printf_common+0x58>
 800aca8:	2301      	movs	r3, #1
 800acaa:	4622      	mov	r2, r4
 800acac:	4641      	mov	r1, r8
 800acae:	4638      	mov	r0, r7
 800acb0:	47c8      	blx	r9
 800acb2:	3001      	adds	r0, #1
 800acb4:	d0e6      	beq.n	800ac84 <_printf_common+0xa4>
 800acb6:	3601      	adds	r6, #1
 800acb8:	e7d9      	b.n	800ac6e <_printf_common+0x8e>
	...

0800acbc <_printf_i>:
 800acbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc0:	7e0f      	ldrb	r7, [r1, #24]
 800acc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acc4:	2f78      	cmp	r7, #120	@ 0x78
 800acc6:	4691      	mov	r9, r2
 800acc8:	4680      	mov	r8, r0
 800acca:	460c      	mov	r4, r1
 800accc:	469a      	mov	sl, r3
 800acce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acd2:	d807      	bhi.n	800ace4 <_printf_i+0x28>
 800acd4:	2f62      	cmp	r7, #98	@ 0x62
 800acd6:	d80a      	bhi.n	800acee <_printf_i+0x32>
 800acd8:	2f00      	cmp	r7, #0
 800acda:	f000 80d2 	beq.w	800ae82 <_printf_i+0x1c6>
 800acde:	2f58      	cmp	r7, #88	@ 0x58
 800ace0:	f000 80b9 	beq.w	800ae56 <_printf_i+0x19a>
 800ace4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ace8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acec:	e03a      	b.n	800ad64 <_printf_i+0xa8>
 800acee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acf2:	2b15      	cmp	r3, #21
 800acf4:	d8f6      	bhi.n	800ace4 <_printf_i+0x28>
 800acf6:	a101      	add	r1, pc, #4	@ (adr r1, 800acfc <_printf_i+0x40>)
 800acf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acfc:	0800ad55 	.word	0x0800ad55
 800ad00:	0800ad69 	.word	0x0800ad69
 800ad04:	0800ace5 	.word	0x0800ace5
 800ad08:	0800ace5 	.word	0x0800ace5
 800ad0c:	0800ace5 	.word	0x0800ace5
 800ad10:	0800ace5 	.word	0x0800ace5
 800ad14:	0800ad69 	.word	0x0800ad69
 800ad18:	0800ace5 	.word	0x0800ace5
 800ad1c:	0800ace5 	.word	0x0800ace5
 800ad20:	0800ace5 	.word	0x0800ace5
 800ad24:	0800ace5 	.word	0x0800ace5
 800ad28:	0800ae69 	.word	0x0800ae69
 800ad2c:	0800ad93 	.word	0x0800ad93
 800ad30:	0800ae23 	.word	0x0800ae23
 800ad34:	0800ace5 	.word	0x0800ace5
 800ad38:	0800ace5 	.word	0x0800ace5
 800ad3c:	0800ae8b 	.word	0x0800ae8b
 800ad40:	0800ace5 	.word	0x0800ace5
 800ad44:	0800ad93 	.word	0x0800ad93
 800ad48:	0800ace5 	.word	0x0800ace5
 800ad4c:	0800ace5 	.word	0x0800ace5
 800ad50:	0800ae2b 	.word	0x0800ae2b
 800ad54:	6833      	ldr	r3, [r6, #0]
 800ad56:	1d1a      	adds	r2, r3, #4
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6032      	str	r2, [r6, #0]
 800ad5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad64:	2301      	movs	r3, #1
 800ad66:	e09d      	b.n	800aea4 <_printf_i+0x1e8>
 800ad68:	6833      	ldr	r3, [r6, #0]
 800ad6a:	6820      	ldr	r0, [r4, #0]
 800ad6c:	1d19      	adds	r1, r3, #4
 800ad6e:	6031      	str	r1, [r6, #0]
 800ad70:	0606      	lsls	r6, r0, #24
 800ad72:	d501      	bpl.n	800ad78 <_printf_i+0xbc>
 800ad74:	681d      	ldr	r5, [r3, #0]
 800ad76:	e003      	b.n	800ad80 <_printf_i+0xc4>
 800ad78:	0645      	lsls	r5, r0, #25
 800ad7a:	d5fb      	bpl.n	800ad74 <_printf_i+0xb8>
 800ad7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad80:	2d00      	cmp	r5, #0
 800ad82:	da03      	bge.n	800ad8c <_printf_i+0xd0>
 800ad84:	232d      	movs	r3, #45	@ 0x2d
 800ad86:	426d      	negs	r5, r5
 800ad88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad8c:	4859      	ldr	r0, [pc, #356]	@ (800aef4 <_printf_i+0x238>)
 800ad8e:	230a      	movs	r3, #10
 800ad90:	e011      	b.n	800adb6 <_printf_i+0xfa>
 800ad92:	6821      	ldr	r1, [r4, #0]
 800ad94:	6833      	ldr	r3, [r6, #0]
 800ad96:	0608      	lsls	r0, r1, #24
 800ad98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad9c:	d402      	bmi.n	800ada4 <_printf_i+0xe8>
 800ad9e:	0649      	lsls	r1, r1, #25
 800ada0:	bf48      	it	mi
 800ada2:	b2ad      	uxthmi	r5, r5
 800ada4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ada6:	4853      	ldr	r0, [pc, #332]	@ (800aef4 <_printf_i+0x238>)
 800ada8:	6033      	str	r3, [r6, #0]
 800adaa:	bf14      	ite	ne
 800adac:	230a      	movne	r3, #10
 800adae:	2308      	moveq	r3, #8
 800adb0:	2100      	movs	r1, #0
 800adb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800adb6:	6866      	ldr	r6, [r4, #4]
 800adb8:	60a6      	str	r6, [r4, #8]
 800adba:	2e00      	cmp	r6, #0
 800adbc:	bfa2      	ittt	ge
 800adbe:	6821      	ldrge	r1, [r4, #0]
 800adc0:	f021 0104 	bicge.w	r1, r1, #4
 800adc4:	6021      	strge	r1, [r4, #0]
 800adc6:	b90d      	cbnz	r5, 800adcc <_printf_i+0x110>
 800adc8:	2e00      	cmp	r6, #0
 800adca:	d04b      	beq.n	800ae64 <_printf_i+0x1a8>
 800adcc:	4616      	mov	r6, r2
 800adce:	fbb5 f1f3 	udiv	r1, r5, r3
 800add2:	fb03 5711 	mls	r7, r3, r1, r5
 800add6:	5dc7      	ldrb	r7, [r0, r7]
 800add8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800addc:	462f      	mov	r7, r5
 800adde:	42bb      	cmp	r3, r7
 800ade0:	460d      	mov	r5, r1
 800ade2:	d9f4      	bls.n	800adce <_printf_i+0x112>
 800ade4:	2b08      	cmp	r3, #8
 800ade6:	d10b      	bne.n	800ae00 <_printf_i+0x144>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	07df      	lsls	r7, r3, #31
 800adec:	d508      	bpl.n	800ae00 <_printf_i+0x144>
 800adee:	6923      	ldr	r3, [r4, #16]
 800adf0:	6861      	ldr	r1, [r4, #4]
 800adf2:	4299      	cmp	r1, r3
 800adf4:	bfde      	ittt	le
 800adf6:	2330      	movle	r3, #48	@ 0x30
 800adf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adfc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ae00:	1b92      	subs	r2, r2, r6
 800ae02:	6122      	str	r2, [r4, #16]
 800ae04:	f8cd a000 	str.w	sl, [sp]
 800ae08:	464b      	mov	r3, r9
 800ae0a:	aa03      	add	r2, sp, #12
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4640      	mov	r0, r8
 800ae10:	f7ff fee6 	bl	800abe0 <_printf_common>
 800ae14:	3001      	adds	r0, #1
 800ae16:	d14a      	bne.n	800aeae <_printf_i+0x1f2>
 800ae18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae1c:	b004      	add	sp, #16
 800ae1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	f043 0320 	orr.w	r3, r3, #32
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	4833      	ldr	r0, [pc, #204]	@ (800aef8 <_printf_i+0x23c>)
 800ae2c:	2778      	movs	r7, #120	@ 0x78
 800ae2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	6831      	ldr	r1, [r6, #0]
 800ae36:	061f      	lsls	r7, r3, #24
 800ae38:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae3c:	d402      	bmi.n	800ae44 <_printf_i+0x188>
 800ae3e:	065f      	lsls	r7, r3, #25
 800ae40:	bf48      	it	mi
 800ae42:	b2ad      	uxthmi	r5, r5
 800ae44:	6031      	str	r1, [r6, #0]
 800ae46:	07d9      	lsls	r1, r3, #31
 800ae48:	bf44      	itt	mi
 800ae4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae4e:	6023      	strmi	r3, [r4, #0]
 800ae50:	b11d      	cbz	r5, 800ae5a <_printf_i+0x19e>
 800ae52:	2310      	movs	r3, #16
 800ae54:	e7ac      	b.n	800adb0 <_printf_i+0xf4>
 800ae56:	4827      	ldr	r0, [pc, #156]	@ (800aef4 <_printf_i+0x238>)
 800ae58:	e7e9      	b.n	800ae2e <_printf_i+0x172>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	f023 0320 	bic.w	r3, r3, #32
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	e7f6      	b.n	800ae52 <_printf_i+0x196>
 800ae64:	4616      	mov	r6, r2
 800ae66:	e7bd      	b.n	800ade4 <_printf_i+0x128>
 800ae68:	6833      	ldr	r3, [r6, #0]
 800ae6a:	6825      	ldr	r5, [r4, #0]
 800ae6c:	6961      	ldr	r1, [r4, #20]
 800ae6e:	1d18      	adds	r0, r3, #4
 800ae70:	6030      	str	r0, [r6, #0]
 800ae72:	062e      	lsls	r6, r5, #24
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	d501      	bpl.n	800ae7c <_printf_i+0x1c0>
 800ae78:	6019      	str	r1, [r3, #0]
 800ae7a:	e002      	b.n	800ae82 <_printf_i+0x1c6>
 800ae7c:	0668      	lsls	r0, r5, #25
 800ae7e:	d5fb      	bpl.n	800ae78 <_printf_i+0x1bc>
 800ae80:	8019      	strh	r1, [r3, #0]
 800ae82:	2300      	movs	r3, #0
 800ae84:	6123      	str	r3, [r4, #16]
 800ae86:	4616      	mov	r6, r2
 800ae88:	e7bc      	b.n	800ae04 <_printf_i+0x148>
 800ae8a:	6833      	ldr	r3, [r6, #0]
 800ae8c:	1d1a      	adds	r2, r3, #4
 800ae8e:	6032      	str	r2, [r6, #0]
 800ae90:	681e      	ldr	r6, [r3, #0]
 800ae92:	6862      	ldr	r2, [r4, #4]
 800ae94:	2100      	movs	r1, #0
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7f5 f99a 	bl	80001d0 <memchr>
 800ae9c:	b108      	cbz	r0, 800aea2 <_printf_i+0x1e6>
 800ae9e:	1b80      	subs	r0, r0, r6
 800aea0:	6060      	str	r0, [r4, #4]
 800aea2:	6863      	ldr	r3, [r4, #4]
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	2300      	movs	r3, #0
 800aea8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aeac:	e7aa      	b.n	800ae04 <_printf_i+0x148>
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	47d0      	blx	sl
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d0ad      	beq.n	800ae18 <_printf_i+0x15c>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	079b      	lsls	r3, r3, #30
 800aec0:	d413      	bmi.n	800aeea <_printf_i+0x22e>
 800aec2:	68e0      	ldr	r0, [r4, #12]
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	4298      	cmp	r0, r3
 800aec8:	bfb8      	it	lt
 800aeca:	4618      	movlt	r0, r3
 800aecc:	e7a6      	b.n	800ae1c <_printf_i+0x160>
 800aece:	2301      	movs	r3, #1
 800aed0:	4632      	mov	r2, r6
 800aed2:	4649      	mov	r1, r9
 800aed4:	4640      	mov	r0, r8
 800aed6:	47d0      	blx	sl
 800aed8:	3001      	adds	r0, #1
 800aeda:	d09d      	beq.n	800ae18 <_printf_i+0x15c>
 800aedc:	3501      	adds	r5, #1
 800aede:	68e3      	ldr	r3, [r4, #12]
 800aee0:	9903      	ldr	r1, [sp, #12]
 800aee2:	1a5b      	subs	r3, r3, r1
 800aee4:	42ab      	cmp	r3, r5
 800aee6:	dcf2      	bgt.n	800aece <_printf_i+0x212>
 800aee8:	e7eb      	b.n	800aec2 <_printf_i+0x206>
 800aeea:	2500      	movs	r5, #0
 800aeec:	f104 0619 	add.w	r6, r4, #25
 800aef0:	e7f5      	b.n	800aede <_printf_i+0x222>
 800aef2:	bf00      	nop
 800aef4:	0800c21b 	.word	0x0800c21b
 800aef8:	0800c22c 	.word	0x0800c22c

0800aefc <__sflush_r>:
 800aefc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	0716      	lsls	r6, r2, #28
 800af06:	4605      	mov	r5, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	d454      	bmi.n	800afb6 <__sflush_r+0xba>
 800af0c:	684b      	ldr	r3, [r1, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dc02      	bgt.n	800af18 <__sflush_r+0x1c>
 800af12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	dd48      	ble.n	800afaa <__sflush_r+0xae>
 800af18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af1a:	2e00      	cmp	r6, #0
 800af1c:	d045      	beq.n	800afaa <__sflush_r+0xae>
 800af1e:	2300      	movs	r3, #0
 800af20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af24:	682f      	ldr	r7, [r5, #0]
 800af26:	6a21      	ldr	r1, [r4, #32]
 800af28:	602b      	str	r3, [r5, #0]
 800af2a:	d030      	beq.n	800af8e <__sflush_r+0x92>
 800af2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	0759      	lsls	r1, r3, #29
 800af32:	d505      	bpl.n	800af40 <__sflush_r+0x44>
 800af34:	6863      	ldr	r3, [r4, #4]
 800af36:	1ad2      	subs	r2, r2, r3
 800af38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af3a:	b10b      	cbz	r3, 800af40 <__sflush_r+0x44>
 800af3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af3e:	1ad2      	subs	r2, r2, r3
 800af40:	2300      	movs	r3, #0
 800af42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af44:	6a21      	ldr	r1, [r4, #32]
 800af46:	4628      	mov	r0, r5
 800af48:	47b0      	blx	r6
 800af4a:	1c43      	adds	r3, r0, #1
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	d106      	bne.n	800af5e <__sflush_r+0x62>
 800af50:	6829      	ldr	r1, [r5, #0]
 800af52:	291d      	cmp	r1, #29
 800af54:	d82b      	bhi.n	800afae <__sflush_r+0xb2>
 800af56:	4a2a      	ldr	r2, [pc, #168]	@ (800b000 <__sflush_r+0x104>)
 800af58:	410a      	asrs	r2, r1
 800af5a:	07d6      	lsls	r6, r2, #31
 800af5c:	d427      	bmi.n	800afae <__sflush_r+0xb2>
 800af5e:	2200      	movs	r2, #0
 800af60:	6062      	str	r2, [r4, #4]
 800af62:	04d9      	lsls	r1, r3, #19
 800af64:	6922      	ldr	r2, [r4, #16]
 800af66:	6022      	str	r2, [r4, #0]
 800af68:	d504      	bpl.n	800af74 <__sflush_r+0x78>
 800af6a:	1c42      	adds	r2, r0, #1
 800af6c:	d101      	bne.n	800af72 <__sflush_r+0x76>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	b903      	cbnz	r3, 800af74 <__sflush_r+0x78>
 800af72:	6560      	str	r0, [r4, #84]	@ 0x54
 800af74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af76:	602f      	str	r7, [r5, #0]
 800af78:	b1b9      	cbz	r1, 800afaa <__sflush_r+0xae>
 800af7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af7e:	4299      	cmp	r1, r3
 800af80:	d002      	beq.n	800af88 <__sflush_r+0x8c>
 800af82:	4628      	mov	r0, r5
 800af84:	f000 ff3c 	bl	800be00 <_free_r>
 800af88:	2300      	movs	r3, #0
 800af8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800af8c:	e00d      	b.n	800afaa <__sflush_r+0xae>
 800af8e:	2301      	movs	r3, #1
 800af90:	4628      	mov	r0, r5
 800af92:	47b0      	blx	r6
 800af94:	4602      	mov	r2, r0
 800af96:	1c50      	adds	r0, r2, #1
 800af98:	d1c9      	bne.n	800af2e <__sflush_r+0x32>
 800af9a:	682b      	ldr	r3, [r5, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0c6      	beq.n	800af2e <__sflush_r+0x32>
 800afa0:	2b1d      	cmp	r3, #29
 800afa2:	d001      	beq.n	800afa8 <__sflush_r+0xac>
 800afa4:	2b16      	cmp	r3, #22
 800afa6:	d11e      	bne.n	800afe6 <__sflush_r+0xea>
 800afa8:	602f      	str	r7, [r5, #0]
 800afaa:	2000      	movs	r0, #0
 800afac:	e022      	b.n	800aff4 <__sflush_r+0xf8>
 800afae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb2:	b21b      	sxth	r3, r3
 800afb4:	e01b      	b.n	800afee <__sflush_r+0xf2>
 800afb6:	690f      	ldr	r7, [r1, #16]
 800afb8:	2f00      	cmp	r7, #0
 800afba:	d0f6      	beq.n	800afaa <__sflush_r+0xae>
 800afbc:	0793      	lsls	r3, r2, #30
 800afbe:	680e      	ldr	r6, [r1, #0]
 800afc0:	bf08      	it	eq
 800afc2:	694b      	ldreq	r3, [r1, #20]
 800afc4:	600f      	str	r7, [r1, #0]
 800afc6:	bf18      	it	ne
 800afc8:	2300      	movne	r3, #0
 800afca:	eba6 0807 	sub.w	r8, r6, r7
 800afce:	608b      	str	r3, [r1, #8]
 800afd0:	f1b8 0f00 	cmp.w	r8, #0
 800afd4:	dde9      	ble.n	800afaa <__sflush_r+0xae>
 800afd6:	6a21      	ldr	r1, [r4, #32]
 800afd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afda:	4643      	mov	r3, r8
 800afdc:	463a      	mov	r2, r7
 800afde:	4628      	mov	r0, r5
 800afe0:	47b0      	blx	r6
 800afe2:	2800      	cmp	r0, #0
 800afe4:	dc08      	bgt.n	800aff8 <__sflush_r+0xfc>
 800afe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff8:	4407      	add	r7, r0
 800affa:	eba8 0800 	sub.w	r8, r8, r0
 800affe:	e7e7      	b.n	800afd0 <__sflush_r+0xd4>
 800b000:	dfbffffe 	.word	0xdfbffffe

0800b004 <_fflush_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	690b      	ldr	r3, [r1, #16]
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	b913      	cbnz	r3, 800b014 <_fflush_r+0x10>
 800b00e:	2500      	movs	r5, #0
 800b010:	4628      	mov	r0, r5
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	b118      	cbz	r0, 800b01e <_fflush_r+0x1a>
 800b016:	6a03      	ldr	r3, [r0, #32]
 800b018:	b90b      	cbnz	r3, 800b01e <_fflush_r+0x1a>
 800b01a:	f7fe f955 	bl	80092c8 <__sinit>
 800b01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0f3      	beq.n	800b00e <_fflush_r+0xa>
 800b026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b028:	07d0      	lsls	r0, r2, #31
 800b02a:	d404      	bmi.n	800b036 <_fflush_r+0x32>
 800b02c:	0599      	lsls	r1, r3, #22
 800b02e:	d402      	bmi.n	800b036 <_fflush_r+0x32>
 800b030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b032:	f7ff f888 	bl	800a146 <__retarget_lock_acquire_recursive>
 800b036:	4628      	mov	r0, r5
 800b038:	4621      	mov	r1, r4
 800b03a:	f7ff ff5f 	bl	800aefc <__sflush_r>
 800b03e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b040:	07da      	lsls	r2, r3, #31
 800b042:	4605      	mov	r5, r0
 800b044:	d4e4      	bmi.n	800b010 <_fflush_r+0xc>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	059b      	lsls	r3, r3, #22
 800b04a:	d4e1      	bmi.n	800b010 <_fflush_r+0xc>
 800b04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b04e:	f7ff f87b 	bl	800a148 <__retarget_lock_release_recursive>
 800b052:	e7dd      	b.n	800b010 <_fflush_r+0xc>

0800b054 <__malloc_lock>:
 800b054:	4801      	ldr	r0, [pc, #4]	@ (800b05c <__malloc_lock+0x8>)
 800b056:	f7ff b876 	b.w	800a146 <__retarget_lock_acquire_recursive>
 800b05a:	bf00      	nop
 800b05c:	20009c78 	.word	0x20009c78

0800b060 <__malloc_unlock>:
 800b060:	4801      	ldr	r0, [pc, #4]	@ (800b068 <__malloc_unlock+0x8>)
 800b062:	f7ff b871 	b.w	800a148 <__retarget_lock_release_recursive>
 800b066:	bf00      	nop
 800b068:	20009c78 	.word	0x20009c78

0800b06c <_Balloc>:
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	69c6      	ldr	r6, [r0, #28]
 800b070:	4604      	mov	r4, r0
 800b072:	460d      	mov	r5, r1
 800b074:	b976      	cbnz	r6, 800b094 <_Balloc+0x28>
 800b076:	2010      	movs	r0, #16
 800b078:	f000 ff0c 	bl	800be94 <malloc>
 800b07c:	4602      	mov	r2, r0
 800b07e:	61e0      	str	r0, [r4, #28]
 800b080:	b920      	cbnz	r0, 800b08c <_Balloc+0x20>
 800b082:	4b18      	ldr	r3, [pc, #96]	@ (800b0e4 <_Balloc+0x78>)
 800b084:	4818      	ldr	r0, [pc, #96]	@ (800b0e8 <_Balloc+0x7c>)
 800b086:	216b      	movs	r1, #107	@ 0x6b
 800b088:	f7fe f86c 	bl	8009164 <__assert_func>
 800b08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b090:	6006      	str	r6, [r0, #0]
 800b092:	60c6      	str	r6, [r0, #12]
 800b094:	69e6      	ldr	r6, [r4, #28]
 800b096:	68f3      	ldr	r3, [r6, #12]
 800b098:	b183      	cbz	r3, 800b0bc <_Balloc+0x50>
 800b09a:	69e3      	ldr	r3, [r4, #28]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0a2:	b9b8      	cbnz	r0, 800b0d4 <_Balloc+0x68>
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b0aa:	1d72      	adds	r2, r6, #5
 800b0ac:	0092      	lsls	r2, r2, #2
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 fe92 	bl	800bdd8 <_calloc_r>
 800b0b4:	b160      	cbz	r0, 800b0d0 <_Balloc+0x64>
 800b0b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0ba:	e00e      	b.n	800b0da <_Balloc+0x6e>
 800b0bc:	2221      	movs	r2, #33	@ 0x21
 800b0be:	2104      	movs	r1, #4
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fe89 	bl	800bdd8 <_calloc_r>
 800b0c6:	69e3      	ldr	r3, [r4, #28]
 800b0c8:	60f0      	str	r0, [r6, #12]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e4      	bne.n	800b09a <_Balloc+0x2e>
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
 800b0d4:	6802      	ldr	r2, [r0, #0]
 800b0d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0e0:	e7f7      	b.n	800b0d2 <_Balloc+0x66>
 800b0e2:	bf00      	nop
 800b0e4:	0800c23d 	.word	0x0800c23d
 800b0e8:	0800c254 	.word	0x0800c254

0800b0ec <_Bfree>:
 800b0ec:	b570      	push	{r4, r5, r6, lr}
 800b0ee:	69c6      	ldr	r6, [r0, #28]
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	b976      	cbnz	r6, 800b114 <_Bfree+0x28>
 800b0f6:	2010      	movs	r0, #16
 800b0f8:	f000 fecc 	bl	800be94 <malloc>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	61e8      	str	r0, [r5, #28]
 800b100:	b920      	cbnz	r0, 800b10c <_Bfree+0x20>
 800b102:	4b09      	ldr	r3, [pc, #36]	@ (800b128 <_Bfree+0x3c>)
 800b104:	4809      	ldr	r0, [pc, #36]	@ (800b12c <_Bfree+0x40>)
 800b106:	218f      	movs	r1, #143	@ 0x8f
 800b108:	f7fe f82c 	bl	8009164 <__assert_func>
 800b10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b110:	6006      	str	r6, [r0, #0]
 800b112:	60c6      	str	r6, [r0, #12]
 800b114:	b13c      	cbz	r4, 800b126 <_Bfree+0x3a>
 800b116:	69eb      	ldr	r3, [r5, #28]
 800b118:	6862      	ldr	r2, [r4, #4]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b120:	6021      	str	r1, [r4, #0]
 800b122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	0800c23d 	.word	0x0800c23d
 800b12c:	0800c254 	.word	0x0800c254

0800b130 <__multadd>:
 800b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b134:	690d      	ldr	r5, [r1, #16]
 800b136:	4607      	mov	r7, r0
 800b138:	460c      	mov	r4, r1
 800b13a:	461e      	mov	r6, r3
 800b13c:	f101 0c14 	add.w	ip, r1, #20
 800b140:	2000      	movs	r0, #0
 800b142:	f8dc 3000 	ldr.w	r3, [ip]
 800b146:	b299      	uxth	r1, r3
 800b148:	fb02 6101 	mla	r1, r2, r1, r6
 800b14c:	0c1e      	lsrs	r6, r3, #16
 800b14e:	0c0b      	lsrs	r3, r1, #16
 800b150:	fb02 3306 	mla	r3, r2, r6, r3
 800b154:	b289      	uxth	r1, r1
 800b156:	3001      	adds	r0, #1
 800b158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b15c:	4285      	cmp	r5, r0
 800b15e:	f84c 1b04 	str.w	r1, [ip], #4
 800b162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b166:	dcec      	bgt.n	800b142 <__multadd+0x12>
 800b168:	b30e      	cbz	r6, 800b1ae <__multadd+0x7e>
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	42ab      	cmp	r3, r5
 800b16e:	dc19      	bgt.n	800b1a4 <__multadd+0x74>
 800b170:	6861      	ldr	r1, [r4, #4]
 800b172:	4638      	mov	r0, r7
 800b174:	3101      	adds	r1, #1
 800b176:	f7ff ff79 	bl	800b06c <_Balloc>
 800b17a:	4680      	mov	r8, r0
 800b17c:	b928      	cbnz	r0, 800b18a <__multadd+0x5a>
 800b17e:	4602      	mov	r2, r0
 800b180:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b4 <__multadd+0x84>)
 800b182:	480d      	ldr	r0, [pc, #52]	@ (800b1b8 <__multadd+0x88>)
 800b184:	21ba      	movs	r1, #186	@ 0xba
 800b186:	f7fd ffed 	bl	8009164 <__assert_func>
 800b18a:	6922      	ldr	r2, [r4, #16]
 800b18c:	3202      	adds	r2, #2
 800b18e:	f104 010c 	add.w	r1, r4, #12
 800b192:	0092      	lsls	r2, r2, #2
 800b194:	300c      	adds	r0, #12
 800b196:	f7fe ffd8 	bl	800a14a <memcpy>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4638      	mov	r0, r7
 800b19e:	f7ff ffa5 	bl	800b0ec <_Bfree>
 800b1a2:	4644      	mov	r4, r8
 800b1a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1a8:	3501      	adds	r5, #1
 800b1aa:	615e      	str	r6, [r3, #20]
 800b1ac:	6125      	str	r5, [r4, #16]
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b4:	0800c199 	.word	0x0800c199
 800b1b8:	0800c254 	.word	0x0800c254

0800b1bc <__s2b>:
 800b1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	4615      	mov	r5, r2
 800b1c4:	461f      	mov	r7, r3
 800b1c6:	2209      	movs	r2, #9
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	db09      	blt.n	800b1ec <__s2b+0x30>
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7ff ff47 	bl	800b06c <_Balloc>
 800b1de:	b940      	cbnz	r0, 800b1f2 <__s2b+0x36>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	4b19      	ldr	r3, [pc, #100]	@ (800b248 <__s2b+0x8c>)
 800b1e4:	4819      	ldr	r0, [pc, #100]	@ (800b24c <__s2b+0x90>)
 800b1e6:	21d3      	movs	r1, #211	@ 0xd3
 800b1e8:	f7fd ffbc 	bl	8009164 <__assert_func>
 800b1ec:	0052      	lsls	r2, r2, #1
 800b1ee:	3101      	adds	r1, #1
 800b1f0:	e7f0      	b.n	800b1d4 <__s2b+0x18>
 800b1f2:	9b08      	ldr	r3, [sp, #32]
 800b1f4:	6143      	str	r3, [r0, #20]
 800b1f6:	2d09      	cmp	r5, #9
 800b1f8:	f04f 0301 	mov.w	r3, #1
 800b1fc:	6103      	str	r3, [r0, #16]
 800b1fe:	dd16      	ble.n	800b22e <__s2b+0x72>
 800b200:	f104 0909 	add.w	r9, r4, #9
 800b204:	46c8      	mov	r8, r9
 800b206:	442c      	add	r4, r5
 800b208:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b20c:	4601      	mov	r1, r0
 800b20e:	3b30      	subs	r3, #48	@ 0x30
 800b210:	220a      	movs	r2, #10
 800b212:	4630      	mov	r0, r6
 800b214:	f7ff ff8c 	bl	800b130 <__multadd>
 800b218:	45a0      	cmp	r8, r4
 800b21a:	d1f5      	bne.n	800b208 <__s2b+0x4c>
 800b21c:	f1a5 0408 	sub.w	r4, r5, #8
 800b220:	444c      	add	r4, r9
 800b222:	1b2d      	subs	r5, r5, r4
 800b224:	1963      	adds	r3, r4, r5
 800b226:	42bb      	cmp	r3, r7
 800b228:	db04      	blt.n	800b234 <__s2b+0x78>
 800b22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22e:	340a      	adds	r4, #10
 800b230:	2509      	movs	r5, #9
 800b232:	e7f6      	b.n	800b222 <__s2b+0x66>
 800b234:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b238:	4601      	mov	r1, r0
 800b23a:	3b30      	subs	r3, #48	@ 0x30
 800b23c:	220a      	movs	r2, #10
 800b23e:	4630      	mov	r0, r6
 800b240:	f7ff ff76 	bl	800b130 <__multadd>
 800b244:	e7ee      	b.n	800b224 <__s2b+0x68>
 800b246:	bf00      	nop
 800b248:	0800c199 	.word	0x0800c199
 800b24c:	0800c254 	.word	0x0800c254

0800b250 <__hi0bits>:
 800b250:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b254:	4603      	mov	r3, r0
 800b256:	bf36      	itet	cc
 800b258:	0403      	lslcc	r3, r0, #16
 800b25a:	2000      	movcs	r0, #0
 800b25c:	2010      	movcc	r0, #16
 800b25e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b262:	bf3c      	itt	cc
 800b264:	021b      	lslcc	r3, r3, #8
 800b266:	3008      	addcc	r0, #8
 800b268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b26c:	bf3c      	itt	cc
 800b26e:	011b      	lslcc	r3, r3, #4
 800b270:	3004      	addcc	r0, #4
 800b272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b276:	bf3c      	itt	cc
 800b278:	009b      	lslcc	r3, r3, #2
 800b27a:	3002      	addcc	r0, #2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	db05      	blt.n	800b28c <__hi0bits+0x3c>
 800b280:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b284:	f100 0001 	add.w	r0, r0, #1
 800b288:	bf08      	it	eq
 800b28a:	2020      	moveq	r0, #32
 800b28c:	4770      	bx	lr

0800b28e <__lo0bits>:
 800b28e:	6803      	ldr	r3, [r0, #0]
 800b290:	4602      	mov	r2, r0
 800b292:	f013 0007 	ands.w	r0, r3, #7
 800b296:	d00b      	beq.n	800b2b0 <__lo0bits+0x22>
 800b298:	07d9      	lsls	r1, r3, #31
 800b29a:	d421      	bmi.n	800b2e0 <__lo0bits+0x52>
 800b29c:	0798      	lsls	r0, r3, #30
 800b29e:	bf49      	itett	mi
 800b2a0:	085b      	lsrmi	r3, r3, #1
 800b2a2:	089b      	lsrpl	r3, r3, #2
 800b2a4:	2001      	movmi	r0, #1
 800b2a6:	6013      	strmi	r3, [r2, #0]
 800b2a8:	bf5c      	itt	pl
 800b2aa:	6013      	strpl	r3, [r2, #0]
 800b2ac:	2002      	movpl	r0, #2
 800b2ae:	4770      	bx	lr
 800b2b0:	b299      	uxth	r1, r3
 800b2b2:	b909      	cbnz	r1, 800b2b8 <__lo0bits+0x2a>
 800b2b4:	0c1b      	lsrs	r3, r3, #16
 800b2b6:	2010      	movs	r0, #16
 800b2b8:	b2d9      	uxtb	r1, r3
 800b2ba:	b909      	cbnz	r1, 800b2c0 <__lo0bits+0x32>
 800b2bc:	3008      	adds	r0, #8
 800b2be:	0a1b      	lsrs	r3, r3, #8
 800b2c0:	0719      	lsls	r1, r3, #28
 800b2c2:	bf04      	itt	eq
 800b2c4:	091b      	lsreq	r3, r3, #4
 800b2c6:	3004      	addeq	r0, #4
 800b2c8:	0799      	lsls	r1, r3, #30
 800b2ca:	bf04      	itt	eq
 800b2cc:	089b      	lsreq	r3, r3, #2
 800b2ce:	3002      	addeq	r0, #2
 800b2d0:	07d9      	lsls	r1, r3, #31
 800b2d2:	d403      	bmi.n	800b2dc <__lo0bits+0x4e>
 800b2d4:	085b      	lsrs	r3, r3, #1
 800b2d6:	f100 0001 	add.w	r0, r0, #1
 800b2da:	d003      	beq.n	800b2e4 <__lo0bits+0x56>
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	4770      	bx	lr
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	4770      	bx	lr
 800b2e4:	2020      	movs	r0, #32
 800b2e6:	4770      	bx	lr

0800b2e8 <__i2b>:
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	f7ff febd 	bl	800b06c <_Balloc>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	b928      	cbnz	r0, 800b302 <__i2b+0x1a>
 800b2f6:	4b05      	ldr	r3, [pc, #20]	@ (800b30c <__i2b+0x24>)
 800b2f8:	4805      	ldr	r0, [pc, #20]	@ (800b310 <__i2b+0x28>)
 800b2fa:	f240 1145 	movw	r1, #325	@ 0x145
 800b2fe:	f7fd ff31 	bl	8009164 <__assert_func>
 800b302:	2301      	movs	r3, #1
 800b304:	6144      	str	r4, [r0, #20]
 800b306:	6103      	str	r3, [r0, #16]
 800b308:	bd10      	pop	{r4, pc}
 800b30a:	bf00      	nop
 800b30c:	0800c199 	.word	0x0800c199
 800b310:	0800c254 	.word	0x0800c254

0800b314 <__multiply>:
 800b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	4614      	mov	r4, r2
 800b31a:	690a      	ldr	r2, [r1, #16]
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	429a      	cmp	r2, r3
 800b320:	bfa8      	it	ge
 800b322:	4623      	movge	r3, r4
 800b324:	460f      	mov	r7, r1
 800b326:	bfa4      	itt	ge
 800b328:	460c      	movge	r4, r1
 800b32a:	461f      	movge	r7, r3
 800b32c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b330:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b334:	68a3      	ldr	r3, [r4, #8]
 800b336:	6861      	ldr	r1, [r4, #4]
 800b338:	eb0a 0609 	add.w	r6, sl, r9
 800b33c:	42b3      	cmp	r3, r6
 800b33e:	b085      	sub	sp, #20
 800b340:	bfb8      	it	lt
 800b342:	3101      	addlt	r1, #1
 800b344:	f7ff fe92 	bl	800b06c <_Balloc>
 800b348:	b930      	cbnz	r0, 800b358 <__multiply+0x44>
 800b34a:	4602      	mov	r2, r0
 800b34c:	4b44      	ldr	r3, [pc, #272]	@ (800b460 <__multiply+0x14c>)
 800b34e:	4845      	ldr	r0, [pc, #276]	@ (800b464 <__multiply+0x150>)
 800b350:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b354:	f7fd ff06 	bl	8009164 <__assert_func>
 800b358:	f100 0514 	add.w	r5, r0, #20
 800b35c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b360:	462b      	mov	r3, r5
 800b362:	2200      	movs	r2, #0
 800b364:	4543      	cmp	r3, r8
 800b366:	d321      	bcc.n	800b3ac <__multiply+0x98>
 800b368:	f107 0114 	add.w	r1, r7, #20
 800b36c:	f104 0214 	add.w	r2, r4, #20
 800b370:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b374:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b378:	9302      	str	r3, [sp, #8]
 800b37a:	1b13      	subs	r3, r2, r4
 800b37c:	3b15      	subs	r3, #21
 800b37e:	f023 0303 	bic.w	r3, r3, #3
 800b382:	3304      	adds	r3, #4
 800b384:	f104 0715 	add.w	r7, r4, #21
 800b388:	42ba      	cmp	r2, r7
 800b38a:	bf38      	it	cc
 800b38c:	2304      	movcc	r3, #4
 800b38e:	9301      	str	r3, [sp, #4]
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	9103      	str	r1, [sp, #12]
 800b394:	428b      	cmp	r3, r1
 800b396:	d80c      	bhi.n	800b3b2 <__multiply+0x9e>
 800b398:	2e00      	cmp	r6, #0
 800b39a:	dd03      	ble.n	800b3a4 <__multiply+0x90>
 800b39c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d05b      	beq.n	800b45c <__multiply+0x148>
 800b3a4:	6106      	str	r6, [r0, #16]
 800b3a6:	b005      	add	sp, #20
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	f843 2b04 	str.w	r2, [r3], #4
 800b3b0:	e7d8      	b.n	800b364 <__multiply+0x50>
 800b3b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b3b6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ba:	d024      	beq.n	800b406 <__multiply+0xf2>
 800b3bc:	f104 0e14 	add.w	lr, r4, #20
 800b3c0:	46a9      	mov	r9, r5
 800b3c2:	f04f 0c00 	mov.w	ip, #0
 800b3c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3ca:	f8d9 3000 	ldr.w	r3, [r9]
 800b3ce:	fa1f fb87 	uxth.w	fp, r7
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b3d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b3dc:	f8d9 7000 	ldr.w	r7, [r9]
 800b3e0:	4463      	add	r3, ip
 800b3e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b3e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800b3ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b3f4:	4572      	cmp	r2, lr
 800b3f6:	f849 3b04 	str.w	r3, [r9], #4
 800b3fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b3fe:	d8e2      	bhi.n	800b3c6 <__multiply+0xb2>
 800b400:	9b01      	ldr	r3, [sp, #4]
 800b402:	f845 c003 	str.w	ip, [r5, r3]
 800b406:	9b03      	ldr	r3, [sp, #12]
 800b408:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b40c:	3104      	adds	r1, #4
 800b40e:	f1b9 0f00 	cmp.w	r9, #0
 800b412:	d021      	beq.n	800b458 <__multiply+0x144>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	f104 0c14 	add.w	ip, r4, #20
 800b41a:	46ae      	mov	lr, r5
 800b41c:	f04f 0a00 	mov.w	sl, #0
 800b420:	f8bc b000 	ldrh.w	fp, [ip]
 800b424:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b428:	fb09 770b 	mla	r7, r9, fp, r7
 800b42c:	4457      	add	r7, sl
 800b42e:	b29b      	uxth	r3, r3
 800b430:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b434:	f84e 3b04 	str.w	r3, [lr], #4
 800b438:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b43c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b440:	f8be 3000 	ldrh.w	r3, [lr]
 800b444:	fb09 330a 	mla	r3, r9, sl, r3
 800b448:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b44c:	4562      	cmp	r2, ip
 800b44e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b452:	d8e5      	bhi.n	800b420 <__multiply+0x10c>
 800b454:	9f01      	ldr	r7, [sp, #4]
 800b456:	51eb      	str	r3, [r5, r7]
 800b458:	3504      	adds	r5, #4
 800b45a:	e799      	b.n	800b390 <__multiply+0x7c>
 800b45c:	3e01      	subs	r6, #1
 800b45e:	e79b      	b.n	800b398 <__multiply+0x84>
 800b460:	0800c199 	.word	0x0800c199
 800b464:	0800c254 	.word	0x0800c254

0800b468 <__pow5mult>:
 800b468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b46c:	4615      	mov	r5, r2
 800b46e:	f012 0203 	ands.w	r2, r2, #3
 800b472:	4607      	mov	r7, r0
 800b474:	460e      	mov	r6, r1
 800b476:	d007      	beq.n	800b488 <__pow5mult+0x20>
 800b478:	4c25      	ldr	r4, [pc, #148]	@ (800b510 <__pow5mult+0xa8>)
 800b47a:	3a01      	subs	r2, #1
 800b47c:	2300      	movs	r3, #0
 800b47e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b482:	f7ff fe55 	bl	800b130 <__multadd>
 800b486:	4606      	mov	r6, r0
 800b488:	10ad      	asrs	r5, r5, #2
 800b48a:	d03d      	beq.n	800b508 <__pow5mult+0xa0>
 800b48c:	69fc      	ldr	r4, [r7, #28]
 800b48e:	b97c      	cbnz	r4, 800b4b0 <__pow5mult+0x48>
 800b490:	2010      	movs	r0, #16
 800b492:	f000 fcff 	bl	800be94 <malloc>
 800b496:	4602      	mov	r2, r0
 800b498:	61f8      	str	r0, [r7, #28]
 800b49a:	b928      	cbnz	r0, 800b4a8 <__pow5mult+0x40>
 800b49c:	4b1d      	ldr	r3, [pc, #116]	@ (800b514 <__pow5mult+0xac>)
 800b49e:	481e      	ldr	r0, [pc, #120]	@ (800b518 <__pow5mult+0xb0>)
 800b4a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b4a4:	f7fd fe5e 	bl	8009164 <__assert_func>
 800b4a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4ac:	6004      	str	r4, [r0, #0]
 800b4ae:	60c4      	str	r4, [r0, #12]
 800b4b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b4b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4b8:	b94c      	cbnz	r4, 800b4ce <__pow5mult+0x66>
 800b4ba:	f240 2171 	movw	r1, #625	@ 0x271
 800b4be:	4638      	mov	r0, r7
 800b4c0:	f7ff ff12 	bl	800b2e8 <__i2b>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	6003      	str	r3, [r0, #0]
 800b4ce:	f04f 0900 	mov.w	r9, #0
 800b4d2:	07eb      	lsls	r3, r5, #31
 800b4d4:	d50a      	bpl.n	800b4ec <__pow5mult+0x84>
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	4622      	mov	r2, r4
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f7ff ff1a 	bl	800b314 <__multiply>
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4680      	mov	r8, r0
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	f7ff fe01 	bl	800b0ec <_Bfree>
 800b4ea:	4646      	mov	r6, r8
 800b4ec:	106d      	asrs	r5, r5, #1
 800b4ee:	d00b      	beq.n	800b508 <__pow5mult+0xa0>
 800b4f0:	6820      	ldr	r0, [r4, #0]
 800b4f2:	b938      	cbnz	r0, 800b504 <__pow5mult+0x9c>
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	f7ff ff0b 	bl	800b314 <__multiply>
 800b4fe:	6020      	str	r0, [r4, #0]
 800b500:	f8c0 9000 	str.w	r9, [r0]
 800b504:	4604      	mov	r4, r0
 800b506:	e7e4      	b.n	800b4d2 <__pow5mult+0x6a>
 800b508:	4630      	mov	r0, r6
 800b50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b50e:	bf00      	nop
 800b510:	0800c2b0 	.word	0x0800c2b0
 800b514:	0800c23d 	.word	0x0800c23d
 800b518:	0800c254 	.word	0x0800c254

0800b51c <__lshift>:
 800b51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b520:	460c      	mov	r4, r1
 800b522:	6849      	ldr	r1, [r1, #4]
 800b524:	6923      	ldr	r3, [r4, #16]
 800b526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b52a:	68a3      	ldr	r3, [r4, #8]
 800b52c:	4607      	mov	r7, r0
 800b52e:	4691      	mov	r9, r2
 800b530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b534:	f108 0601 	add.w	r6, r8, #1
 800b538:	42b3      	cmp	r3, r6
 800b53a:	db0b      	blt.n	800b554 <__lshift+0x38>
 800b53c:	4638      	mov	r0, r7
 800b53e:	f7ff fd95 	bl	800b06c <_Balloc>
 800b542:	4605      	mov	r5, r0
 800b544:	b948      	cbnz	r0, 800b55a <__lshift+0x3e>
 800b546:	4602      	mov	r2, r0
 800b548:	4b28      	ldr	r3, [pc, #160]	@ (800b5ec <__lshift+0xd0>)
 800b54a:	4829      	ldr	r0, [pc, #164]	@ (800b5f0 <__lshift+0xd4>)
 800b54c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b550:	f7fd fe08 	bl	8009164 <__assert_func>
 800b554:	3101      	adds	r1, #1
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	e7ee      	b.n	800b538 <__lshift+0x1c>
 800b55a:	2300      	movs	r3, #0
 800b55c:	f100 0114 	add.w	r1, r0, #20
 800b560:	f100 0210 	add.w	r2, r0, #16
 800b564:	4618      	mov	r0, r3
 800b566:	4553      	cmp	r3, sl
 800b568:	db33      	blt.n	800b5d2 <__lshift+0xb6>
 800b56a:	6920      	ldr	r0, [r4, #16]
 800b56c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b570:	f104 0314 	add.w	r3, r4, #20
 800b574:	f019 091f 	ands.w	r9, r9, #31
 800b578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b57c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b580:	d02b      	beq.n	800b5da <__lshift+0xbe>
 800b582:	f1c9 0e20 	rsb	lr, r9, #32
 800b586:	468a      	mov	sl, r1
 800b588:	2200      	movs	r2, #0
 800b58a:	6818      	ldr	r0, [r3, #0]
 800b58c:	fa00 f009 	lsl.w	r0, r0, r9
 800b590:	4310      	orrs	r0, r2
 800b592:	f84a 0b04 	str.w	r0, [sl], #4
 800b596:	f853 2b04 	ldr.w	r2, [r3], #4
 800b59a:	459c      	cmp	ip, r3
 800b59c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5a0:	d8f3      	bhi.n	800b58a <__lshift+0x6e>
 800b5a2:	ebac 0304 	sub.w	r3, ip, r4
 800b5a6:	3b15      	subs	r3, #21
 800b5a8:	f023 0303 	bic.w	r3, r3, #3
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	f104 0015 	add.w	r0, r4, #21
 800b5b2:	4584      	cmp	ip, r0
 800b5b4:	bf38      	it	cc
 800b5b6:	2304      	movcc	r3, #4
 800b5b8:	50ca      	str	r2, [r1, r3]
 800b5ba:	b10a      	cbz	r2, 800b5c0 <__lshift+0xa4>
 800b5bc:	f108 0602 	add.w	r6, r8, #2
 800b5c0:	3e01      	subs	r6, #1
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	612e      	str	r6, [r5, #16]
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	f7ff fd90 	bl	800b0ec <_Bfree>
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	e7c5      	b.n	800b566 <__lshift+0x4a>
 800b5da:	3904      	subs	r1, #4
 800b5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5e4:	459c      	cmp	ip, r3
 800b5e6:	d8f9      	bhi.n	800b5dc <__lshift+0xc0>
 800b5e8:	e7ea      	b.n	800b5c0 <__lshift+0xa4>
 800b5ea:	bf00      	nop
 800b5ec:	0800c199 	.word	0x0800c199
 800b5f0:	0800c254 	.word	0x0800c254

0800b5f4 <__mcmp>:
 800b5f4:	690a      	ldr	r2, [r1, #16]
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	6900      	ldr	r0, [r0, #16]
 800b5fa:	1a80      	subs	r0, r0, r2
 800b5fc:	b530      	push	{r4, r5, lr}
 800b5fe:	d10e      	bne.n	800b61e <__mcmp+0x2a>
 800b600:	3314      	adds	r3, #20
 800b602:	3114      	adds	r1, #20
 800b604:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b608:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b60c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b614:	4295      	cmp	r5, r2
 800b616:	d003      	beq.n	800b620 <__mcmp+0x2c>
 800b618:	d205      	bcs.n	800b626 <__mcmp+0x32>
 800b61a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b61e:	bd30      	pop	{r4, r5, pc}
 800b620:	42a3      	cmp	r3, r4
 800b622:	d3f3      	bcc.n	800b60c <__mcmp+0x18>
 800b624:	e7fb      	b.n	800b61e <__mcmp+0x2a>
 800b626:	2001      	movs	r0, #1
 800b628:	e7f9      	b.n	800b61e <__mcmp+0x2a>
	...

0800b62c <__mdiff>:
 800b62c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b630:	4689      	mov	r9, r1
 800b632:	4606      	mov	r6, r0
 800b634:	4611      	mov	r1, r2
 800b636:	4648      	mov	r0, r9
 800b638:	4614      	mov	r4, r2
 800b63a:	f7ff ffdb 	bl	800b5f4 <__mcmp>
 800b63e:	1e05      	subs	r5, r0, #0
 800b640:	d112      	bne.n	800b668 <__mdiff+0x3c>
 800b642:	4629      	mov	r1, r5
 800b644:	4630      	mov	r0, r6
 800b646:	f7ff fd11 	bl	800b06c <_Balloc>
 800b64a:	4602      	mov	r2, r0
 800b64c:	b928      	cbnz	r0, 800b65a <__mdiff+0x2e>
 800b64e:	4b3f      	ldr	r3, [pc, #252]	@ (800b74c <__mdiff+0x120>)
 800b650:	f240 2137 	movw	r1, #567	@ 0x237
 800b654:	483e      	ldr	r0, [pc, #248]	@ (800b750 <__mdiff+0x124>)
 800b656:	f7fd fd85 	bl	8009164 <__assert_func>
 800b65a:	2301      	movs	r3, #1
 800b65c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b660:	4610      	mov	r0, r2
 800b662:	b003      	add	sp, #12
 800b664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b668:	bfbc      	itt	lt
 800b66a:	464b      	movlt	r3, r9
 800b66c:	46a1      	movlt	r9, r4
 800b66e:	4630      	mov	r0, r6
 800b670:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b674:	bfba      	itte	lt
 800b676:	461c      	movlt	r4, r3
 800b678:	2501      	movlt	r5, #1
 800b67a:	2500      	movge	r5, #0
 800b67c:	f7ff fcf6 	bl	800b06c <_Balloc>
 800b680:	4602      	mov	r2, r0
 800b682:	b918      	cbnz	r0, 800b68c <__mdiff+0x60>
 800b684:	4b31      	ldr	r3, [pc, #196]	@ (800b74c <__mdiff+0x120>)
 800b686:	f240 2145 	movw	r1, #581	@ 0x245
 800b68a:	e7e3      	b.n	800b654 <__mdiff+0x28>
 800b68c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b690:	6926      	ldr	r6, [r4, #16]
 800b692:	60c5      	str	r5, [r0, #12]
 800b694:	f109 0310 	add.w	r3, r9, #16
 800b698:	f109 0514 	add.w	r5, r9, #20
 800b69c:	f104 0e14 	add.w	lr, r4, #20
 800b6a0:	f100 0b14 	add.w	fp, r0, #20
 800b6a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b6a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b6ac:	9301      	str	r3, [sp, #4]
 800b6ae:	46d9      	mov	r9, fp
 800b6b0:	f04f 0c00 	mov.w	ip, #0
 800b6b4:	9b01      	ldr	r3, [sp, #4]
 800b6b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b6ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	fa1f f38a 	uxth.w	r3, sl
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	b283      	uxth	r3, r0
 800b6c8:	1acb      	subs	r3, r1, r3
 800b6ca:	0c00      	lsrs	r0, r0, #16
 800b6cc:	4463      	add	r3, ip
 800b6ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b6d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b6dc:	4576      	cmp	r6, lr
 800b6de:	f849 3b04 	str.w	r3, [r9], #4
 800b6e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b6e6:	d8e5      	bhi.n	800b6b4 <__mdiff+0x88>
 800b6e8:	1b33      	subs	r3, r6, r4
 800b6ea:	3b15      	subs	r3, #21
 800b6ec:	f023 0303 	bic.w	r3, r3, #3
 800b6f0:	3415      	adds	r4, #21
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	42a6      	cmp	r6, r4
 800b6f6:	bf38      	it	cc
 800b6f8:	2304      	movcc	r3, #4
 800b6fa:	441d      	add	r5, r3
 800b6fc:	445b      	add	r3, fp
 800b6fe:	461e      	mov	r6, r3
 800b700:	462c      	mov	r4, r5
 800b702:	4544      	cmp	r4, r8
 800b704:	d30e      	bcc.n	800b724 <__mdiff+0xf8>
 800b706:	f108 0103 	add.w	r1, r8, #3
 800b70a:	1b49      	subs	r1, r1, r5
 800b70c:	f021 0103 	bic.w	r1, r1, #3
 800b710:	3d03      	subs	r5, #3
 800b712:	45a8      	cmp	r8, r5
 800b714:	bf38      	it	cc
 800b716:	2100      	movcc	r1, #0
 800b718:	440b      	add	r3, r1
 800b71a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b71e:	b191      	cbz	r1, 800b746 <__mdiff+0x11a>
 800b720:	6117      	str	r7, [r2, #16]
 800b722:	e79d      	b.n	800b660 <__mdiff+0x34>
 800b724:	f854 1b04 	ldr.w	r1, [r4], #4
 800b728:	46e6      	mov	lr, ip
 800b72a:	0c08      	lsrs	r0, r1, #16
 800b72c:	fa1c fc81 	uxtah	ip, ip, r1
 800b730:	4471      	add	r1, lr
 800b732:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b736:	b289      	uxth	r1, r1
 800b738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b73c:	f846 1b04 	str.w	r1, [r6], #4
 800b740:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b744:	e7dd      	b.n	800b702 <__mdiff+0xd6>
 800b746:	3f01      	subs	r7, #1
 800b748:	e7e7      	b.n	800b71a <__mdiff+0xee>
 800b74a:	bf00      	nop
 800b74c:	0800c199 	.word	0x0800c199
 800b750:	0800c254 	.word	0x0800c254

0800b754 <__ulp>:
 800b754:	b082      	sub	sp, #8
 800b756:	ed8d 0b00 	vstr	d0, [sp]
 800b75a:	9a01      	ldr	r2, [sp, #4]
 800b75c:	4b0f      	ldr	r3, [pc, #60]	@ (800b79c <__ulp+0x48>)
 800b75e:	4013      	ands	r3, r2
 800b760:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b764:	2b00      	cmp	r3, #0
 800b766:	dc08      	bgt.n	800b77a <__ulp+0x26>
 800b768:	425b      	negs	r3, r3
 800b76a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b76e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b772:	da04      	bge.n	800b77e <__ulp+0x2a>
 800b774:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b778:	4113      	asrs	r3, r2
 800b77a:	2200      	movs	r2, #0
 800b77c:	e008      	b.n	800b790 <__ulp+0x3c>
 800b77e:	f1a2 0314 	sub.w	r3, r2, #20
 800b782:	2b1e      	cmp	r3, #30
 800b784:	bfda      	itte	le
 800b786:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b78a:	40da      	lsrle	r2, r3
 800b78c:	2201      	movgt	r2, #1
 800b78e:	2300      	movs	r3, #0
 800b790:	4619      	mov	r1, r3
 800b792:	4610      	mov	r0, r2
 800b794:	ec41 0b10 	vmov	d0, r0, r1
 800b798:	b002      	add	sp, #8
 800b79a:	4770      	bx	lr
 800b79c:	7ff00000 	.word	0x7ff00000

0800b7a0 <__b2d>:
 800b7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a4:	6906      	ldr	r6, [r0, #16]
 800b7a6:	f100 0814 	add.w	r8, r0, #20
 800b7aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b7ae:	1f37      	subs	r7, r6, #4
 800b7b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	f7ff fd4b 	bl	800b250 <__hi0bits>
 800b7ba:	f1c0 0320 	rsb	r3, r0, #32
 800b7be:	280a      	cmp	r0, #10
 800b7c0:	600b      	str	r3, [r1, #0]
 800b7c2:	491b      	ldr	r1, [pc, #108]	@ (800b830 <__b2d+0x90>)
 800b7c4:	dc15      	bgt.n	800b7f2 <__b2d+0x52>
 800b7c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b7ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800b7ce:	45b8      	cmp	r8, r7
 800b7d0:	ea43 0501 	orr.w	r5, r3, r1
 800b7d4:	bf34      	ite	cc
 800b7d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b7da:	2300      	movcs	r3, #0
 800b7dc:	3015      	adds	r0, #21
 800b7de:	fa02 f000 	lsl.w	r0, r2, r0
 800b7e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800b7e6:	4303      	orrs	r3, r0
 800b7e8:	461c      	mov	r4, r3
 800b7ea:	ec45 4b10 	vmov	d0, r4, r5
 800b7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f2:	45b8      	cmp	r8, r7
 800b7f4:	bf3a      	itte	cc
 800b7f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b7fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800b7fe:	2300      	movcs	r3, #0
 800b800:	380b      	subs	r0, #11
 800b802:	d012      	beq.n	800b82a <__b2d+0x8a>
 800b804:	f1c0 0120 	rsb	r1, r0, #32
 800b808:	fa23 f401 	lsr.w	r4, r3, r1
 800b80c:	4082      	lsls	r2, r0
 800b80e:	4322      	orrs	r2, r4
 800b810:	4547      	cmp	r7, r8
 800b812:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b816:	bf8c      	ite	hi
 800b818:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b81c:	2200      	movls	r2, #0
 800b81e:	4083      	lsls	r3, r0
 800b820:	40ca      	lsrs	r2, r1
 800b822:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b826:	4313      	orrs	r3, r2
 800b828:	e7de      	b.n	800b7e8 <__b2d+0x48>
 800b82a:	ea42 0501 	orr.w	r5, r2, r1
 800b82e:	e7db      	b.n	800b7e8 <__b2d+0x48>
 800b830:	3ff00000 	.word	0x3ff00000

0800b834 <__d2b>:
 800b834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b838:	460f      	mov	r7, r1
 800b83a:	2101      	movs	r1, #1
 800b83c:	ec59 8b10 	vmov	r8, r9, d0
 800b840:	4616      	mov	r6, r2
 800b842:	f7ff fc13 	bl	800b06c <_Balloc>
 800b846:	4604      	mov	r4, r0
 800b848:	b930      	cbnz	r0, 800b858 <__d2b+0x24>
 800b84a:	4602      	mov	r2, r0
 800b84c:	4b23      	ldr	r3, [pc, #140]	@ (800b8dc <__d2b+0xa8>)
 800b84e:	4824      	ldr	r0, [pc, #144]	@ (800b8e0 <__d2b+0xac>)
 800b850:	f240 310f 	movw	r1, #783	@ 0x30f
 800b854:	f7fd fc86 	bl	8009164 <__assert_func>
 800b858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b85c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b860:	b10d      	cbz	r5, 800b866 <__d2b+0x32>
 800b862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b866:	9301      	str	r3, [sp, #4]
 800b868:	f1b8 0300 	subs.w	r3, r8, #0
 800b86c:	d023      	beq.n	800b8b6 <__d2b+0x82>
 800b86e:	4668      	mov	r0, sp
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	f7ff fd0c 	bl	800b28e <__lo0bits>
 800b876:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b87a:	b1d0      	cbz	r0, 800b8b2 <__d2b+0x7e>
 800b87c:	f1c0 0320 	rsb	r3, r0, #32
 800b880:	fa02 f303 	lsl.w	r3, r2, r3
 800b884:	430b      	orrs	r3, r1
 800b886:	40c2      	lsrs	r2, r0
 800b888:	6163      	str	r3, [r4, #20]
 800b88a:	9201      	str	r2, [sp, #4]
 800b88c:	9b01      	ldr	r3, [sp, #4]
 800b88e:	61a3      	str	r3, [r4, #24]
 800b890:	2b00      	cmp	r3, #0
 800b892:	bf0c      	ite	eq
 800b894:	2201      	moveq	r2, #1
 800b896:	2202      	movne	r2, #2
 800b898:	6122      	str	r2, [r4, #16]
 800b89a:	b1a5      	cbz	r5, 800b8c6 <__d2b+0x92>
 800b89c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b8a0:	4405      	add	r5, r0
 800b8a2:	603d      	str	r5, [r7, #0]
 800b8a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b8a8:	6030      	str	r0, [r6, #0]
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	b003      	add	sp, #12
 800b8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8b2:	6161      	str	r1, [r4, #20]
 800b8b4:	e7ea      	b.n	800b88c <__d2b+0x58>
 800b8b6:	a801      	add	r0, sp, #4
 800b8b8:	f7ff fce9 	bl	800b28e <__lo0bits>
 800b8bc:	9b01      	ldr	r3, [sp, #4]
 800b8be:	6163      	str	r3, [r4, #20]
 800b8c0:	3020      	adds	r0, #32
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	e7e8      	b.n	800b898 <__d2b+0x64>
 800b8c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b8ce:	6038      	str	r0, [r7, #0]
 800b8d0:	6918      	ldr	r0, [r3, #16]
 800b8d2:	f7ff fcbd 	bl	800b250 <__hi0bits>
 800b8d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8da:	e7e5      	b.n	800b8a8 <__d2b+0x74>
 800b8dc:	0800c199 	.word	0x0800c199
 800b8e0:	0800c254 	.word	0x0800c254

0800b8e4 <__ratio>:
 800b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	e9cd 1000 	strd	r1, r0, [sp]
 800b8ee:	a902      	add	r1, sp, #8
 800b8f0:	f7ff ff56 	bl	800b7a0 <__b2d>
 800b8f4:	9800      	ldr	r0, [sp, #0]
 800b8f6:	a903      	add	r1, sp, #12
 800b8f8:	ec55 4b10 	vmov	r4, r5, d0
 800b8fc:	f7ff ff50 	bl	800b7a0 <__b2d>
 800b900:	9b01      	ldr	r3, [sp, #4]
 800b902:	6919      	ldr	r1, [r3, #16]
 800b904:	9b00      	ldr	r3, [sp, #0]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	1ac9      	subs	r1, r1, r3
 800b90a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b90e:	1a9b      	subs	r3, r3, r2
 800b910:	ec5b ab10 	vmov	sl, fp, d0
 800b914:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b918:	2b00      	cmp	r3, #0
 800b91a:	bfce      	itee	gt
 800b91c:	462a      	movgt	r2, r5
 800b91e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b922:	465a      	movle	r2, fp
 800b924:	462f      	mov	r7, r5
 800b926:	46d9      	mov	r9, fp
 800b928:	bfcc      	ite	gt
 800b92a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b92e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b932:	464b      	mov	r3, r9
 800b934:	4652      	mov	r2, sl
 800b936:	4620      	mov	r0, r4
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 ff7f 	bl	800083c <__aeabi_ddiv>
 800b93e:	ec41 0b10 	vmov	d0, r0, r1
 800b942:	b005      	add	sp, #20
 800b944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b948 <__copybits>:
 800b948:	3901      	subs	r1, #1
 800b94a:	b570      	push	{r4, r5, r6, lr}
 800b94c:	1149      	asrs	r1, r1, #5
 800b94e:	6914      	ldr	r4, [r2, #16]
 800b950:	3101      	adds	r1, #1
 800b952:	f102 0314 	add.w	r3, r2, #20
 800b956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b95a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b95e:	1f05      	subs	r5, r0, #4
 800b960:	42a3      	cmp	r3, r4
 800b962:	d30c      	bcc.n	800b97e <__copybits+0x36>
 800b964:	1aa3      	subs	r3, r4, r2
 800b966:	3b11      	subs	r3, #17
 800b968:	f023 0303 	bic.w	r3, r3, #3
 800b96c:	3211      	adds	r2, #17
 800b96e:	42a2      	cmp	r2, r4
 800b970:	bf88      	it	hi
 800b972:	2300      	movhi	r3, #0
 800b974:	4418      	add	r0, r3
 800b976:	2300      	movs	r3, #0
 800b978:	4288      	cmp	r0, r1
 800b97a:	d305      	bcc.n	800b988 <__copybits+0x40>
 800b97c:	bd70      	pop	{r4, r5, r6, pc}
 800b97e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b982:	f845 6f04 	str.w	r6, [r5, #4]!
 800b986:	e7eb      	b.n	800b960 <__copybits+0x18>
 800b988:	f840 3b04 	str.w	r3, [r0], #4
 800b98c:	e7f4      	b.n	800b978 <__copybits+0x30>

0800b98e <__any_on>:
 800b98e:	f100 0214 	add.w	r2, r0, #20
 800b992:	6900      	ldr	r0, [r0, #16]
 800b994:	114b      	asrs	r3, r1, #5
 800b996:	4298      	cmp	r0, r3
 800b998:	b510      	push	{r4, lr}
 800b99a:	db11      	blt.n	800b9c0 <__any_on+0x32>
 800b99c:	dd0a      	ble.n	800b9b4 <__any_on+0x26>
 800b99e:	f011 011f 	ands.w	r1, r1, #31
 800b9a2:	d007      	beq.n	800b9b4 <__any_on+0x26>
 800b9a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9a8:	fa24 f001 	lsr.w	r0, r4, r1
 800b9ac:	fa00 f101 	lsl.w	r1, r0, r1
 800b9b0:	428c      	cmp	r4, r1
 800b9b2:	d10b      	bne.n	800b9cc <__any_on+0x3e>
 800b9b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d803      	bhi.n	800b9c4 <__any_on+0x36>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	bd10      	pop	{r4, pc}
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	e7f7      	b.n	800b9b4 <__any_on+0x26>
 800b9c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	d0f5      	beq.n	800b9b8 <__any_on+0x2a>
 800b9cc:	2001      	movs	r0, #1
 800b9ce:	e7f6      	b.n	800b9be <__any_on+0x30>

0800b9d0 <__sread>:
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d8:	f000 f9b6 	bl	800bd48 <_read_r>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	bfab      	itete	ge
 800b9e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9e4:	181b      	addge	r3, r3, r0
 800b9e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9ea:	bfac      	ite	ge
 800b9ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9ee:	81a3      	strhlt	r3, [r4, #12]
 800b9f0:	bd10      	pop	{r4, pc}

0800b9f2 <__swrite>:
 800b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	461f      	mov	r7, r3
 800b9f8:	898b      	ldrh	r3, [r1, #12]
 800b9fa:	05db      	lsls	r3, r3, #23
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	4616      	mov	r6, r2
 800ba02:	d505      	bpl.n	800ba10 <__swrite+0x1e>
 800ba04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba08:	2302      	movs	r3, #2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f000 f95a 	bl	800bcc4 <_lseek_r>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	463b      	mov	r3, r7
 800ba20:	4628      	mov	r0, r5
 800ba22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba26:	f000 b9c5 	b.w	800bdb4 <_write_r>

0800ba2a <__sseek>:
 800ba2a:	b510      	push	{r4, lr}
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba32:	f000 f947 	bl	800bcc4 <_lseek_r>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	bf15      	itete	ne
 800ba3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba46:	81a3      	strheq	r3, [r4, #12]
 800ba48:	bf18      	it	ne
 800ba4a:	81a3      	strhne	r3, [r4, #12]
 800ba4c:	bd10      	pop	{r4, pc}

0800ba4e <__sclose>:
 800ba4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba52:	f000 b905 	b.w	800bc60 <_close_r>

0800ba56 <__swbuf_r>:
 800ba56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba58:	460e      	mov	r6, r1
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	b118      	cbz	r0, 800ba68 <__swbuf_r+0x12>
 800ba60:	6a03      	ldr	r3, [r0, #32]
 800ba62:	b90b      	cbnz	r3, 800ba68 <__swbuf_r+0x12>
 800ba64:	f7fd fc30 	bl	80092c8 <__sinit>
 800ba68:	69a3      	ldr	r3, [r4, #24]
 800ba6a:	60a3      	str	r3, [r4, #8]
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	071a      	lsls	r2, r3, #28
 800ba70:	d501      	bpl.n	800ba76 <__swbuf_r+0x20>
 800ba72:	6923      	ldr	r3, [r4, #16]
 800ba74:	b943      	cbnz	r3, 800ba88 <__swbuf_r+0x32>
 800ba76:	4621      	mov	r1, r4
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f000 f82b 	bl	800bad4 <__swsetup_r>
 800ba7e:	b118      	cbz	r0, 800ba88 <__swbuf_r+0x32>
 800ba80:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ba84:	4638      	mov	r0, r7
 800ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	6922      	ldr	r2, [r4, #16]
 800ba8c:	1a98      	subs	r0, r3, r2
 800ba8e:	6963      	ldr	r3, [r4, #20]
 800ba90:	b2f6      	uxtb	r6, r6
 800ba92:	4283      	cmp	r3, r0
 800ba94:	4637      	mov	r7, r6
 800ba96:	dc05      	bgt.n	800baa4 <__swbuf_r+0x4e>
 800ba98:	4621      	mov	r1, r4
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f7ff fab2 	bl	800b004 <_fflush_r>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d1ed      	bne.n	800ba80 <__swbuf_r+0x2a>
 800baa4:	68a3      	ldr	r3, [r4, #8]
 800baa6:	3b01      	subs	r3, #1
 800baa8:	60a3      	str	r3, [r4, #8]
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	6022      	str	r2, [r4, #0]
 800bab0:	701e      	strb	r6, [r3, #0]
 800bab2:	6962      	ldr	r2, [r4, #20]
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d004      	beq.n	800bac4 <__swbuf_r+0x6e>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	07db      	lsls	r3, r3, #31
 800babe:	d5e1      	bpl.n	800ba84 <__swbuf_r+0x2e>
 800bac0:	2e0a      	cmp	r6, #10
 800bac2:	d1df      	bne.n	800ba84 <__swbuf_r+0x2e>
 800bac4:	4621      	mov	r1, r4
 800bac6:	4628      	mov	r0, r5
 800bac8:	f7ff fa9c 	bl	800b004 <_fflush_r>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d0d9      	beq.n	800ba84 <__swbuf_r+0x2e>
 800bad0:	e7d6      	b.n	800ba80 <__swbuf_r+0x2a>
	...

0800bad4 <__swsetup_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4b29      	ldr	r3, [pc, #164]	@ (800bb7c <__swsetup_r+0xa8>)
 800bad8:	4605      	mov	r5, r0
 800bada:	6818      	ldr	r0, [r3, #0]
 800badc:	460c      	mov	r4, r1
 800bade:	b118      	cbz	r0, 800bae8 <__swsetup_r+0x14>
 800bae0:	6a03      	ldr	r3, [r0, #32]
 800bae2:	b90b      	cbnz	r3, 800bae8 <__swsetup_r+0x14>
 800bae4:	f7fd fbf0 	bl	80092c8 <__sinit>
 800bae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baec:	0719      	lsls	r1, r3, #28
 800baee:	d422      	bmi.n	800bb36 <__swsetup_r+0x62>
 800baf0:	06da      	lsls	r2, r3, #27
 800baf2:	d407      	bmi.n	800bb04 <__swsetup_r+0x30>
 800baf4:	2209      	movs	r2, #9
 800baf6:	602a      	str	r2, [r5, #0]
 800baf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bafc:	81a3      	strh	r3, [r4, #12]
 800bafe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb02:	e033      	b.n	800bb6c <__swsetup_r+0x98>
 800bb04:	0758      	lsls	r0, r3, #29
 800bb06:	d512      	bpl.n	800bb2e <__swsetup_r+0x5a>
 800bb08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb0a:	b141      	cbz	r1, 800bb1e <__swsetup_r+0x4a>
 800bb0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb10:	4299      	cmp	r1, r3
 800bb12:	d002      	beq.n	800bb1a <__swsetup_r+0x46>
 800bb14:	4628      	mov	r0, r5
 800bb16:	f000 f973 	bl	800be00 <_free_r>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb24:	81a3      	strh	r3, [r4, #12]
 800bb26:	2300      	movs	r3, #0
 800bb28:	6063      	str	r3, [r4, #4]
 800bb2a:	6923      	ldr	r3, [r4, #16]
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	f043 0308 	orr.w	r3, r3, #8
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	6923      	ldr	r3, [r4, #16]
 800bb38:	b94b      	cbnz	r3, 800bb4e <__swsetup_r+0x7a>
 800bb3a:	89a3      	ldrh	r3, [r4, #12]
 800bb3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb44:	d003      	beq.n	800bb4e <__swsetup_r+0x7a>
 800bb46:	4621      	mov	r1, r4
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f000 f84c 	bl	800bbe6 <__smakebuf_r>
 800bb4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb52:	f013 0201 	ands.w	r2, r3, #1
 800bb56:	d00a      	beq.n	800bb6e <__swsetup_r+0x9a>
 800bb58:	2200      	movs	r2, #0
 800bb5a:	60a2      	str	r2, [r4, #8]
 800bb5c:	6962      	ldr	r2, [r4, #20]
 800bb5e:	4252      	negs	r2, r2
 800bb60:	61a2      	str	r2, [r4, #24]
 800bb62:	6922      	ldr	r2, [r4, #16]
 800bb64:	b942      	cbnz	r2, 800bb78 <__swsetup_r+0xa4>
 800bb66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb6a:	d1c5      	bne.n	800baf8 <__swsetup_r+0x24>
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
 800bb6e:	0799      	lsls	r1, r3, #30
 800bb70:	bf58      	it	pl
 800bb72:	6962      	ldrpl	r2, [r4, #20]
 800bb74:	60a2      	str	r2, [r4, #8]
 800bb76:	e7f4      	b.n	800bb62 <__swsetup_r+0x8e>
 800bb78:	2000      	movs	r0, #0
 800bb7a:	e7f7      	b.n	800bb6c <__swsetup_r+0x98>
 800bb7c:	2000018c 	.word	0x2000018c

0800bb80 <__ascii_wctomb>:
 800bb80:	4603      	mov	r3, r0
 800bb82:	4608      	mov	r0, r1
 800bb84:	b141      	cbz	r1, 800bb98 <__ascii_wctomb+0x18>
 800bb86:	2aff      	cmp	r2, #255	@ 0xff
 800bb88:	d904      	bls.n	800bb94 <__ascii_wctomb+0x14>
 800bb8a:	228a      	movs	r2, #138	@ 0x8a
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb92:	4770      	bx	lr
 800bb94:	700a      	strb	r2, [r1, #0]
 800bb96:	2001      	movs	r0, #1
 800bb98:	4770      	bx	lr

0800bb9a <__swhatbuf_r>:
 800bb9a:	b570      	push	{r4, r5, r6, lr}
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba2:	2900      	cmp	r1, #0
 800bba4:	b096      	sub	sp, #88	@ 0x58
 800bba6:	4615      	mov	r5, r2
 800bba8:	461e      	mov	r6, r3
 800bbaa:	da0d      	bge.n	800bbc8 <__swhatbuf_r+0x2e>
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bbb2:	f04f 0100 	mov.w	r1, #0
 800bbb6:	bf14      	ite	ne
 800bbb8:	2340      	movne	r3, #64	@ 0x40
 800bbba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	6031      	str	r1, [r6, #0]
 800bbc2:	602b      	str	r3, [r5, #0]
 800bbc4:	b016      	add	sp, #88	@ 0x58
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}
 800bbc8:	466a      	mov	r2, sp
 800bbca:	f000 f859 	bl	800bc80 <_fstat_r>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	dbec      	blt.n	800bbac <__swhatbuf_r+0x12>
 800bbd2:	9901      	ldr	r1, [sp, #4]
 800bbd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bbd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bbdc:	4259      	negs	r1, r3
 800bbde:	4159      	adcs	r1, r3
 800bbe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbe4:	e7eb      	b.n	800bbbe <__swhatbuf_r+0x24>

0800bbe6 <__smakebuf_r>:
 800bbe6:	898b      	ldrh	r3, [r1, #12]
 800bbe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbea:	079d      	lsls	r5, r3, #30
 800bbec:	4606      	mov	r6, r0
 800bbee:	460c      	mov	r4, r1
 800bbf0:	d507      	bpl.n	800bc02 <__smakebuf_r+0x1c>
 800bbf2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bbf6:	6023      	str	r3, [r4, #0]
 800bbf8:	6123      	str	r3, [r4, #16]
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	6163      	str	r3, [r4, #20]
 800bbfe:	b003      	add	sp, #12
 800bc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc02:	ab01      	add	r3, sp, #4
 800bc04:	466a      	mov	r2, sp
 800bc06:	f7ff ffc8 	bl	800bb9a <__swhatbuf_r>
 800bc0a:	9f00      	ldr	r7, [sp, #0]
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	4639      	mov	r1, r7
 800bc10:	4630      	mov	r0, r6
 800bc12:	f7fe ff53 	bl	800aabc <_malloc_r>
 800bc16:	b948      	cbnz	r0, 800bc2c <__smakebuf_r+0x46>
 800bc18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc1c:	059a      	lsls	r2, r3, #22
 800bc1e:	d4ee      	bmi.n	800bbfe <__smakebuf_r+0x18>
 800bc20:	f023 0303 	bic.w	r3, r3, #3
 800bc24:	f043 0302 	orr.w	r3, r3, #2
 800bc28:	81a3      	strh	r3, [r4, #12]
 800bc2a:	e7e2      	b.n	800bbf2 <__smakebuf_r+0xc>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	6020      	str	r0, [r4, #0]
 800bc30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	9b01      	ldr	r3, [sp, #4]
 800bc38:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc3c:	b15b      	cbz	r3, 800bc56 <__smakebuf_r+0x70>
 800bc3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc42:	4630      	mov	r0, r6
 800bc44:	f000 f82e 	bl	800bca4 <_isatty_r>
 800bc48:	b128      	cbz	r0, 800bc56 <__smakebuf_r+0x70>
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	f023 0303 	bic.w	r3, r3, #3
 800bc50:	f043 0301 	orr.w	r3, r3, #1
 800bc54:	81a3      	strh	r3, [r4, #12]
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	431d      	orrs	r5, r3
 800bc5a:	81a5      	strh	r5, [r4, #12]
 800bc5c:	e7cf      	b.n	800bbfe <__smakebuf_r+0x18>
	...

0800bc60 <_close_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d06      	ldr	r5, [pc, #24]	@ (800bc7c <_close_r+0x1c>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	602b      	str	r3, [r5, #0]
 800bc6c:	f7f6 fe6a 	bl	8002944 <_close>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_close_r+0x1a>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_close_r+0x1a>
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	20009c84 	.word	0x20009c84

0800bc80 <_fstat_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d07      	ldr	r5, [pc, #28]	@ (800bca0 <_fstat_r+0x20>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	602b      	str	r3, [r5, #0]
 800bc8e:	f7f6 fe5d 	bl	800294c <_fstat>
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	d102      	bne.n	800bc9c <_fstat_r+0x1c>
 800bc96:	682b      	ldr	r3, [r5, #0]
 800bc98:	b103      	cbz	r3, 800bc9c <_fstat_r+0x1c>
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	bd38      	pop	{r3, r4, r5, pc}
 800bc9e:	bf00      	nop
 800bca0:	20009c84 	.word	0x20009c84

0800bca4 <_isatty_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d06      	ldr	r5, [pc, #24]	@ (800bcc0 <_isatty_r+0x1c>)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	4608      	mov	r0, r1
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	f7f6 fe52 	bl	8002958 <_isatty>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_isatty_r+0x1a>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_isatty_r+0x1a>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	20009c84 	.word	0x20009c84

0800bcc4 <_lseek_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	@ (800bce4 <_lseek_r+0x20>)
 800bcc8:	4604      	mov	r4, r0
 800bcca:	4608      	mov	r0, r1
 800bccc:	4611      	mov	r1, r2
 800bcce:	2200      	movs	r2, #0
 800bcd0:	602a      	str	r2, [r5, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f7f6 fe42 	bl	800295c <_lseek>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_lseek_r+0x1e>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_lseek_r+0x1e>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	20009c84 	.word	0x20009c84

0800bce8 <_raise_r>:
 800bce8:	291f      	cmp	r1, #31
 800bcea:	b538      	push	{r3, r4, r5, lr}
 800bcec:	4605      	mov	r5, r0
 800bcee:	460c      	mov	r4, r1
 800bcf0:	d904      	bls.n	800bcfc <_raise_r+0x14>
 800bcf2:	2316      	movs	r3, #22
 800bcf4:	6003      	str	r3, [r0, #0]
 800bcf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bcfe:	b112      	cbz	r2, 800bd06 <_raise_r+0x1e>
 800bd00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd04:	b94b      	cbnz	r3, 800bd1a <_raise_r+0x32>
 800bd06:	4628      	mov	r0, r5
 800bd08:	f000 f842 	bl	800bd90 <_getpid_r>
 800bd0c:	4622      	mov	r2, r4
 800bd0e:	4601      	mov	r1, r0
 800bd10:	4628      	mov	r0, r5
 800bd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd16:	f000 b829 	b.w	800bd6c <_kill_r>
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d00a      	beq.n	800bd34 <_raise_r+0x4c>
 800bd1e:	1c59      	adds	r1, r3, #1
 800bd20:	d103      	bne.n	800bd2a <_raise_r+0x42>
 800bd22:	2316      	movs	r3, #22
 800bd24:	6003      	str	r3, [r0, #0]
 800bd26:	2001      	movs	r0, #1
 800bd28:	e7e7      	b.n	800bcfa <_raise_r+0x12>
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd30:	4620      	mov	r0, r4
 800bd32:	4798      	blx	r3
 800bd34:	2000      	movs	r0, #0
 800bd36:	e7e0      	b.n	800bcfa <_raise_r+0x12>

0800bd38 <raise>:
 800bd38:	4b02      	ldr	r3, [pc, #8]	@ (800bd44 <raise+0xc>)
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	6818      	ldr	r0, [r3, #0]
 800bd3e:	f7ff bfd3 	b.w	800bce8 <_raise_r>
 800bd42:	bf00      	nop
 800bd44:	2000018c 	.word	0x2000018c

0800bd48 <_read_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	@ (800bd68 <_read_r+0x20>)
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	4608      	mov	r0, r1
 800bd50:	4611      	mov	r1, r2
 800bd52:	2200      	movs	r2, #0
 800bd54:	602a      	str	r2, [r5, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	f7f5 fffc 	bl	8001d54 <_read>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_read_r+0x1e>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_read_r+0x1e>
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	20009c84 	.word	0x20009c84

0800bd6c <_kill_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d07      	ldr	r5, [pc, #28]	@ (800bd8c <_kill_r+0x20>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	4611      	mov	r1, r2
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	f7f6 fdd5 	bl	8002928 <_kill>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	d102      	bne.n	800bd88 <_kill_r+0x1c>
 800bd82:	682b      	ldr	r3, [r5, #0]
 800bd84:	b103      	cbz	r3, 800bd88 <_kill_r+0x1c>
 800bd86:	6023      	str	r3, [r4, #0]
 800bd88:	bd38      	pop	{r3, r4, r5, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20009c84 	.word	0x20009c84

0800bd90 <_getpid_r>:
 800bd90:	f7f6 bdc8 	b.w	8002924 <_getpid>

0800bd94 <_sbrk_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4d06      	ldr	r5, [pc, #24]	@ (800bdb0 <_sbrk_r+0x1c>)
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	602b      	str	r3, [r5, #0]
 800bda0:	f7f6 fdde 	bl	8002960 <_sbrk>
 800bda4:	1c43      	adds	r3, r0, #1
 800bda6:	d102      	bne.n	800bdae <_sbrk_r+0x1a>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	b103      	cbz	r3, 800bdae <_sbrk_r+0x1a>
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	20009c84 	.word	0x20009c84

0800bdb4 <_write_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	@ (800bdd4 <_write_r+0x20>)
 800bdb8:	4604      	mov	r4, r0
 800bdba:	4608      	mov	r0, r1
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	602a      	str	r2, [r5, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f7f5 ffc8 	bl	8001d58 <_write>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_write_r+0x1e>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_write_r+0x1e>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	20009c84 	.word	0x20009c84

0800bdd8 <_calloc_r>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	fba1 5402 	umull	r5, r4, r1, r2
 800bdde:	b93c      	cbnz	r4, 800bdf0 <_calloc_r+0x18>
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7fe fe6b 	bl	800aabc <_malloc_r>
 800bde6:	4606      	mov	r6, r0
 800bde8:	b928      	cbnz	r0, 800bdf6 <_calloc_r+0x1e>
 800bdea:	2600      	movs	r6, #0
 800bdec:	4630      	mov	r0, r6
 800bdee:	bd70      	pop	{r4, r5, r6, pc}
 800bdf0:	220c      	movs	r2, #12
 800bdf2:	6002      	str	r2, [r0, #0]
 800bdf4:	e7f9      	b.n	800bdea <_calloc_r+0x12>
 800bdf6:	462a      	mov	r2, r5
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	f7fe f971 	bl	800a0e0 <memset>
 800bdfe:	e7f5      	b.n	800bdec <_calloc_r+0x14>

0800be00 <_free_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	4605      	mov	r5, r0
 800be04:	2900      	cmp	r1, #0
 800be06:	d041      	beq.n	800be8c <_free_r+0x8c>
 800be08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be0c:	1f0c      	subs	r4, r1, #4
 800be0e:	2b00      	cmp	r3, #0
 800be10:	bfb8      	it	lt
 800be12:	18e4      	addlt	r4, r4, r3
 800be14:	f7ff f91e 	bl	800b054 <__malloc_lock>
 800be18:	4a1d      	ldr	r2, [pc, #116]	@ (800be90 <_free_r+0x90>)
 800be1a:	6813      	ldr	r3, [r2, #0]
 800be1c:	b933      	cbnz	r3, 800be2c <_free_r+0x2c>
 800be1e:	6063      	str	r3, [r4, #4]
 800be20:	6014      	str	r4, [r2, #0]
 800be22:	4628      	mov	r0, r5
 800be24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be28:	f7ff b91a 	b.w	800b060 <__malloc_unlock>
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	d908      	bls.n	800be42 <_free_r+0x42>
 800be30:	6820      	ldr	r0, [r4, #0]
 800be32:	1821      	adds	r1, r4, r0
 800be34:	428b      	cmp	r3, r1
 800be36:	bf01      	itttt	eq
 800be38:	6819      	ldreq	r1, [r3, #0]
 800be3a:	685b      	ldreq	r3, [r3, #4]
 800be3c:	1809      	addeq	r1, r1, r0
 800be3e:	6021      	streq	r1, [r4, #0]
 800be40:	e7ed      	b.n	800be1e <_free_r+0x1e>
 800be42:	461a      	mov	r2, r3
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	b10b      	cbz	r3, 800be4c <_free_r+0x4c>
 800be48:	42a3      	cmp	r3, r4
 800be4a:	d9fa      	bls.n	800be42 <_free_r+0x42>
 800be4c:	6811      	ldr	r1, [r2, #0]
 800be4e:	1850      	adds	r0, r2, r1
 800be50:	42a0      	cmp	r0, r4
 800be52:	d10b      	bne.n	800be6c <_free_r+0x6c>
 800be54:	6820      	ldr	r0, [r4, #0]
 800be56:	4401      	add	r1, r0
 800be58:	1850      	adds	r0, r2, r1
 800be5a:	4283      	cmp	r3, r0
 800be5c:	6011      	str	r1, [r2, #0]
 800be5e:	d1e0      	bne.n	800be22 <_free_r+0x22>
 800be60:	6818      	ldr	r0, [r3, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	6053      	str	r3, [r2, #4]
 800be66:	4408      	add	r0, r1
 800be68:	6010      	str	r0, [r2, #0]
 800be6a:	e7da      	b.n	800be22 <_free_r+0x22>
 800be6c:	d902      	bls.n	800be74 <_free_r+0x74>
 800be6e:	230c      	movs	r3, #12
 800be70:	602b      	str	r3, [r5, #0]
 800be72:	e7d6      	b.n	800be22 <_free_r+0x22>
 800be74:	6820      	ldr	r0, [r4, #0]
 800be76:	1821      	adds	r1, r4, r0
 800be78:	428b      	cmp	r3, r1
 800be7a:	bf04      	itt	eq
 800be7c:	6819      	ldreq	r1, [r3, #0]
 800be7e:	685b      	ldreq	r3, [r3, #4]
 800be80:	6063      	str	r3, [r4, #4]
 800be82:	bf04      	itt	eq
 800be84:	1809      	addeq	r1, r1, r0
 800be86:	6021      	streq	r1, [r4, #0]
 800be88:	6054      	str	r4, [r2, #4]
 800be8a:	e7ca      	b.n	800be22 <_free_r+0x22>
 800be8c:	bd38      	pop	{r3, r4, r5, pc}
 800be8e:	bf00      	nop
 800be90:	20009c80 	.word	0x20009c80

0800be94 <malloc>:
 800be94:	4b02      	ldr	r3, [pc, #8]	@ (800bea0 <malloc+0xc>)
 800be96:	4601      	mov	r1, r0
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	f7fe be0f 	b.w	800aabc <_malloc_r>
 800be9e:	bf00      	nop
 800bea0:	2000018c 	.word	0x2000018c

0800bea4 <_init>:
 800bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea6:	bf00      	nop
 800bea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beaa:	bc08      	pop	{r3}
 800beac:	469e      	mov	lr, r3
 800beae:	4770      	bx	lr

0800beb0 <_fini>:
 800beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb2:	bf00      	nop
 800beb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb6:	bc08      	pop	{r3}
 800beb8:	469e      	mov	lr, r3
 800beba:	4770      	bx	lr
